using PhotoSW.Common;
using PhotoSW.IMIX.Business;
using PhotoSW.IMIX.Model;
//using DigiPhoto.Shader;
using FrameworkHelper;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Ink;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Media.Animation;
using System.Xaml;
using DigiPhoto;
using PhotoSW.Shader;
using System.IO;
using PhotoSW.DataLayer;
using System.Xml;
using FrameworkHelper.Common;
using PhotoSW.Orders;
using PhotoSW.PSControls;
//using DigiPhoto.Cache.Repository;
//using DigiPhoto.Cache.MasterDataCache;
//using DigiPhoto.Cache.DataCache;
using System.Text.RegularExpressions;
using System.Windows.Threading;
using System.Windows.Media.Effects;
using Gif.Components;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;

namespace PhotoSW.Views
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
   // [TemplateVisualState(Name = "Checked", GroupName = "Custom")]
    public partial class MainWindow : Window, IComponentConnector, IStyleConnector
    {

        // public static XamlDirective ConnectionId { get; }
        private BloomEffect _bloomeff = new BloomEffect();
        public ContrastAdjustEffect _brighteff = new ContrastAdjustEffect();
        private System.Windows.Media.Brush _brOriginal;
        private string _cartoon = "0";
        private string _centerX = "";
        private string _centerY = "";
        private CroppingAdorner _clp;
        private MonochromeEffect _colorfiltereff = new MonochromeEffect();
        private ChromaEffectAllColor _colorscreendefault = new ChromaEffectAllColor();
        //  private bool _contentLoaded;
        private ToneMappingEffect _defog = new ToneMappingEffect();
        private string _defoger = "0";
        private string _digimagic = "0";
        private string _emboss = "0";
        private string _bloom = "0";
        private FrameworkElement _felCur = null;
        private string _granite = "0";
        private double _GraphicsZoomFactor = 1.0;
        private ChromaKeyHSVEffect _greenscreendefault3 = new ChromaKeyHSVEffect();
        private UndoBrushEffect _greenUndoEffect = new UndoBrushEffect();
        private string _GreyScale = "0";
        private string _hue = "##";
        private string _invert = "0";
        private string _softskin = "##";
        private double _maxZoomFactor = 4.0;
        private int _photoId;
        private int _previousPhotoId;
        private int _semiOrderProfileId;
        private string _sepia = "0";
        private string _Sharepen = "##";
        private ShEffect _sharpeff = new ShEffect();
        private ShiftHueEffect _shifthueeff = new ShiftHueEffect();
        private SoftSkinEffect _softskinEffect = new SoftSkinEffect();
        private string _tempFileName;
        private MultiChannelContrastEffect _under = new MultiChannelContrastEffect();
        private string _underwater = "0";
        private int _x;
        private int _y;
        private double _ZoomFactor = 1.0;
        private double _ZoomFactorGreen = 1.0;
        private double actualHgt = 0.0;
        private double actualWdth = 0.0;
        List<TextBox> lstBox = new List<TextBox>();
        private double _EnlargeReduceFactor = 1.0;
        private double attributeHeight = 10.0;
        private double attributeWidth = 10.0;
        private string BackgroundDBValue = string.Empty;
        private string BackgroundSelectedValue = string.Empty;

        private bool IsKeepDrop;
        public string BGfolderPathspecproductType = "8x10";

        public string borderfilename = string.Empty;
        private string borderName;

        private int borderSelectedIndex = -1;
        private double bright = 0.0;

        private double canvasLeft;
        private double canvasTop;

        private bool checkDigimagic = false;

        private string ChromaBorderPath = string.Empty;
        private double ChromaCenterX = 0.0;
        private double ChromaCenterY = 0.0;

        private static string ChromaColorDefault;
        private Dictionary<string, decimal?> chromaDefaultInfo = new Dictionary<string, decimal?>();

        private double ChromaGridLeft = 0.0;
        private double ChromaGridTop = 0.0;
        //  internal Button ChromaRed;

        private static decimal? ChromaToleranceDefault;
        private double ChromaZoomFactor = 0.0;
        private double circleheight;
        private double circlewidth;
        private ColorKeyAlphaEffect ckae = new ColorKeyAlphaEffect();

        private System.Windows.Media.Color color;
        private string ColorCode = string.Empty;
        
        private string colour = "none";
        private double cont = 1.0;

        public string CropSize = "##";
        private double currentbrightness = 0.0;
        private System.Windows.Media.Color currentcolor;
        private double currentcontrast = 0.0;
        private double currenthueshift = 0.0;
        private double currentsharpen = 0.0;

        public double dbBrit = 0.0;
        public double dbContr = 0.0;

        private string DefaultBackgroundImagePath = string.Empty;

        private static readonly double DragThreshold;
        private int drawX = 0;
        private int drawY = 0;
        private Stack EffectLog;
        private object EffectsSender = null;
        private UIElement elementForContextMenu = new UIElement();

        private System.Windows.Point EndingPoint = new System.Windows.Point();

        private double fillSize = 5;

        private int FlipMode;

        private int FlipModeY;

        private List<LstMyItems> Frames = new List<LstMyItems>();

        private List<LstMyItems> Graphics = new List<LstMyItems>();
        private bool graphicsBorderApplied = false;
        private int graphicsCount = 0;
        private bool graphicsframeApplied = false;
        private int graphicsTextBoxCount = 0;

        public StringBuilder GumBallAppend = new StringBuilder();
        private bool gumballRestore = false;
        private int gumballTextCount = 0;
        private bool gumEditImage = false;
        private bool gumshow = true;
        private bool gumshowDb = true;
        private double hgt = 10.0;
        private double hueshift = 0.0;
        private double softSkin = 0.0;

        private int index = 0;
        private static Ellipse inkCanvasEllipse = new Ellipse();
        private static System.Windows.Shapes.Rectangle inkCanvasRectangle = new System.Windows.Shapes.Rectangle();
        private static MainWindow instance;
        private bool IsBlockEraseActive = false;
        private bool IsBtnBackgroundClicked = false;
        private bool IsbtnBackgroundWithoutChroma = false;
        private bool isChromaApplied = false;
        private bool IsChromaChanged = false;
        private bool IsComingOnLoad = false;
        private bool IsCropped = false;
        private bool IsDefaultBackgroundEnabled = false;
        private bool isDraggingSelectionRect = false;
        private bool IsEffectChange = false;
        private bool IsEraserActive = false;
        private bool IsEraserDrawEllipseActive = false;
        private bool IsEraserDrawRectangleActive = false;
        public string IsGoupped;
        private bool IsGraphicsChange = false;
        private bool IsGreenCorrection = false;
        private bool isGreenImage = false;
        private bool IsGreenRemove = false;
        public bool IsGumBall = false;
        private bool IsInverseEraseActive = false;
        private bool isLeftMouseButtonDownOnWindow = false;
        private bool IsLoad = false;
        private bool islstBackgroundVisible = false;
        private bool IsModerate = false;
        private bool IsMoreImages = true;
        private bool IsMouseDownClicked = false;
        private bool IsMouseMoveAfterDown = false;
        private bool IsMoveEnabled = false;
        private bool isPrintButtonsVisible = false;
        public bool IsRestoreRideClick = false;
        public bool IsSceneApply = false;
        private bool IsSelectedMainImage = false;
        public bool isSingleScreenPreview = false;
        private bool IsZoomed = false;
        public bool IsCollageChanged = false;
        public bool IsGIFAnimationChanged = false;

        private int lastVisibleIndex = 0;

        private static double lightness = 0.2;

        private List<string> LstGridEffects = new List<string>();

        private int MirrorMode;
        private int MirrorModeY;

        public long MaxPhotoIdCriteria = 0L;

        public long MinPhotoIdCriteria = 0L;
        private string MktImgPath = string.Empty;
        private int mktImgTime = 0;
        private bool move;

        public int NewReord = 0;
        private int NoOfDisplayItem = 4;

        private string OriginalBorder = string.Empty;
        private System.Windows.Point origMouseDownPoint;

        private System.Windows.Point pos;
        private int previouscounter = -1;
        private string primaryColor = string.Empty;
        private string primaryColorDefault = string.Empty;
        private string primaryColorName = string.Empty;

        private int ProducttypeforGS = 0;
        private int ProductTypeId = 0;
        private System.Windows.Point ptnred;

        private bool rectangleEraser = false;

        private double rectewidth;
        private double rectheight;

        private bool redeffectfirstApplied = false;
        private bool redeffectmultiple1Applied = false;
        private bool redeffectmultiple2Applied = false;
        private bool redeffectmultiple3Applied = false;
        private bool redeffectmultiple4Applied = false;
        private bool redeffectmultiple5Applied = false;
        private bool redeffectmultiple6Applied = false;
        private bool redeffectsecondApplied = false;

        private RedEyeEffect redEyeEffect = new RedEyeEffect();
        private redeyeMultiple redEyeEffectMultiple = new redeyeMultiple();
        private redeyeMultiple redEyeEffectMultiple1 = new redeyeMultiple();
        private RedEyeEffect redEyeEffectSecond = new RedEyeEffect();

        private int rotateangle = 0;
        private RotateTransform rotateTransform;
        private static double saturation = 0.15;
        public SearchDetailInfo searchDetails = new SearchDetailInfo();
        private string selectedbackground = string.Empty;
        private string selectedborder = string.Empty;
        public string selectedbordername = string.Empty;
        private Stack SerialLog;
        private bool SetRedeye = false;
        private UIElement shapeToRemove;
        private double sharpen = 0.0;
        public string specproductType = string.Empty;

        private System.Windows.Point StartingPoint = new System.Windows.Point();

        private float tolerance = float.Parse("0");
        private float toleranceDefault = float.Parse("0");
        private TransformGroup transformGroup;
        private TranslateTransform translateTransform;

        private bool undoEraser = false;
        // internal Viewbox vb2;
        //internal TextBlock vwGroup;
        private double wdt = 10.0;

        private double x = 0.0;
        private double y = 0.0;

        private ScaleTransform zoomTransform;

        StrokeCollection undoCanvas = null;
        StrokeCollection redoCanvas = null;
        List<StrokeCollection> listStroke = null;
        List<StrokeCollection> StrokeCollection = new List<StrokeCollection>();
        List<StrokeCollection> StrokeCollection2 = new List<StrokeCollection>();
        Stroke estroke = null;
        List<int> ListofPhoto = new List<int>();
        List<BitmapImage> listBitmapImag = new List<BitmapImage>();
        List<string> listImage = new List<string>();


        //PhotoFrame photoframe = new PhotoFrame();
        public static int dropdownGiFAnimation;
        public static List<string> listGIFImage;
        private int seconds = 0;
        private BackgroundWorker WorkerThread = new BackgroundWorker();

        private bool IsFeather = false;
        private double FeatherSize = 0;
        private bool IsCloneImage = false;
        private int mouse_X = 0;
        private int mouse_Y = 0;

        private bool IsCloneMainImage;
        private bool IsCloneDragging;
        Line cloneLine = new Line();
        private System.Windows.Point StartPointClone;
        private System.Windows.Point EndPointClone;
        private static Ellipse EndCloneCircle = new Ellipse();
        private static Ellipse StartCloneCircle = new Ellipse();

        private bool IsPenTool;
        private bool IsRectangle;
        private bool IsInvert;
        private bool isDrawingLineToJoinStarEndPoint;
        private System.Windows.Point StartPointPoly = new System.Windows.Point();
        private System.Windows.Point EndPointPoly = new System.Windows.Point();
        List<System.Windows.Point> lstPoint = null;
        List<System.Windows.Point> AllPenPoint = null;
        List<UIElement> uIElementCollectionRect = new List<UIElement>();
        List<UIElement> uIElementCollectionLine = new List<UIElement>();

        private string GIFPath;
        public static string fileHotPath;
        private Style cropperStyle;
        public Shape rubberBand = null;
        public readonly RoutedEvent CropImageEvent;
        private bool MouseCapturedthis;
        private double collageFixHeight = 150;
        private double collageFixWidth = 190;
        private int zoomCollageCount = 0;
        private bool IsRestoreCollage = false;
        private int countFeather = 0;
        List<System.Windows.Controls.Image> imgList = new List<System.Windows.Controls.Image>();
        BackgroundWorker worker = null;
        //static MainWindow()
        //{
        //    // This item is obfuscated and can not be translated.
        //}

        public MainWindow()
        {
            this.InitializeComponent();
            ConfigBusiness business = new ConfigBusiness();
            //  LoginUser.SubStoreId = 3;///new added
            List<iMIXConfigurationInfo> newConfigValues = business.GetNewConfigValues(LoginUser.SubStoreId);
            foreach (iMIXConfigurationInfo info in newConfigValues)
            {

                this.ColorCode = info.ConfigurationValue;
                this.isPrintButtonsVisible = string.IsNullOrEmpty(info.ConfigurationValue) == true ? true : false;
                //switch (info.IMIXConfigurationMasterId)
                //{
                //    case 0x5eL:
                //        this.ColorCode = info.ConfigurationValue;
                //        break;

                //    case 0x9aL:
                //        this.isPrintButtonsVisible = Convert.ToBoolean(info.ConfigurationValue);
                //        break;
                //}
            }

            if (this.isPrintButtonsVisible)
            {
                btn6X8Print.Visibility = Visibility.Visible;
                this.btn8X10Print.Visibility = Visibility.Visible;
            }
            else
            {
                this.btn6X8Print.Visibility = Visibility.Collapsed;
                this.btn8X10Print.Visibility = Visibility.Collapsed;
            }
            this.SerialLog = new Stack();
            this.EffectLog = new Stack();
            this.txbUserName.Text = LoginUser.UserName;
            this.txbStoreName.Text = LoginUser.StoreName;
            this.EnabledAllButtons();
            this.txtContent.Text = "Enter Text";
            DragCanvas.SetCanBeDragged(this.Opacitymsk, false);
            DragCanvas.SetCanBeDragged(this.mainImage, false);
            this.LoadFeatures();
            this.mainImage.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
            this.IsEffectChange = false;
            this.IsGraphicsChange = false;
            //        EventManager.RegisterClassHandler(typeof(ListBoxItem),
            //ListBoxItem.MouseLeftButtonDownEvent,
            //new RoutedEventHandler(this.Effects_Click));
            this.btnHome.IsEnabled = true;
            this.btnSave.IsEnabled = true;

            this.ellipticalRadio.Checked += new RoutedEventHandler(this.radio_Click);
            this.rectangularRadio.Checked += new RoutedEventHandler(this.radio_Click);
            this.ignorepsiCheckbox.Click += new RoutedEventHandler(this.checkbox_Click);
            this.fitcurveCheckbox.Click += new RoutedEventHandler(this.checkbox_Click);
            this.decrementThickness.Click += new RoutedEventHandler(this.decrementThickness_Click);
            this.incrementThickness.Click += new RoutedEventHandler(this.incrementThickness_Click);
            this.squre.Cursor = Cursors.None;

            this.MyInkCanvas.SnapsToDevicePixels = true;
            this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.mainImage.SnapsToDevicePixels = true;
            this.mainImage.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.mainImage.OverridesDefaultStyle = true;
            this.GrdGreenScreenDefault.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            Panel.SetZIndex(this.imageundoGrid, 0);
            Panel.SetZIndex(this.canbackgroundParent, 4);
            Panel.SetZIndex(this.Opacitymsk, 2);
            Panel.SetZIndex(this.frm, 6);
            this.canbackgroundParent.IsHitTestVisible = false;
            this.canbackground.IsHitTestVisible = false;

            this.chromaDefaultInfo = business.GetCromaColor(LoginUser.SubStoreId);
            ChromaColorDefault = this.chromaDefaultInfo.Keys.First<string>();
            ChromaToleranceDefault = this.chromaDefaultInfo.Values.First<decimal?>();
            string chromaColorDefault = ChromaColorDefault;
            if (chromaColorDefault != null)
            {
                if (!(chromaColorDefault == "Green"))
                {
                    if (chromaColorDefault == "Blue")
                    {
                        this.primaryColor = this.ColorCode;
                        this.primaryColorName = "Blue";
                        this.tolerance = float.Parse(ChromaToleranceDefault.ToString());
                        this.primaryColorDefault = this.ColorCode;
                        this.toleranceDefault = float.Parse(ChromaToleranceDefault.ToString());
                        this.btnFillMinus.IsEnabled = false;
                        this.btnFillPlus.IsEnabled = false;
                    }
                    else if (chromaColorDefault == "Red")
                    {
                        this.primaryColor = this.ColorCode;
                        this.primaryColorName = "Red";
                        this.tolerance = float.Parse(ChromaToleranceDefault.ToString());
                        this.primaryColorDefault = this.ColorCode;
                        this.toleranceDefault = float.Parse(ChromaToleranceDefault.ToString());
                        this.btnFillMinus.IsEnabled = false;
                        this.btnFillPlus.IsEnabled = false;
                    }
                    else if (chromaColorDefault == "Gray")
                    {
                        this.primaryColor = this.ColorCode;
                        this.primaryColorName = "Gray";
                        this.tolerance = float.Parse(ChromaToleranceDefault.ToString());
                        this.primaryColorDefault = this.ColorCode;
                        this.toleranceDefault = float.Parse(ChromaToleranceDefault.ToString());
                        this.btnFillMinus.IsEnabled = false;
                        this.btnFillPlus.IsEnabled = false;
                    }
                }
                else
                {
                    this.primaryColor = this.ColorCode;
                    this.primaryColorName = "Green";
                    this.tolerance = float.Parse(ChromaToleranceDefault.ToString());
                    this.primaryColorDefault = "#00FF00";
                    this.toleranceDefault = float.Parse(ChromaToleranceDefault.ToString());
                }
            }
            this.FillProductCombo();
            this.GetBackImageSettings();
            this.CollapsePopUp();
            this.chromaKeyPopup();
            this.IsImageDirtyState = false;
            this.lstStrip.ItemContainerGenerator.StatusChanged += new EventHandler(this.ItemContainerGenerator_StatusChanged);
        }


        private void AddCropToElement(FrameworkElement fel, bool IsRedeye, System.Windows.Controls.Image cropImage, decimal aspectRatio)
        {
            try
            {
                bool arg_1C_0;
                bool expr_0D = arg_1C_0 = (this._felCur == null);
                bool flag;
                if (-1 != 0)
                {
                    flag = expr_0D;
                    arg_1C_0 = flag;
                }
                if (!arg_1C_0)
                {
                    this.RemoveCropFromCur();
                }
                if (5 != 0)
                {
                    flag = IsRedeye;
                }
                System.Windows.Documents.AdornerLayer adornerLayer;
                if (!flag)
                {
                    Rect rcInit = default(Rect);
                    rcInit = this.GetCropRectangle(aspectRatio);
                    adornerLayer = System.Windows.Documents.AdornerLayer.GetAdornerLayer(this.GrdCrop);
                    this._clp = new CroppingAdorner(this.GrdCrop, rcInit);
                }
                else if (!false)
                {
                    Rect rcInit = new Rect(62.671083040935912, 38.358400000000017, 60.671083040935912, 38.358400000000017);
                    adornerLayer = System.Windows.Documents.AdornerLayer.GetAdornerLayer(this.GrdCrop);
                    this._clp = new CroppingAdorner(this.GrdCrop, rcInit);
                    adornerLayer.Add(this._clp);
                    goto IL_F2;
                }
                adornerLayer.Add(this._clp);
                this._felCur = this.GrdCrop;
                do
                {
                    this.SetClipColorGrey();
                }
                while (2 == 0);
                goto IL_107;
            IL_F2:
                this._felCur = this.GrdCrop;
                this.SetClipColorGrey();
            IL_107:
                if (false)
                {
                    goto IL_F2;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
        }

        private void AddDefaultItems()
        {
            this.CmbFontSize.Items.Clear();
            this.CmbFontSize.Items.Add("10");
            this.CmbFontSize.Items.Add("11");
            this.CmbFontSize.Items.Add("12");
            this.CmbFontSize.Items.Add("14");
            this.CmbFontSize.Items.Add("16");
            this.CmbFontSize.Items.Add("18");
            this.CmbFontSize.Items.Add("20");
            do
            {
                this.CmbFontSize.Items.Add("22");
                this.CmbFontSize.Items.Add("24");
                this.CmbFontSize.Items.Add("26");
                this.CmbFontSize.Items.Add("28");
                this.CmbFontSize.Items.Add("36");
                this.CmbFontSize.Items.Add("48");
                this.CmbFontSize.Items.Add("72");
            }
            while (6 == 0);
            this.CmbFontSize.Items.Add("80");
            this.CmbFontSize.Items.Add("90");
            this.CmbFontSize.Items.Add("100");
        }

        protected void AddToPrintQueue(int ProductTypeId)
        {
            if (!false)
            {
                try
                {
                    ProductBusiness productBusiness;
                    OrderBusiness orderBusiness;
                    List<string> list;
                    do
                    {
                        ProductBusiness expr_120 = new ProductBusiness();
                        if (5 != 0)
                        {
                            productBusiness = expr_120;
                        }
                        orderBusiness = new OrderBusiness();
                        new PrinterBusniess();
                        list = new List<string>();
                    }
                    while (false);
                    list.Add(this.PhotoId.ToString());
                    double productPricing;
                    do
                    {
                        productPricing = productBusiness.GetProductPricing(ProductTypeId);
                    }
                    while (false);
                    int expr_5D = 15;
                    if (expr_5D != 0)
                    {
                        string uniqueSynccode = CommonUtility.GetUniqueSynccode(Convert.ToInt32((ApplicationObjectEnum)expr_5D).ToString().PadLeft(2, '0'), LoginUser.countrycode, LoginUser.Storecode, LoginUser.SubStoreId.ToString());
                        int orderDetailedKey = orderBusiness.SaveOrderLineItems(ProductTypeId, null, this.PhotoId.ToString(), 1, null, 0m, (decimal)productPricing, 0m, (decimal)productPricing, -1, LoginUser.SubStoreId, 0, string.Empty, uniqueSynccode, null, null, null, null);
                        new PrinterBusniess().AddImageToPrinterQueue(ProductTypeId, list, orderDetailedKey, false, true, null, 1);
                    }
                }
                catch (Exception serviceException)
                {
                    if (!false)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                IL_17D:
                    if (false)
                    {
                        goto IL_17D;
                    }
                }
                finally
                {
                }
            }
        }

        private void angleAltitudeSelector1_AngleChanged()
        {
            this.IsGraphicsChange = true;
            RotateTransform rotateTransform;
            bool arg_25B_0;
            bool arg_23A_0;
            int arg_23A_1;
            TextBox textBox;
            Button button = (Button)this.elementForContextMenu;
            TransformGroup transformGroup = new TransformGroup();
            TransformGroup transformGroup2 = this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup;

            if (6 != 0)
            {
                if (this.elementForContextMenu == null)
                {
                    rotateTransform = new RotateTransform();
                    rotateTransform.CenterX = 0.0;
                    rotateTransform.CenterY = 0.0;
                    rotateTransform.Angle = this.jrotate.Angle;
                    this.canbackground.RenderTransformOrigin = (this.GrdBrightness.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5));
                    this.canbackground.RenderTransform = (this.GrdBrightness.RenderTransform = rotateTransform);
                    goto IL_386;
                }
                int expr_34 = (arg_23A_0 = (arg_25B_0 = this.IsSelectedMainImage)) ? 1 : 0;
                if (false)
                {
                    goto IL_25B;
                }
                int expr_40 = arg_23A_1 = 0;
                if (expr_40 != 0)
                {
                    goto IL_23A;
                }
                if (expr_34 != expr_40)
                {
                    rotateTransform = new RotateTransform();
                    rotateTransform.CenterX = 0.0;
                    rotateTransform.CenterY = 0.0;
                    rotateTransform.Angle = this.jrotate.Angle;
                    this.canbackground.RenderTransformOrigin = (this.GrdBrightness.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5));
                    if (!false)
                    {
                        this.canbackground.RenderTransform = (this.GrdBrightness.RenderTransform = rotateTransform);
                        goto IL_2F4;
                    }
                    goto IL_27E;
                }
                else
                {
                    if (!(this.elementForContextMenu is TextBox))
                    {
                        goto IL_176;
                    }
                    textBox = (TextBox)this.elementForContextMenu;
                    rotateTransform = new RotateTransform();
                    rotateTransform.CenterX = 0.0;
                    rotateTransform.CenterY = 0.0;
                    rotateTransform.Angle = this.jrotate.Angle;
                }
            }
            textBox.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
            textBox.RenderTransform = rotateTransform;
        IL_176:
            if (!(this.elementForContextMenu is Button))
            {
                goto IL_2F3;
            }
            if (2 == 0)
            {
                goto IL_2DB;
            }
            if (transformGroup2 == null)
            {
                goto IL_282;
            }
            if (4 == 0)
            {
                goto IL_2F3;
            }
            if (transformGroup2.Children.Count <= 0)
            {
                goto IL_281;
            }
            if (transformGroup2.Children[0] is ScaleTransform)
            {
                transformGroup.Children.Add(transformGroup2.Children[0]);
            }
            arg_23A_0 = (transformGroup2.Children.Count > 1);
            arg_23A_1 = 0;
        IL_23A:
            if ((arg_23A_0 ? 1 : 0) == arg_23A_1)
            {
                goto IL_280;
            }
        IL_243:
            arg_25B_0 = !(transformGroup2.Children[1] is ScaleTransform);
        IL_25B:
            if (!arg_25B_0)
            {
                if (false)
                {
                    goto IL_243;
                }
                transformGroup.Children.Add(transformGroup2.Children[1]);
            }
        IL_27E:
        IL_280:
        IL_281:
        IL_282:
            RotateTransform rotateTransform2 = new RotateTransform();
            button.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
            rotateTransform2.CenterX = 0.0;
        IL_2B8:
            rotateTransform2.CenterY = 0.0;
            rotateTransform2.Angle = this.jrotate.Angle;
        IL_2DB:
            transformGroup.Children.Add(rotateTransform2);
            button.RenderTransform = transformGroup;
        IL_2F3:
        IL_2F4:
        IL_386:
            if (!false)
            {
                return;
            }
            goto IL_2B8;
        }

        private void AntiRotate(int angle)
        {
            bool arg_16_0 = angle != 0;
            if (5 != 0)
            {
                bool flag = angle == -1;
                arg_16_0 = flag;
            }
            if (!arg_16_0)
            {
                this.rotateangle = angle;
            }
            this.GrdRotate.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
            RotateTransform rotateTransform = new RotateTransform();
            int num = this.rotateangle;
            try
            {
                int num2 = this.rotateangle;
                int arg_6F_0;
                if (num2 <= 90)
                {
                    arg_6F_0 = num2;
                }
                else
                {
                    int expr_7C = arg_6F_0 = num2;
                    if (!false)
                    {
                        if (expr_7C != 180)
                        {
                            goto IL_88;
                        }
                        goto IL_D1;
                    }
                }
                int arg_75_0;
                if (arg_6F_0 != 0)
                {
                    arg_75_0 = num2;
                }
                else
                {
                    if (6 != 0)
                    {
                        rotateTransform.Angle = 270.0;
                        this.rotateangle = 270;
                        goto IL_10A;
                    }
                    goto IL_D1;
                }
            IL_73:
                if (arg_75_0 != 90)
                {
                    goto IL_10A;
                }
                rotateTransform.Angle = 0.0;
                this.rotateangle = 0;
                goto IL_10A;
            IL_88:
                int expr_88 = arg_75_0 = num2;
                if (false)
                {
                    goto IL_73;
                }
                if (expr_88 != 270)
                {
                    goto IL_10A;
                }
                rotateTransform.Angle = 180.0;
                this.rotateangle = 180;
                goto IL_10A;
            IL_D1:
                rotateTransform.Angle = 90.0;
                this.rotateangle = 90;
            IL_10A:
                this.GrdRotate.LayoutTransform = rotateTransform;
                if (2 == 0)
                {
                    goto IL_88;
                }
            }
            catch (Exception serviceException)
            {
                string message;
                do
                {
                    message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                }
                while (false);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                if (!false)
                {
                    this.LogOperation(new LogObject
                    {
                        value = (float)num,
                        opName = "antirotate"
                    });
                    if (this.rotateangle > 0)
                    {
                        this.IsEffectChange = true;
                        VisualStateManager.GoToState(this.btnrotate, "Checked", true);
                        VisualStateManager.GoToState(this.btnantirotate, "Checked", true);
                        this.RedEye.IsEnabled = false;
                        goto IL_1EA;
                    }
                    VisualStateManager.GoToState(this.btnrotate, "Unchecked", true);
                    VisualStateManager.GoToState(this.btnantirotate, "Unchecked", true);
                }
                this.RedEye.IsEnabled = true;
            IL_1EA:;
            }
        }

        private void AntiRotateButton_Click(object sender, RoutedEventArgs e)
        {
            while (true)
            {
                while (true)
                {
                    this.CmbProductType.Visibility = Visibility.Collapsed;
                    if (!false)
                    {
                        bool arg_5B_0;
                        bool expr_54 = arg_5B_0 = this.jrotate.IsVisible;
                        if (!false)
                        {
                            arg_5B_0 = !expr_54;
                        }
                        if (!arg_5B_0)
                        {
                            this.jrotate.Angle -= 5.0;
                        }
                    }
                IL_3D:
                    if (false)
                    {
                        break;
                    }
                    if (!false)
                    {
                        if (true)
                        {
                            return;
                        }
                        break;
                    }
                    goto IL_3D;
                }
            }
        }

        private void ApplyBorder(string FileName, string selectedborder, int ProductType, object sender)
        {
            if (!(this.ChromaBorderPath == FileName))
            {
                this.OriginalBorder = this.ChromaBorderPath;
                this.ChromaBorderPath = FileName;                
            }
            this.borderName = System.IO.Path.GetFileName(FileName);
            Uri uri = new Uri(FileName);
            List<UIElement> list = new List<UIElement>();
            bool flag;
            do
            {
                flag = (this.previouscounter != this.lstFrame.SelectedIndex);
            }
            while (false);
            if (!flag)
            {
                this.previouscounter = -1;
                IEnumerator enumerator = this.frm.Children.GetEnumerator();
                try
                {
                    while (enumerator.MoveNext())
                    {
                        UIElement uIElement = (UIElement)enumerator.Current;
                        if (uIElement.Uid.StartsWith("frame"))
                        {
                            if (!true)
                            {
                                break;
                            }
                            list.Add(uIElement);
                        }
                    }
                }
                finally
                {
                    IDisposable disposable = enumerator as IDisposable;
                    if (disposable != null)
                    {
                        disposable.Dispose();
                        if (7 != 0)
                        {
                        }
                    }
                }
                using (List<UIElement>.Enumerator enumerator2 = list.GetEnumerator())
                {
                    while (8 == 0 || enumerator2.MoveNext())
                    {
                        UIElement uIElement = enumerator2.Current;
                        this.frm.Children.Remove(uIElement);
                        selectedborder = string.Empty;
                        this.graphicsframeApplied = false;
                        VisualStateManager.GoToState(this.btnBorder, "Unchecked", true);
                        this.forWdht.Height = this.GrdSize.ActualHeight;
                        this.forWdht.Width = this.GrdSize.ActualWidth;
                        this.forWdht.InvalidateArrange();
                        this.forWdht.InvalidateMeasure();
                        this.forWdht.InvalidateVisual();
                        this.Zomout(true);
                    }
                }
                if (this._ZoomFactor == 0.95)
                {
                    if (!false)
                    {
                        this._ZoomFactor = 1.0;
                        if (this.zoomTransform == null || this._ZoomFactor < 0.5)
                        {
                            goto IL_43C;
                        }
                        if (-1 != 0)
                        {
                            if (this.FlipMode != 0 || this.FlipModeY != 0)
                            {
                                if (!false)
                                {
                                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                                    this.zoomTransform.ScaleX = this._ZoomFactor;
                                    this.zoomTransform.ScaleY = this._ZoomFactor;
                                    goto IL_2AA;
                                }
                            }
                            else
                            {
                                do
                                {
                                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                                }
                                while (7 == 0);
                                this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                                this.zoomTransform.ScaleX = this._ZoomFactor;
                            }
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            this.IsGraphicsChange = true;
                            goto IL_410;
                        }
                        goto IL_452;
                    }
                IL_2AA:
                    this.transformGroup = new TransformGroup();
                    this.transformGroup.Children.Add(this.zoomTransform);
                    this.transformGroup.Children.Add(this.translateTransform);
                    this.transformGroup.Children.Add(this.rotateTransform);
                    this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                    this.IsGraphicsChange = true;
                IL_410:
                    this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
                IL_43C:;
                }
            }
            else
            {
                this.previouscounter = this.lstFrame.SelectedIndex;
            }
        IL_452:
            if (this.IsBtnBackgroundClicked && this.IsbtnBackgroundWithoutChroma)
            {
                this.ApplyEffectsAgainAfterChroma();
            }
        }

        private void ApplyDragSelectionRect()
        {
            while (!false)
            {
                this.dragSelectionBorder.Visibility = Visibility.Collapsed;
                double left = Canvas.GetLeft(this.dragSelectionBorder);
                while (7 != 0)
                {
                    double top;
                    if (!false)
                    {
                        top = Canvas.GetTop(this.dragSelectionBorder);
                    }
                    if (5 == 0)
                    {
                        break;
                    }
                    double width = this.dragSelectionBorder.Width;
                    double height = this.dragSelectionBorder.Height;
                    Rect rect = new Rect(left, top, width, height);
                    if (3 != 0)
                    {
                        rect.Inflate(width / 10.0, height / 10.0);
                        return;
                    }
                }
            }
        }

        private void ApplyEffectsAgainAfterChroma()
        {
            Canvas.SetLeft(this.Opacitymsk, this.ChromaGridLeft);
            Canvas.SetLeft(this.canbackgroundParent, this.ChromaGridLeft);
            Canvas.SetTop(this.Opacitymsk, this.ChromaGridTop);
            Canvas.SetTop(this.canbackgroundParent, this.ChromaGridTop);
            bool flag;
            BitmapImage bitmapImage;
            BitmapImage bitmapImage2;
            double num;
            bool expr_2C4;
            while (true)
            {
                ScaleTransform scaleTransform;
                bool arg_E2_0;
                if (this.ChromaCenterX > 0.0)
                {
                    scaleTransform = new ScaleTransform();
                    scaleTransform.CenterX = this.ChromaCenterX;
                    scaleTransform.CenterY = this.ChromaCenterY;
                    if (this.ChromaZoomFactor != -1.0)
                    {
                        scaleTransform.ScaleX = this.ChromaZoomFactor;
                        scaleTransform.ScaleY = this.ChromaZoomFactor;
                        arg_E2_0 = (this.ChromaZoomFactor == 1.0);
                        goto IL_E2;
                    }
                    goto IL_126;
                }
            IL_1A6:
                flag = string.IsNullOrWhiteSpace(this.ChromaBorderPath);
                bool arg_34C_0;
                bool expr_1B3 = arg_34C_0 = flag;
                if (2 == 0)
                {
                    goto IL_34C;
                }
                if (expr_1B3)
                {
                    goto IL_7F1;
                }
                Uri uriSource = new Uri(this.ChromaBorderPath);
                bitmapImage = new BitmapImage();
                bitmapImage2 = new BitmapImage();
                bitmapImage2.BeginInit();
                bitmapImage2.UriSource = uriSource;
                bitmapImage2.EndInit();
            IL_1EF:
                bitmapImage2.Freeze();
                bitmapImage.BeginInit();
                if (false)
                {
                    continue;
                }
                bitmapImage.UriSource = uriSource;
                if (this.ProductTypeId == 1)
                {
                    if (bitmapImage2.Height > bitmapImage2.Width)
                    {
                        bitmapImage.DecodePixelHeight = 2400;
                        bitmapImage.DecodePixelWidth = 1800;
                        bitmapImage.EndInit();
                        num = (double)bitmapImage.PixelWidth / (double)bitmapImage.PixelHeight;
                        goto IL_2AB;
                    }
                    bitmapImage.DecodePixelHeight = 1800;
                    goto IL_284;
                }
                else
                {
                    arg_34C_0 = (this.ProductTypeId != 2);
                }
            IL_34C:
                if (!arg_34C_0)
                {
                    goto Block_14;
                }
                if (this.ProductTypeId == 30)
                {
                    flag = (bitmapImage2.Height <= bitmapImage2.Width);
                    if (5 != 0)
                    {
                        goto Block_18;
                    }
                    goto IL_284;
                }
                else
                {
                    int arg_5A3_0 = this.ProductTypeId;
                    int arg_5A3_1 = 98;
                    int expr_5A3;
                    int expr_5A6;
                    do
                    {
                        expr_5A3 = (arg_5A3_0 = ((arg_5A3_0 == arg_5A3_1) ? 1 : 0));
                        expr_5A6 = (arg_5A3_1 = 0);
                    }
                    while (expr_5A6 != 0);
                    if (expr_5A3 != expr_5A6)
                    {
                        goto Block_23;
                    }
                    if (bitmapImage.Height > bitmapImage.Width)
                    {
                        goto Block_26;
                    }
                    if (!false)
                    {
                        goto Block_27;
                    }
                    goto IL_1EF;
                }
            IL_2AB:
                expr_2C4 = (arg_E2_0 = (this.widthimg.ActualHeight <= this.widthimg.ActualWidth));
                if (3 != 0)
                {
                    break;
                }
                goto IL_E2;
            IL_284:
                bitmapImage.DecodePixelWidth = 2400;
                bitmapImage.EndInit();
                num = (double)bitmapImage.PixelHeight / (double)bitmapImage.PixelWidth;
                goto IL_2AB;
            IL_126:
                if (this.FlipMode != 0 || this.FlipModeY != 0)
                {
                    scaleTransform.ScaleX = scaleTransform.ScaleX;
                }
                this.zoomTransform = scaleTransform;
                this.transformGroup.Children.Add(scaleTransform);
                if (this.GrdGreenScreenDefault3.RenderTransform == null)
                {
                    this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                }
                goto IL_1A6;
            IL_E2:
                if (!arg_E2_0)
                {
                    VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                }
                this.lblzoomplus.Content = this.ChromaZoomFactor * 100.0 + " % ";
                goto IL_126;
            }
            if (!expr_2C4)
            {
                this.forWdht.Width = this.widthimg.ActualHeight * num;
                this.forWdht.Height = this.widthimg.ActualHeight;
            }
            else
            {
                this.forWdht.Height = this.widthimg.ActualWidth * num;
                this.forWdht.Width = this.widthimg.ActualWidth;
            }
            goto IL_71F;
        Block_14:
            if (bitmapImage2.Height > bitmapImage2.Width)
            {
                bitmapImage.DecodePixelHeight = 3000;
                bitmapImage.DecodePixelWidth = 2400;
                bitmapImage.EndInit();
                num = (double)bitmapImage.PixelWidth / (double)bitmapImage.PixelHeight;
                goto IL_3D5;
            }
            bitmapImage.DecodePixelHeight = 2400;
        IL_3AF:
            bitmapImage.DecodePixelWidth = 3000;
            bitmapImage.EndInit();
            num = (double)bitmapImage.PixelHeight / (double)bitmapImage.PixelWidth;
        IL_3D5:
            if (this.widthimg.ActualHeight > this.widthimg.ActualWidth)
            {
                this.forWdht.Width = this.widthimg.ActualHeight * num;
                this.forWdht.Height = this.widthimg.ActualHeight;
            }
            else
            {
                this.forWdht.Height = this.widthimg.ActualWidth * num;
                this.forWdht.Width = this.widthimg.ActualWidth;
            }
            goto IL_71F;
        Block_18:
            if (!flag)
            {
                bitmapImage.DecodePixelHeight = 2700;
                bitmapImage.DecodePixelWidth = 1800;
                if (false)
                {
                    goto IL_3AF;
                }
                bitmapImage.EndInit();
                num = (double)bitmapImage.PixelWidth / (double)bitmapImage.PixelHeight;
            }
            else
            {
                bitmapImage.DecodePixelHeight = 1800;
                bitmapImage.DecodePixelWidth = 2700;
                bitmapImage.EndInit();
                num = (double)bitmapImage.PixelHeight / (double)bitmapImage.PixelWidth;
            }
            if (this.widthimg.ActualHeight > this.widthimg.ActualWidth)
            {
                this.forWdht.Width = this.widthimg.ActualHeight * num;
                this.forWdht.Height = this.widthimg.ActualHeight;
            }
            else
            {
                this.forWdht.Height = this.widthimg.ActualWidth * num;
                this.forWdht.Width = this.widthimg.ActualWidth;
                if (8 != 0)
                {
                }
            }
            goto IL_71F;
        Block_23:
            bitmapImage.DecodePixelHeight = 900;
            if (6 != 0)
            {
                bitmapImage.DecodePixelWidth = 900;
                bitmapImage.EndInit();
            }
            num = (double)bitmapImage.PixelWidth / (double)bitmapImage.PixelHeight;
            if (this.widthimg.ActualHeight > this.widthimg.ActualWidth)
            {
                this.forWdht.Width = this.widthimg.ActualHeight * num;
                this.forWdht.Height = this.widthimg.ActualHeight;
            }
            else
            {
                this.forWdht.Height = this.widthimg.ActualWidth * num;
                this.forWdht.Width = this.widthimg.ActualWidth;
            }
            goto IL_71F;
        Block_26:
            num = bitmapImage.Width / bitmapImage.Height;
            goto IL_6BC;
        Block_27:
            num = bitmapImage.Height / bitmapImage.Width;
        IL_6BC:
            if (this.forWdht.Height > this.forWdht.Width)
            {
                this.forWdht.Width = this.forWdht.Height * num;
            }
            else
            {
                this.forWdht.Height = this.forWdht.Width * num;
            }
            bitmapImage.EndInit();
        IL_71F:
            this.selectedborder = System.IO.Path.GetFileName(bitmapImage.ToString());
            OpaqueClickableImage opaqueClickableImage = new OpaqueClickableImage();
            opaqueClickableImage.Uid = "frame";
            opaqueClickableImage.Source = bitmapImage;
            opaqueClickableImage.IsHitTestVisible = false;
            opaqueClickableImage.Stretch = Stretch.Fill;
            opaqueClickableImage.Loaded += new RoutedEventHandler(this.objCurrent_Loaded);
            opaqueClickableImage.Opacity = 1.0;
            this.frm.Width = this.forWdht.Width;
            this.frm.Height = this.forWdht.Height;
            this.forWdht.InvalidateArrange();
            this.forWdht.InvalidateMeasure();
            this.forWdht.InvalidateVisual();
            this.frm.Children.Add(opaqueClickableImage);
            bitmapImage.Freeze();
        IL_7F1:
            MemoryManagement.FlushMemory();
        }

        private void ApplyCloneEffectGrid()
        {
            string text = this.primaryColorName;
            if (text != null)
            {
                if (!(text == "Green"))
                {
                    if (!(text == "Blue"))
                    {
                        if (!(text == "Red"))
                        {
                            if (text == "Gray")
                            {
                                this.ckae.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                                this.ckae.Tolerance = (double)this.toleranceDefault;
                                this.MyInkCanvasParent.Effect = this.ckae;
                            }
                        }
                        else
                        {
                            this.ckae.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                            this.ckae.Tolerance = (double)this.toleranceDefault;
                            this.MyInkCanvasParent.Effect = this.ckae;
                        }
                    }
                    else
                    {
                        this.ckae.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                        this.ckae.Tolerance = (double)this.toleranceDefault;
                        this.MyInkCanvasParent.Effect = this.ckae;
                    }
                }
                else
                {
                    this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                    this._greenscreendefault3.HueMin = -1.99;
                    this._greenscreendefault3.HueMax = 0.9;
                    this._greenscreendefault3.LightnessShift = MainWindow.lightness;
                    this._greenscreendefault3.SaturationShift = MainWindow.saturation;
                    // this._greenscreendefault3.Opacity = 0.2;
                    this.mainImage.Effect = this._greenscreendefault3;
                    //  this.MyInkCanvasParent.Effect = this._greenscreendefault3;
                }
            }
            this.MyInkCanvas.SnapsToDevicePixels = true;
            this.MyInkCanvas.UseLayoutRounding = true;
            this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.mainImage.SnapsToDevicePixels = true;
            this.mainImage.UseLayoutRounding = true;
            this.mainImage.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.GrdGreenScreenDefault3.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);

        }
        private void ApplyGreenEffectGrid()
        {
            string text = this.primaryColorName;
            if (text != null)
            {
                if (!(text == "Green"))
                {
                    if (!(text == "Blue"))
                    {
                        if (!(text == "Red"))
                        {
                            if (text == "Gray")
                            {
                                this.ckae.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                                this.ckae.Tolerance = (double)this.toleranceDefault;
                                this.MyInkCanvasParent.Effect = this.ckae;
                            }
                        }
                        else
                        {
                            this.ckae.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                            this.ckae.Tolerance = (double)this.toleranceDefault;
                            this.MyInkCanvasParent.Effect = this.ckae;
                        }
                    }
                    else
                    {
                        this.ckae.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                        this.ckae.Tolerance = (double)this.toleranceDefault;
                        this.MyInkCanvasParent.Effect = this.ckae;
                    }
                }
                else
                {
                    this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                   // this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#F8F8FF");
                    this._greenscreendefault3.HueMin = 0.3;
                    this._greenscreendefault3.HueMax = 0.5;
                    this._greenscreendefault3.LightnessShift = MainWindow.lightness;
                    this._greenscreendefault3.SaturationShift = MainWindow.saturation;
                    //this._greenscreendefault3.Opacity = 0.2;
                    this.MyInkCanvasParent.Effect = this._greenscreendefault3;

                }
            }
            this.MyInkCanvas.SnapsToDevicePixels = true;
            this.MyInkCanvas.UseLayoutRounding = true;
            this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.mainImage.SnapsToDevicePixels = true;
            this.mainImage.UseLayoutRounding = true;
            this.mainImage.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.GrdGreenScreenDefault3.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
        }

        private void BindStrip()
        {
            do
            {
                if (false || -1 != 0)
                {
                    this.lstStrip.ItemsSource = null;
                }
            }
            while (6 == 0);
            this.lstStrip.ItemsSource = from o in RobotImageLoader.robotImages
                                        where o.MediaType == 1
                                        orderby o.PhotoId
                                        select o;
            this.lstStrip.Items.Refresh();
        }

        private Bitmap BitmapImage2Bitmap(BitmapImage bitmapImage)
        {
            MemoryStream expr_7B = new MemoryStream();
            MemoryStream memoryStream;
            if (!false)
            {
                memoryStream = expr_7B;
                // goto IL_0A;
            }
            Bitmap result;
            try
            {
                Bitmap original;
                while (true)
                {
                IL_0A:
                    BitmapEncoder bitmapEncoder = new BmpBitmapEncoder();
                    if (2 != 0)
                    {
                        bitmapEncoder.Frames.Add(BitmapFrame.Create(bitmapImage));
                        goto IL_1C;
                    }
                IL_24:
                    if (5 != 0)
                    {
                        if (false)
                        {
                            continue;
                        }
                        original = new Bitmap(memoryStream);
                        if (2 != 0)
                        {
                            break;
                        }
                    }
                IL_1D:
                    bitmapEncoder.Save(memoryStream);
                    goto IL_24;
                IL_1C:
                    goto IL_1D;
                }
                result = new Bitmap(original);
            }
            finally
            {
                if (6 == 0 || memoryStream != null)
                {
                    ((IDisposable)memoryStream).Dispose();
                }
            }
            return result;
        }

        private void Blue_Click(object sender, RoutedEventArgs e)
        {
            if (-1 != 0 && 8 != 0 && true)
            {
                if (7 == 0)
                {
                    return;
                }
                this.primaryColor = "#0000FF";
                this.primaryColorName = "Blue";
            }
            this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
        }

        private void BrightnessMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                luminosityPopup();

                this.brightImg1.Source = new BitmapImage(new Uri("/images/plus_new_act.png", UriKind.Relative));
                this.brightImg2.Source = new BitmapImage(new Uri("/images/brightness_red_act.png", UriKind.Relative));
                this.brightImg3.Source = new BitmapImage(new Uri("/images/munis_new_act.png", UriKind.Relative));

                if (4 != 0)
                {
                    this.bright -= 0.01;
                    this._brighteff.Brightness = this.bright;
                    if (5 == 0)
                    {
                        goto IL_42;
                    }
                }
                this._brighteff.Contrast = this.cont;
            IL_41:
            IL_42:
                if (-1 == 0)
                {
                    goto IL_41;
                }
                this.GrdBrightness.Effect = this._brighteff;
            }
            catch (Exception serviceException)
            {
                if (4 != 0)
                {
                }
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                while (!true)
                {
                }
            }
            finally
            {
                MemoryManagement.FlushMemory();
                while (3 == 0)
                {
                }
            }
        }

        private void BrightnessPlus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                luminosityPopup();
                this.brightImg1.Source = new BitmapImage(new Uri("/images/plus_new_act.png", UriKind.Relative));
                this.brightImg2.Source = new BitmapImage(new Uri("/images/brightness_red_act.png", UriKind.Relative));
                this.brightImg3.Source = new BitmapImage(new Uri("/images/munis_new_act.png", UriKind.Relative));

                if (4 != 0)
                {
                    this.bright += 0.01;
                    this._brighteff.Brightness = this.bright;
                    if (5 == 0)
                    {
                        goto IL_42;
                    }
                }
                this._brighteff.Contrast = this.cont;
            IL_41:
            IL_42:
                if (-1 == 0)
                {
                    goto IL_41;
                }
                this.GrdBrightness.Effect = this._brighteff;
            }
            catch (Exception serviceException)
            {
                if (4 != 0)
                {
                }
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                while (!true)
                {
                }
            }
            finally
            {
                MemoryManagement.FlushMemory();
                while (3 == 0)
                {
                }
            }
        }

        private void BringToFront_Click(object sender, RoutedEventArgs e)
        {
            this.templatePopup();
            this.btnBringToFrontAct.Visibility = Visibility.Visible;
            this.CmbProductType.Visibility = Visibility.Collapsed;
            while (true)
            {
                int arg_16A_0 = this.dragCanvas.Children.Count;
                bool arg_17C_0;
                if (this.elementForContextMenu != null)
                {
                    arg_17C_0 = !(this.elementForContextMenu is Button);
                    if (-1 != 0)
                    {
                    }
                }
                else
                {
                    arg_17C_0 = true;
                }
            IL_53:
                bool flag = arg_17C_0;
                if (false)
                {
                    goto IL_ED;
                }
                if (flag)
                {
                    goto IL_B0;
                }
                if (-1 != 0)
                {
                    break;
                }
                continue;
                goto IL_53;
            }
            int num = Panel.GetZIndex(this.elementForContextMenu);
        IL_71:
            if (num == 1)
            {
                Panel.SetZIndex(this.elementForContextMenu, 5);
            }
            else
            {
                Panel.SetZIndex(this.elementForContextMenu, 7);
            }
            this.index++;
            return;
        IL_B0:
            int arg_128_0;
            if (this.elementForContextMenu != null && this.elementForContextMenu is TextBox)
            {
                int expr_D8 = arg_128_0 = Panel.GetZIndex(this.elementForContextMenu);
                if (2 != 0)
                {
                    num = expr_D8;
                    if (num == 1)
                    {
                        goto IL_ED;
                    }
                    Panel.SetZIndex(this.elementForContextMenu, 7);
                    goto IL_10C;
                }
            }
            else
            {
                bool flag = !this.IsSelectedMainImage;
                arg_128_0 = (flag ? 1 : 0);
            }
            if (arg_128_0 != 0)
            {
                return;
            }
            Panel.SetZIndex(this.frm, 1);
            if (5 != 0)
            {
                return;
            }
            goto IL_71;
        IL_ED:
            Panel.SetZIndex(this.elementForContextMenu, 5);
        IL_10C:
            this.index++;
        }

        private void btn6X8Print_Click(object sender, RoutedEventArgs e)
        {
            GC.AddMemoryPressure(10000L);
            bool flag = false;
            int arg_26C_0 = 0;
            int num = 0;
            bool flag2 = false;
            string input = "";
            PhotoBusiness photoBusiness = new PhotoBusiness();
            int locationIdByPhotoId = photoBusiness.GetLocationIdByPhotoId(this.PhotoId);
            LstMyItems lstMyItems = (from t in RobotImageLoader.robotImages
                                     where t.PhotoId == this.PhotoId
                                     select t).FirstOrDefault<LstMyItems>();
            try
            {
                if (this.IsGreenScreenPrintingEnabled(locationIdByPhotoId, this.semiOrderProfileId))
                {

                    LstMyItems lstMyItems3;
                    while (true)
                    {
                        int arg_88_0;
                        if (this.isChromaApplied)
                        {
                            arg_88_0 = 1;
                            goto IL_87;
                        }
                        bool arg_114_0;
                        int expr_76 = (arg_114_0 = this.IsGreenRemove) ? 1 : 0;
                        int arg_114_1;
                        int expr_7C = arg_114_1 = 0;
                        if (expr_7C == 0)
                        {
                            arg_88_0 = ((expr_76 == expr_7C) ? 1 : 0);
                            goto IL_84;
                        }
                        goto IL_114;
                    IL_119:
                        bool arg_11A_0;


                        if (!arg_11A_0)
                        {
                            input = this.SaveXaml(ref flag2);
                        }
                        int arg_138_0;
                        if (!flag2)
                        {
                            arg_138_0 = (this.isChromaApplied ? 1 : 0);
                        }
                        else
                        {
                            arg_138_0 = 1;
                        }
                    IL_137:
                        if (arg_138_0 == 0)
                        {
                            input = null;
                        }
                        if (this.IsEffectChange || this.IsGraphicsChange)
                        {
                            flag = true;
                        }
                        bool arg_179_0 = (this.IsModerate ? (arg_88_0 = 1) : (arg_88_0 = ((!this.IsEffectChange) ? 1 : 0))) != 0;
                        if (false)
                        {
                            goto IL_84;
                        }
                        bool flag3 = arg_179_0;
                        bool expr_17B = (arg_26C_0 = (flag3 ? 1 : 0)) != 0;
                        if (-1 == 0)
                        {
                            goto IL_26B;
                        }
                        if (!expr_17B)
                        {
                            this.SaveEffectsintoDB();
                        }
                        int arg_2E8_0;
                        int arg_2E8_1;
                        bool arg_1C1_0;
                        if (!this.IsModerate)
                        {
                            if (!this.IsGraphicsChange && !this.IsEffectChange)
                            {
                                int expr_1A5 = arg_2E8_0 = (this.IsChromaChanged ? 1 : 0);
                                int expr_1AB = arg_2E8_1 = 0;
                                if (expr_1AB != 0)
                                {
                                    goto IL_2E8;
                                }
                                arg_1C1_0 = ((arg_138_0 = ((expr_1A5 == expr_1AB) ? 1 : 0)) != 0);
                            }
                            else
                            {
                                arg_1C1_0 = ((arg_138_0 = 0) != 0);
                            }
                            goto IL_1BA;
                        }
                        arg_1C1_0 = ((arg_138_0 = 1) != 0);
                        goto IL_1BA;
                    IL_1D0:
                        bool arg_1F2_0;
                        if (this.isChromaApplied)
                        {
                            if (false)
                            {
                                continue;
                            }
                            arg_1F2_0 = (!this.IsChromaChanged && !flag);
                        }
                        else
                        {
                            arg_1F2_0 = true;
                        }
                        if (!arg_1F2_0)
                        {
                            flag3 = !this.IsChromaChanged;
                            goto IL_204;
                        }
                        goto IL_210;
                    IL_1BA:
                        if (3 == 0)
                        {
                            goto IL_134;
                        }
                        if (arg_1C1_0)
                        {
                            goto IL_1D0;
                        }
                    IL_1C7:
                        this.SaveChangesToDB(input);
                        goto IL_1D0;
                    IL_210:
                        if (false)
                        {
                            goto IL_1C7;
                        }
                        this.AddToPrintQueue(1);
                        this.lstStrip.Items.Refresh();
                        this.lstStrip.UpdateLayout();
                        num = this.lstStrip.SelectedIndex;
                        int count = this.lstStrip.Items.Count;
                        if (num < count - 1)
                        {
                            break;
                        }
                        LstMyItems lstMyItems2 = (LstMyItems)this.lstStrip.Items[num];
                        this.LoadNextImageSet(true);
                        arg_2E8_0 = ((LstMyItems)this.lstStrip.Items[num]).PhotoId;
                        arg_2E8_1 = lstMyItems2.PhotoId;
                        goto IL_2E8;
                    IL_204:
                        if (!flag3)
                        {
                            this.IsChromaChanged = false;
                        }
                        goto IL_210;
                    IL_2E8:
                        flag3 = (arg_2E8_0 != arg_2E8_1);
                        if (!flag3)
                        {
                            this.lstStrip.SelectedIndex = num;
                            this.lstStrip.ScrollIntoView((LstMyItems)this.lstStrip.Items[num]);
                        }
                        else
                        {
                            lstMyItems3 = (LstMyItems)this.lstStrip.Items[0];
                            this.EditImage(lstMyItems3.PhotoId, lstMyItems3.Name);
                        }
                        if (!false)
                        {
                            goto IL_35E;
                        }
                        goto IL_204;
                    IL_134:
                        goto IL_137;
                    IL_114:
                        arg_11A_0 = ((arg_114_0 ? 1 : 0) == arg_114_1);
                        goto IL_119;
                    IL_87:
                        if (arg_88_0 == 0)
                        {
                            if (this.MyInkCanvas.Children.Count > 1)
                            {
                                this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                            }
                            if (this.MyInkCanvas.Strokes.Count > 0)
                            {
                                this.MyInkCanvas.Strokes.Clear();
                            }
                        }
                        input = string.Empty;
                        flag2 = false;
                        if (!this.IsGraphicsChange)
                        {
                            arg_114_0 = this.isChromaApplied;
                            arg_114_1 = 0;
                            goto IL_114;
                        }
                        arg_11A_0 = false;
                        goto IL_119;
                    IL_84:
                        goto IL_87;
                    }
                    arg_26C_0 = num;
                IL_26B:
                    num = arg_26C_0 + 1;
                    lstMyItems3 = (LstMyItems)this.lstStrip.Items[num];
                    this.EditImage(lstMyItems3.PhotoId, lstMyItems3.Name);
                IL_35E:;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
                GC.RemoveMemoryPressure(10000L);
            }
        }

        private void btn8X10Print_Click(object sender, RoutedEventArgs e)
        {
            GC.AddMemoryPressure(10000L);
            bool flag = false;
            bool flag2 = false;
            string input = "";
            int num = 0;
            PhotoBusiness photoBusiness = new PhotoBusiness();
            int locationIdByPhotoId = photoBusiness.GetLocationIdByPhotoId(this.PhotoId);
            LstMyItems lstMyItems = (from t in RobotImageLoader.robotImages
                                     where t.PhotoId == this.PhotoId
                                     select t).FirstOrDefault<LstMyItems>();
            try
            {
                if (this.IsGreenScreenPrintingEnabled(locationIdByPhotoId, this.semiOrderProfileId))
                {
                    int arg_26C_0;

                    LstMyItems lstMyItems3;
                    while (true)
                    {
                        int arg_88_0;
                        if (this.isChromaApplied)
                        {
                            arg_88_0 = 1;
                            goto IL_87;
                        }
                        bool arg_114_0;
                        int expr_76 = (arg_114_0 = this.IsGreenRemove) ? 1 : 0;
                        int arg_114_1;
                        int expr_7C = arg_114_1 = 0;
                        if (expr_7C == 0)
                        {
                            arg_88_0 = ((expr_76 == expr_7C) ? 1 : 0);
                            goto IL_84;
                        }
                        goto IL_114;
                    IL_119:
                        bool arg_11A_0;

                        if (!arg_11A_0)
                        {
                            input = this.SaveXaml(ref flag2);
                        }
                        int arg_138_0;
                        if (!flag2)
                        {
                            arg_138_0 = (this.isChromaApplied ? 1 : 0);
                        }
                        else
                        {
                            arg_138_0 = 1;
                        }
                    IL_137:
                        if (arg_138_0 == 0)
                        {
                            input = null;
                        }
                        if (this.IsEffectChange || this.IsGraphicsChange)
                        {
                            flag = true;
                        }
                        bool arg_179_0 = (this.IsModerate ? (arg_88_0 = 1) : (arg_88_0 = ((!this.IsEffectChange) ? 1 : 0))) != 0;
                        if (false)
                        {
                            goto IL_84;
                        }
                        bool flag3 = arg_179_0;
                        bool expr_17B = (arg_26C_0 = (flag3 ? 1 : 0)) != 0;
                        if (-1 == 0)
                        {
                            goto IL_26B;
                        }
                        if (!expr_17B)
                        {
                            this.SaveEffectsintoDB();
                        }
                        int arg_2E8_0;
                        int arg_2E8_1;
                        bool arg_1C1_0;
                        if (!this.IsModerate)
                        {
                            if (!this.IsGraphicsChange && !this.IsEffectChange)
                            {
                                int expr_1A5 = arg_2E8_0 = (this.IsChromaChanged ? 1 : 0);
                                int expr_1AB = arg_2E8_1 = 0;
                                if (expr_1AB != 0)
                                {
                                    goto IL_2E8;
                                }
                                arg_1C1_0 = ((arg_138_0 = ((expr_1A5 == expr_1AB) ? 1 : 0)) != 0);
                            }
                            else
                            {
                                arg_1C1_0 = ((arg_138_0 = 0) != 0);
                            }
                            goto IL_1BA;
                        }
                        arg_1C1_0 = ((arg_138_0 = 1) != 0);
                        goto IL_1BA;
                    IL_1D0:
                        bool arg_1F2_0;
                        if (this.isChromaApplied)
                        {
                            if (false)
                            {
                                continue;
                            }
                            arg_1F2_0 = (!this.IsChromaChanged && !flag);
                        }
                        else
                        {
                            arg_1F2_0 = true;
                        }
                        if (!arg_1F2_0)
                        {
                            flag3 = !this.IsChromaChanged;
                            goto IL_204;
                        }
                        goto IL_210;
                    IL_1BA:
                        if (3 == 0)
                        {
                            goto IL_134;
                        }
                        if (arg_1C1_0)
                        {
                            goto IL_1D0;
                        }
                    IL_1C7:
                        this.SaveChangesToDB(input);
                        goto IL_1D0;
                    IL_210:
                        if (false)
                        {
                            goto IL_1C7;
                        }
                        this.AddToPrintQueue(2);
                        this.lstStrip.Items.Refresh();
                        this.lstStrip.UpdateLayout();
                        num = this.lstStrip.SelectedIndex;
                        int count = this.lstStrip.Items.Count;
                        if (num < count - 1)
                        {
                            break;
                        }
                        LstMyItems lstMyItems2 = (LstMyItems)this.lstStrip.Items[num];
                        this.LoadNextImageSet(true);
                        arg_2E8_0 = ((LstMyItems)this.lstStrip.Items[num]).PhotoId;
                        arg_2E8_1 = lstMyItems2.PhotoId;
                        goto IL_2E8;
                    IL_204:
                        if (!flag3)
                        {
                            this.IsChromaChanged = false;
                        }
                        goto IL_210;
                    IL_2E8:
                        flag3 = (arg_2E8_0 != arg_2E8_1);
                        if (!flag3)
                        {
                            this.lstStrip.SelectedIndex = num;
                            this.lstStrip.ScrollIntoView((LstMyItems)this.lstStrip.Items[num]);
                        }
                        else
                        {
                            lstMyItems3 = (LstMyItems)this.lstStrip.Items[0];
                            this.EditImage(lstMyItems3.PhotoId, lstMyItems3.Name);
                        }
                        if (!false)
                        {
                            goto IL_35E;
                        }
                        goto IL_204;
                    IL_134:
                        goto IL_137;
                    IL_114:
                        arg_11A_0 = ((arg_114_0 ? 1 : 0) == arg_114_1);
                        goto IL_119;
                    IL_87:
                        if (arg_88_0 == 0)
                        {
                            if (this.MyInkCanvas.Children.Count > 1)
                            {
                                this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                            }
                            if (this.MyInkCanvas.Strokes.Count > 0)
                            {
                                this.MyInkCanvas.Strokes.Clear();
                            }
                        }
                        input = string.Empty;
                        flag2 = false;
                        if (!this.IsGraphicsChange)
                        {
                            arg_114_0 = this.isChromaApplied;
                            arg_114_1 = 0;
                            goto IL_114;
                        }
                        arg_11A_0 = false;
                        goto IL_119;
                    IL_84:
                        goto IL_87;
                    }
                    arg_26C_0 = num;
                IL_26B:
                    num = arg_26C_0 + 1;
                    lstMyItems3 = (LstMyItems)this.lstStrip.Items[num];
                    this.EditImage(lstMyItems3.PhotoId, lstMyItems3.Name);
                IL_35E:;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
                GC.RemoveMemoryPressure(10000L);
            }
        }

        private void btnAddgraphics_Click(object sender, RoutedEventArgs e)
        {
            CollapsePopUp();
            this.btnTemplateActivate.Visibility = Visibility.Visible;
            // PopupButton.IsChecked = true;
            if (!false)
            {
                try
                {
                    if (this.SetRedeye)
                    {
                        this.ellipse.Visibility = Visibility.Collapsed;
                        this.mainImage.Cursor = Cursors.Arrow;
                        if (false)
                        {
                            goto IL_F1;
                        }
                        this.SetRedeye = false;
                    }
                IL_59:
                    this.greenEraser.Visibility = Visibility.Collapsed;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    // this.GrdFirst.Visibility = Visibility.Collapsed;
                    //this.GrdSubGraphics.Visibility = Visibility.Visible;
                    this.GrdSubGraphics1.Visibility = Visibility.Visible;
                    if (2 == 0)
                    {
                        goto IL_59;
                    }
                    DragCanvas.SetCanBeDragged(this.mainImage, true);
                    DragCanvas.SetCanBeDragged(this.GrdBrightness, true);
                    DragCanvas.SetCanBeDragged(this.Opacitymsk, true);
                    while (true)
                    {
                        DragCanvas.SetCanBeDragged(this.imageundoGrid, false);
                        if (!false)
                        {
                            this.imageundoGrid.IsHitTestVisible = false;
                            this.dragCanvas.AllowDragging = true;
                            if (!false)
                            {
                                break;
                            }
                        }
                    }
                    this.dragCanvas.IsEnabled = true;
                    this.LoadXml(this.ImageEffect);
                IL_F1:;
                }
                catch (Exception ex)
                {
                    do
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(ex);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                        MessageBox.Show(ex.Message);
                    }
                    while (!true);
                }
            }
        }

        private void btnantirotate_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                this.cropPopup();
                this.btnantirotateAct.Visibility = Visibility.Visible;
                RemoveEnlargeReduce();
                while (true)
                {
                    bool flag = !this.SetRedeye;
                    if (4 == 0 || (!false && !flag))
                    {
                        if (!false)
                        {
                            this.ellipse.Visibility = Visibility.Collapsed;
                            goto IL_26;
                        }
                        goto IL_32;
                    }
                IL_3C:
                    if (false)
                    {
                        goto IL_26;
                    }
                    this.Rotate(-1);
                    if (!false)
                    {
                        break;
                    }
                    continue;
                IL_32:
                    this.SetRedeye = false;
                    goto IL_3C;
                IL_26:
                    this.mainImage.Cursor = Cursors.Arrow;
                    goto IL_32;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void btnBackground_Click(object sender, RoutedEventArgs e)
        {
            this.templatePopup();
            this.btnBackgroundAct.Visibility = Visibility.Visible;
            this.CmbProductType.Visibility = Visibility.Collapsed;
            this.jrotate.Visibility = Visibility.Hidden;
            this.lstFrame.Visibility = Visibility.Collapsed;
            this.lstGraphics.Visibility = Visibility.Collapsed;
            this.lstStrip.Visibility = Visibility.Collapsed;
            this.lstBackground.Visibility = Visibility.Visible;
            this.GrdEffects.Visibility = Visibility.Visible;
            this.IsbtnBackgroundWithoutChroma = true;
        }

        private void btnBlue_Click(object sender, RoutedEventArgs e)
        {
            this._colorfiltereff.FilterColor = Colors.Blue;
            while (true)
            {
                if (!false)
                {
                    this.Grdcolorfilter.Effect = this._colorfiltereff;
                }
                if (!false)
                {
                    this.colour = "blue";
                    this.color = Colors.Blue;
                    if (!false)
                    {
                        break;
                    }
                }
            }
        }

        private void btnbringtofront_Click(object sender, RoutedEventArgs e)
        {

            while (true)
            {
                this.CmbProductType.Visibility = Visibility.Collapsed;
                while (!false)
                {
                    if (7 == 0)
                    {
                        return;
                    }
                    bool arg_23_0;
                    bool expr_1A = arg_23_0 = (this.elementForContextMenu == null);
                    if (!false)
                    {
                        bool flag = expr_1A;
                        arg_23_0 = flag;
                    }
                    if (arg_23_0)
                    {
                        return;
                    }
                    if (6 != 0)
                    {
                        goto Block_4;
                    }
                }
            }
        Block_4:
            if (3 != 0)
            {
                this.dragCanvas.BringToFront(this.elementForContextMenu);
            }
        }

        private void btnCirBig_Click(object sender, RoutedEventArgs e)
        {
            DragCanvas expr_06 = this.dragCanvas;
            bool expr_0B = false;
            if (4 != 0)
            {
                expr_06.AllowDragging = expr_0B;
            }
            if (!this.IsEraserActive)
            {
                UIElement expr_31 = this.greenEraser;
                Visibility expr_36 = Visibility.Collapsed;
                if (!false)
                {
                    expr_31.Visibility = expr_36;
                }
                if (3 == 0)
                {
                    goto IL_265;
                }
                if (8 != 0)
                {
                    this.redeyecirclegreen.Visibility = Visibility.Visible;
                    if (!false)
                    {
                        this.IsEraserActive = true;
                        this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
                        goto IL_73;
                    }
                    goto IL_73;
                }
            }
            else
            {
                this.greenEraser.Visibility = Visibility.Collapsed;
                this.redeyecirclegreen.Visibility = Visibility.Collapsed;
                this.IsEraserActive = false;
                this.IsEraserDrawEllipseActive = false;
                this.IsEraserDrawRectangleActive = false;
                this.IsGreenCorrection = false;
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = new MatrixTransform());
            }
        IL_E9:
            while (2 != 0)
            {
                this.rectheight = this.greenEraser.Height;
                this.rectewidth = this.greenEraser.Width;
                bool flag = this.greenEraser.Height > 100.0 && this.greenEraser.Width > 100.0;
                if (7 != 0)
                {
                    if (!flag)
                    {
                        goto IL_146;
                    }
                    goto IL_17F;
                }
            }
        IL_73:
            if (3 == 0)
            {
                goto IL_146;
            }
            this.IsGreenCorrection = false;
            goto IL_E9;
        IL_146:
            this.greenEraser.Width = this.rectewidth + 5.0;
            this.greenEraser.Height = this.rectheight + 5.0;
        IL_17F:
            this.rectheight = this.attribute.Height;
            this.rectewidth = this.attribute.Width;
            if (this.attribute.Height <= 100.0 || this.attribute.Width <= 100.0)
            {
                this.attribute.Width = this.rectewidth + 5.0;
                if (4 != 0)
                {
                    this.attribute.Height = this.rectheight + 5.0;
                }
            }
            this.squre.Visibility = Visibility.Hidden;
            this.mainImage.Cursor = Cursors.Arrow;
            this.greenEraser.Visibility = Visibility.Collapsed;
            this.redeyecirclegreen.Visibility = Visibility.Collapsed;
            this.IsEraserActive = false;
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
            this.IsEraserDrawRectangleActive = false;
        IL_265:
            this.IsEraserDrawEllipseActive = true;
            this.IsGreenCorrection = false;
        }

        private void btncireraseMedium_Click(object sender, RoutedEventArgs e)
        {
            this.dragCanvas.AllowDragging = false;
            if (!false)
            {
                bool isInitialized = base.IsInitialized;
                bool arg_29_0 = isInitialized;
                while (arg_29_0)
                {
                    bool expr_43 = arg_29_0 = (this._ZoomFactor < 1.0);
                    if (5 != 0)
                    {
                        if (!expr_43)
                        {
                            this.attribute.Width = 50.0 / this._ZoomFactor;
                            this.attribute.Height = 50.0 / this._ZoomFactor;
                            goto IL_8D;
                        }
                        this.attribute.Width = 50.0 * this._ZoomFactor;
                        this.attribute.Height = 50.0 * this._ZoomFactor;
                        goto IL_CA;
                    }
                }
                return;
            }
        IL_8D:
        IL_CA:
            this.attributeWidth = 50.0;
            if (5 != 0)
            {
                this.attributeHeight = 50.0;
                this.UpdateControlVisuals();
                if (!true)
                {
                    goto IL_14B;
                }
                this.ellipticalRadio.IsChecked = new bool?(true);
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
            }
            StylusShape eraserShape = new EllipseStylusShape(this.attribute.Width, this.attribute.Width);
            this.MyInkCanvas.EraserShape = eraserShape;
            this.IsEraserDrawRectangleActive = false;
            this.IsEraserDrawEllipseActive = false;
        IL_14B:
            this.IsGreenCorrection = false;
            this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
        }

        private void btncirsmall_Click(object sender, RoutedEventArgs e)
        {
            while (true)
            {
                this.dragCanvas.AllowDragging = false;
                if (!base.IsInitialized)
                {
                    goto IL_28;
                }
                bool arg_75_0;
                bool expr_38 = arg_75_0 = !this.IsGreenCorrection;
                double arg_73_0;
                if (5 != 0)
                {
                    if (!expr_38)
                    {
                        this.fillSize = 100;
                        this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                        goto IL_5F;
                    }
                    arg_73_0 = this._ZoomFactor;
                    goto IL_6A;
                }
            IL_75:
                if (!arg_75_0)
                {
                    if (3 == 0)
                    {
                        goto IL_5F;
                    }
                    this.attribute.Width = 150.0 / this._ZoomFactor;
                    this.attribute.Height = 150.0 / this._ZoomFactor;
                    if (false)
                    {
                        continue;
                    }
                }
                else
                {
                    this.attribute.Width = 150.0 * this._ZoomFactor;
                    this.attribute.Height = 150.0 * this._ZoomFactor;
                }
                this.attributeWidth = 150.0;
                goto IL_107;
            IL_6A:
                arg_75_0 = (arg_73_0 < 1.0);
                goto IL_75;
            IL_107:
                this.attributeHeight = 150.0;
                this.UpdateControlVisuals();
                this.ellipticalRadio.IsChecked = new bool?(true);
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
                double expr_142 = arg_73_0 = this.attribute.Width;
                if (7 == 0)
                {
                    goto IL_6A;
                }
                StylusShape eraserShape = new EllipseStylusShape(expr_142, this.attribute.Height);
                this.MyInkCanvas.EraserShape = eraserShape;
                if (4 != 0)
                {
                    this.IsEraserDrawRectangleActive = false;
                    this.IsEraserDrawEllipseActive = false;
                    this.IsGreenCorrection = false;
                    this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
                    if (!false)
                    {
                        this.fillSize = 100;
                    }
                }
            IL_1A1:
                if (!false)
                {
                    break;
                }
                goto IL_107;
            IL_5F:
            IL_28:
                goto IL_1A1;
            }
        }

        private void btncirsmall10_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 7;
                this.rdbCIR7.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_39_0;
                    bool arg_82_0 = arg_39_0 = this.IsGreenCorrection;
                    int arg_36_0 = 0;
                    int expr_7F;
                    while (true)
                    {
                        int arg_7F_0;
                        int expr_36 = arg_7F_0 = arg_36_0;
                        if (expr_36 == 0)
                        {
                            bool expr_39 = (arg_39_0 ? 1 : 0) == expr_36;
                            if (8 != 0)
                            {
                                flag = expr_39;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = false;
                            arg_82_0 = (arg_39_0 = this.undoEraser);
                            arg_7F_0 = 0;
                        }
                        expr_7F = (arg_36_0 = arg_7F_0);
                        if (expr_7F == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_82_0 ? 1 : 0) == expr_7F);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btncirsmall100_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 150;
                this.rdbCIR2.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3D_0;
                    bool arg_86_0 = arg_3D_0 = this.IsGreenCorrection;
                    int arg_3A_0 = 0;
                    int expr_83;
                    while (true)
                    {
                        int arg_83_0;
                        int expr_3A = arg_83_0 = arg_3A_0;
                        if (expr_3A == 0)
                        {
                            bool expr_3D = (arg_3D_0 ? 1 : 0) == expr_3A;
                            if (8 != 0)
                            {
                                flag = expr_3D;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = false;
                            arg_86_0 = (arg_3D_0 = this.undoEraser);
                            arg_83_0 = 0;
                        }
                        expr_83 = (arg_3A_0 = arg_83_0);
                        if (expr_83 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_86_0 ? 1 : 0) == expr_83);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btncirsmall15_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 15;
                this.rdbCIR6.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = false;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btncirsmall150_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 200;
                this.rdbCIR1.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3D_0;
                    bool arg_86_0 = arg_3D_0 = this.IsGreenCorrection;
                    int arg_3A_0 = 0;
                    int expr_83;
                    while (true)
                    {
                        int arg_83_0;
                        int expr_3A = arg_83_0 = arg_3A_0;
                        if (expr_3A == 0)
                        {
                            bool expr_3D = (arg_3D_0 ? 1 : 0) == expr_3A;
                            if (8 != 0)
                            {
                                flag = expr_3D;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = false;
                            arg_86_0 = (arg_3D_0 = this.undoEraser);
                            arg_83_0 = 0;
                        }
                        expr_83 = (arg_3A_0 = arg_83_0);
                        if (expr_83 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_86_0 ? 1 : 0) == expr_83);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btncirsmall25_Click(object sender, RoutedEventArgs e)
        {

            while (!false)
            {
                this.fillSize = 25;
                this.rdbCIR5.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = false;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btncirsmall5_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 5;
                this.rdbCIR8.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_39_0;
                    bool arg_82_0 = arg_39_0 = this.IsGreenCorrection;
                    int arg_36_0 = 0;
                    int expr_7F;
                    while (true)
                    {
                        int arg_7F_0;
                        int expr_36 = arg_7F_0 = arg_36_0;
                        if (expr_36 == 0)
                        {
                            bool expr_39 = (arg_39_0 ? 1 : 0) == expr_36;
                            if (8 != 0)
                            {
                                flag = expr_39;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = false;
                            arg_82_0 = (arg_39_0 = this.undoEraser);
                            arg_7F_0 = 0;
                        }
                        expr_7F = (arg_36_0 = arg_7F_0);
                        if (expr_7F == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_82_0 ? 1 : 0) == expr_7F);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btncirsmall50_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 50;
                this.rdbCIR4.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = false;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btncirsmall75_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 100;
                this.rdbCIR3.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = false;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            if (false)
            {
                goto IL_11;
            }
        IL_04:
            if (6 == 0)
            {
                goto IL_20;
            }
            this.CmbProductType.Visibility = Visibility.Collapsed;
        IL_11:
            if (!false)
            {
                this.GrdEffects.Visibility = Visibility.Collapsed;
            }
        IL_20:
            if (!false)
            {
                return;
            }
            goto IL_04;
        }

        private void btnClose1_Click(object sender, RoutedEventArgs e)
        {
            this.GrdPrint.Visibility = Visibility.Collapsed;
        }

        private void btnColorEffects_Click(object sender, RoutedEventArgs e)
        {
            CollapsePopUp();
            this.btnLuminosityActivate.Visibility = Visibility.Visible;
            // PopupButton.IsChecked = true;
            try
            {
                bool arg_1C_0;
                bool expr_0D = arg_1C_0 = !this.SetRedeye;
                if (!false)
                {
                    bool flag = expr_0D;
                    arg_1C_0 = flag;
                }
                if (!arg_1C_0)
                {
                    this.ellipse.Visibility = Visibility.Collapsed;
                    if (false)
                    {
                        goto IL_11D;
                    }
                    this.mainImage.Cursor = Cursors.Arrow;
                    this.SetRedeye = false;
                }
                this.GrdsubColoreffects.Visibility = Visibility.Visible;
                do
                {
                    this.GrdsubCrop.Visibility = Visibility.Hidden;
                    this.ColorEffectsIMG.Visibility = Visibility.Collapsed;
                    this.IMGFrame.Visibility = Visibility.Visible;
                }
                while (5 == 0);
                FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.BigThumnailFolderPath, this.DateFolder, this.tempfilename));
                try
                {
                    BitmapImage bitmapImage = new BitmapImage();
                    MemoryStream memoryStream = new MemoryStream();
                    fileStream.CopyTo(memoryStream);
                    memoryStream.Seek(0L, SeekOrigin.Begin);
                    while (true)
                    {
                        fileStream.Close();
                        if (!false)
                        {
                            bitmapImage.BeginInit();
                            bitmapImage.StreamSource = memoryStream;
                            bitmapImage.EndInit();
                            bitmapImage.Freeze();
                        }
                        while (5 != 0)
                        {
                            this.imgoriginal.Source = bitmapImage;
                            if (!false)
                            {
                                goto Block_11;
                            }
                        }
                    }
                Block_11:;
                }
                finally
                {
                    if (fileStream != null)
                    {
                        ((IDisposable)fileStream).Dispose();
                        if (!false)
                        {
                        }
                    }
                }
            IL_11D:
                this.DisableSideButton();
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
        }

        // jayendra

        private void ChromaKeyMasking_Click(object sender, RoutedEventArgs e)
        {
            // this.GrdsubGreenScreen.Visibility = Visibility.Collapsed;
            // this.GrdChromaKeyNewScreen.Visibility = Visibility.Visible;
            this.OkCancelMask.Visibility = Visibility.Visible;
        }

        private void btnSPSEdition_Click(object sender, RoutedEventArgs e)
        {
            CollapsePopUp();
            this.GrdSPSEdition.Visibility = Visibility.Visible;
        }

        //  //  //  //  // 
        private void btnColorEffectsfilters_Click(object sender, RoutedEventArgs e)
        {
            // PopupButton.IsChecked = false;
            try
            {
                CollapsePopUp();
                this.btnEffectsActivate.Visibility = Visibility.Visible;
                if (2 != 0)
                {
                    do
                    {
                        // this.GrdFirst.Visibility = Visibility.Collapsed;
                        this.GrdsubEffects.Visibility = Visibility.Visible;
                    }
                    while (4 == 0);
                }
                do
                {
                    UIElement expr_15 = this.GrdsubColoreffects;
                    Visibility expr_1A = Visibility.Hidden;
                    if (!false)
                    {
                        expr_15.Visibility = expr_1A;
                    }
                }
                while (false);
            }
            catch (Exception)
            {
                while (4 == 0)
                {
                }
            }
            if (!false)
            {
                this.DisableSideButton();
            }
        }

        private void btnColorFilters_Click(object sender, RoutedEventArgs e)
        {
            while (true)
            {
                while (4 != 0)
                {
                    this.GrdsubColorFilters.Visibility = Visibility.Visible;
                    this.GrdsubColoreffects.Visibility = Visibility.Hidden;
                    do
                    {
                        if (5 != 0)
                        {
                            this.DisableSideButton();
                        }
                    }
                    while (3 == 0);
                    if (!false)
                    {
                        return;
                    }
                }
            }
        }

        private void btnCrop_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                try
                {
                    CollapsePopUp();
                    this.btnCropActivate.Visibility = Visibility.Visible;
                    this.btnantirotate.IsEnabled = true;
                    if (8 == 0)
                    {
                        goto IL_9D;
                    }
                    this.dragCanvas.IsEnabled = true;
                    if (!this.SetRedeye)
                    {
                        goto IL_67;
                    }
                    this.ellipse.Visibility = Visibility.Collapsed;
                    this.mainImage.Cursor = Cursors.Arrow;
                    this.SetRedeye = false;
                IL_60:
                    if (7 == 0)
                    {
                        goto IL_E7;
                    }
                IL_67:
                    // this.GrdFirst.Visibility = Visibility.Collapsed;
                    this.GrdsubCrop.Visibility = Visibility.Visible;
                    this.lstStrip.Visibility = Visibility.Collapsed;
                    this.GrdEffects.Visibility = Visibility.Collapsed;
                    if (6 != 0)
                    {
                        this.GrdsubColoreffects.Visibility = Visibility.Hidden;
                    }
                IL_9D:
                    this.GrdFlip.LayoutTransform = new TransformGroup();
                    this.GrdRotate.LayoutTransform = new TransformGroup();
                    this.grdZoomCanvas.Visibility = Visibility.Collapsed;
                    this.GrdRotateCropParent.Visibility = Visibility.Visible;
                    if (false)
                    {
                        goto IL_60;
                    }
                    this.Zomout(true);
                IL_E7:;
                }
                catch (Exception serviceException)
                {
                    string message;
                    do
                    {
                        message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    }
                    while (false);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                if (8 != 0)
                {
                }
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
        }

        private void btndecreasecircle_Click(object sender, RoutedEventArgs e)
        {
            this.redEyesPopup();
            double redEyeSize;
            this.btndecreasecircleAct.Visibility = Visibility.Visible;

            if (!this.redeffectfirstApplied)
            {
                if (this.redEyeEffect.Radius <= 0.01)
                {
                    redEyeSize = (this.redEyeEffect.Radius = 0.01);
                    ContantValueForMainWindow.RedEyeSize = redEyeSize;
                }
                else
                {
                    redEyeSize = (this.redEyeEffect.Radius -= 0.005);
                    ContantValueForMainWindow.RedEyeSize = redEyeSize;
                }
                this.getredeyezoom(this.ptnred);
            }
            this.redEyeEffectSecond.Radius = ContantValueForMainWindow.RedEyeSize;
            this.redEyeEffectMultiple.Radius = ContantValueForMainWindow.RedEyeSize;
            this.redEyeEffectMultiple1.Radius = ContantValueForMainWindow.RedEyeSize;

        }

        private void btnDefaultGreenScreen_Click(object sender, RoutedEventArgs e)
        {
            if (4 != 0)
            {
                this.isChromaApplied = true;
                this.IsGreenRemove = true;
                new PhotoBusiness();
                this.ApplyGreenEffectGrid();
                VisualStateManager.GoToState(this.btnGreenScreen, "Checked", true);
                this.rdbForgroundGreen.IsChecked = new bool?(true);
            }
            while (false)
            {
            }
            this.ChkBackground.IsChecked = new bool?(true);
            this.ChkForground.IsChecked = new bool?(true);
        }

        private void btnDefogger_Click(object sender, RoutedEventArgs e)
        {
            this.effectPopup();
            this.btnDefoggerAct.Visibility = Visibility.Visible;
            this.Defogger();
            this.LstGridEffects.Add("defog");
        }

        private void btndelete_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                this.templatePopup();
                this.btndeleteAct.Visibility = Visibility.Visible;
                if (false)
                {
                    goto IL_A9;
                }
                this.CmbProductType.Visibility = Visibility.Collapsed;
                //// //jay  ///////

                IEnumerator enumerator = this.dragCanvas.Children.GetEnumerator();
                while (enumerator.MoveNext())
                {
                    UIElement uIElement = (UIElement)enumerator.Current;
                    if (!(uIElement is Grid))
                    {
                        if (!(uIElement is Ellipse))
                        {
                            //if (uIElement is System.Windows.Controls.TextBox)
                            //{
                            //    this.dragCanvas.Children.Remove(uIElement);

                            //}

                            if (!(uIElement is System.Windows.Shapes.Rectangle))
                            {
                                if (!(uIElement is System.IO.Path))
                                {
                                    this.dragCanvas.Children.Remove(uIElement);
                                     goto IL_D3;
                                }
                            }
                        }
                    }
                }

            IL_D3:
                //////////
                if (this.elementForContextMenu == null)
                {
                    goto IL_172;
                }
                TextBox textBox;
                bool flag;
                int arg_91_0;
                if (this.elementForContextMenu is TextBox)
                {
                    textBox = (TextBox)this.elementForContextMenu;
                    flag = (textBox == null);
                }
                else
                {
                    if (!(this.elementForContextMenu is Button))
                    {
                        goto IL_171;
                    }
                    Button button = (Button)this.elementForContextMenu;
                    if (button == null)
                    {
                        goto IL_170;
                    }
                    this.dragCanvas.Children.Remove(button);
                    int expr_11F = arg_91_0 = this.graphicsCount;
                    if (!false)
                    {
                        if (expr_11F >= 1)
                        {
                            this.graphicsCount--;
                        }
                        flag = (this.graphicsCount != 0);
                        goto IL_151;
                    }
                    goto IL_91;
                }
            IL_71:
                if (flag)
                {
                    goto IL_D7;
                }
                this.dragCanvas.Children.Remove(textBox);
                arg_91_0 = ((this.graphicsTextBoxCount < 1) ? 1 : 0);
            IL_91:
                flag = (arg_91_0 != 0);
                if (!flag)
                {
                    if (!true)
                    {
                        goto IL_BF;
                    }
                    this.graphicsTextBoxCount--;
                }
            IL_A9:
            IL_AA:
                flag = (this.graphicsTextBoxCount != 0);
                bool arg_BD_0 = flag;
                if (false)
                {
                    goto IL_D1;
                }
                if (arg_BD_0)
                {
                    goto IL_D6;
                }
            IL_BF:
                VisualStateManager.GoToState(this.btnGraphicsText, "Unchecked", true);
            IL_D1:
                if (false)
                {
                    goto IL_151;
                }
            IL_D6:
            IL_D7:
                goto IL_171;
            IL_151:
                if (!flag)
                {
                    VisualStateManager.GoToState(this.btngraphics, "Unchecked", true);
                }
                if (false)
                {
                    goto IL_71;
                }
            IL_170:
            IL_171:
            IL_172:
                if (false)
                {
                    goto IL_AA;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void btnDigiMagic_Click(object sender, RoutedEventArgs e)
        {
            this.effectPopup();
            this.btnDigiMagicAct.Visibility = Visibility.Visible;
            this.DigiMagic();
        }

        private void SpectraMagical_Click(object sender, RoutedEventArgs e)
        {

        }
        private void btndown_Click(object sender, RoutedEventArgs e)
        {
            this.down();
        }

        private void btnEdgeDetect_Click(object sender, RoutedEventArgs e)
        {
            this.effectPopup();
            this.btnEdgeDetectAct.Visibility = Visibility.Visible;
            this.EdgeDetecteffect();
            this.LstGridEffects.Add("edgedetect");
        }

        private void btnEmboss_Click(object sender, RoutedEventArgs e)
        {
            this.Embosseffect();
            this.LstGridEffects.Add("emboss");
        }
        private void btnBloomEffect_Click(object sender, RoutedEventArgs e)
        {
            this.Bloomeffect();
            this.LstGridEffects.Add("bloom");
        }

        private void btnCloneGreenScreenTest_Click(object sender, RoutedEventArgs e)
        {
            // IsCloneMainImage = true;           
            try
            {
                if (2 != 0)
                {
                    this.HideGraphics();
                }
                this.btnPrintToGroup.Visibility = Visibility.Hidden;
                this.btn6X8Print.Visibility = Visibility.Hidden;
                UIElement expr_36 = this.btn8X10Print;
                //  Visibility expr_3B = Visibility.Hidden;

                Button button = (Button)sender;
                if (false)
                {
                    goto IL_3CE;
                }

            IL_83:
                //this.btnantirotate.IsEnabled = true;
                if (8 == 0)
                {
                    //  goto IL_9D;
                }
                this.dragCanvas.IsEnabled = true;

                // Canvas.SetLeft(this.Opacitymsk, 0.0);
                // Canvas.SetLeft(this.canbackgroundParent, 0.0);
                //  Canvas.SetTop(this.Opacitymsk, 0.0);
                //   Canvas.SetTop(this.canbackgroundParent, 0.0);

                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = null);
                bool arg_142_0 = this.frm.Children.Count <= 0;
            IL_142:

                this.mainImageundo.Visibility = Visibility.Visible;
                // this.mainImageClone.Visibility = Visibility.Visible;
                this.btnKeepClone.Visibility = Visibility.Visible;
                this.GrdRotateCropParent.Visibility = Visibility.Visible;
                this.grdZoomCanvas.Visibility = Visibility.Visible;
                // this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;

                //MainWindow.inkCanvasEllipse.Width = 50;
                //MainWindow.inkCanvasEllipse.Height = 50;

                //DragCanvas.SetCanBeDragged(this.mainImage, true);
                //DragCanvas.SetCanBeDragged(this.Opacitymsk, true);
                //DragCanvas.SetCanBeDragged(this.imageundoGrid, false);

                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this._maxZoomFactor = 4.0;
                this.MyInkCanvas.SnapsToDevicePixels = true;
                // IL_289:
                this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                if (this.zoomTransform == null)
                {
                    goto IL_3AE;
                }
                bool arg_2CF_0;
                if (this.FlipMode == 0)
                {
                    arg_2CF_0 = (arg_142_0 = (this.FlipModeY == 0));
                    if (!false)
                    {
                        goto IL_2CE;
                    }
                    goto IL_142;
                }
            IL_2CD:
                arg_2CF_0 = false;
            IL_2CE:


            IL_3AE:
                this.GrdEffects.Visibility = Visibility.Collapsed;
            //  this.lstBackground.Visibility = Visibility.Visible;
            IL_3CE:
                this.lstFrame.Visibility = Visibility.Collapsed;
                this.lstGraphics.Visibility = Visibility.Collapsed;
                //  IL_3E7:
                this.lstStrip.Visibility = Visibility.Collapsed;
                this.canbackground.OpacityMask = null;

                // this.EraserBrush(50, 50);
                // this.dragCanvas.AllowDragging = true;
                if (false)
                {
                    goto IL_2CD;
                }
                VisualBrush opacityMask = new VisualBrush(this.opacitymaskmycan);
                this.mainImageundo.OpacityMask = opacityMask;
                //  this.mainImageClone.OpacityMask = opacityMask;
                this.c_photoFrame.Visibility = Visibility.Collapsed;
                // this.mainImageundo.OpacityMask = new LinearGradientBrush(Colors.Transparent, Colors.Black, 10);

                // this.mainImageundo.OpacityMask = new RadialGradientBrush(Colors.Transparent, Colors.Transparent);
                this.Zomout(true);
                ///this.fillSize = 30;
                this.islstBackgroundVisible = true;
                this.btnPrintToGroup.IsEnabled = false;
                this.btnPlaceOrder.IsEnabled = false;

                this.ApplyGreenEffectGrid();
                // this.ApplyCloneEffectGrid();
                this.toleranceDefault = this.tolerance;
                // this.EraserBrush(fillSize, fillSize);
                bool arg_4F1_0;

                arg_4F1_0 = false;

                if (!arg_4F1_0)
                {
                    this.Clone_Click(sender, e);
                }
                else
                {
                    this.Zomout(true);
                }
                cloneLine = null;
                EndCloneCircle = null;

            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
        }

        //private void btnCloneEffect_Click(object sender, RoutedEventArgs e)
        //{
        //    this.btnantirotate.IsEnabled = true;
        //    try
        //    {
        //        if (2 != 0)
        //        {
        //            this.HideGraphics();
        //        }
        //        this.btnPrintToGroup.Visibility = Visibility.Hidden;
        //        this.btn6X8Print.Visibility = Visibility.Hidden;
        //        UIElement expr_36 = this.btn8X10Print;
        //        //  Visibility expr_3B = Visibility.Hidden;

        //        Button button = (Button)sender;
        //        if (false)
        //        {
        //            goto IL_3CE;
        //        }

        //        IL_83:
        //        this.btnantirotate.IsEnabled = true;
        //        if (8 == 0)
        //        {
        //            //  goto IL_9D;
        //        }
        //        this.dragCanvas.IsEnabled = true;

        //        Canvas.SetLeft(this.Opacitymsk, 0.0);
        //        Canvas.SetLeft(this.canbackgroundParent, 0.0);
        //        Canvas.SetTop(this.Opacitymsk, 0.0);
        //        Canvas.SetTop(this.canbackgroundParent, 0.0);
        //        this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = null);
        //        bool arg_142_0 = this.frm.Children.Count <= 0;
        //        IL_142:

        //        this.mainImageundo.Visibility = Visibility.Visible;
        //        //  this.mainImageundo.Opacity = 0.0;
        //        this.btnKeepTop.Visibility = Visibility.Visible;
        //        this.GrdRotateCropParent.Visibility = Visibility.Visible;
        //        this.grdZoomCanvas.Visibility = Visibility.Visible;

        //        DragCanvas.SetCanBeDragged(this.mainImage, true);
        //        DragCanvas.SetCanBeDragged(this.Opacitymsk, true);
        //        DragCanvas.SetCanBeDragged(this.imageundoGrid, false);

        //        this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
        //        this._maxZoomFactor = 4.0;
        //        this.MyInkCanvas.SnapsToDevicePixels = true;
        //        // IL_289:
        //        this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
        //        if (this.zoomTransform == null)
        //        {
        //            goto IL_3AE;
        //        }
        //        bool arg_2CF_0;
        //        if (this.FlipMode == 0)
        //        {
        //            arg_2CF_0 = (arg_142_0 = (this.FlipModeY == 0));
        //            if (!false)
        //            {
        //                goto IL_2CE;
        //            }
        //            goto IL_142;
        //        }
        //        IL_2CD:
        //        arg_2CF_0 = false;
        //        IL_2CE:


        //        IL_3AE:
        //        this.GrdEffects.Visibility = Visibility.Visible;

        //        //  this.lstBackground.Visibility = Visibility.Visible;
        //        IL_3CE:
        //        this.lstFrame.Visibility = Visibility.Collapsed;
        //        this.lstGraphics.Visibility = Visibility.Collapsed;
        //        //  IL_3E7:
        //        this.lstStrip.Visibility = Visibility.Collapsed;
        //        this.canbackground.OpacityMask = null;

        //        // this.EraserBrush(50, 50);
        //        //  this.dragCanvas.AllowDragging = true;
        //        if (false)
        //        {
        //            goto IL_2CD;
        //        }
        //        VisualBrush opacityMask = new VisualBrush(this.opacitymaskmycan);
        //        this.mainImage.OpacityMask = opacityMask;
        //        this.Zomout(true);
        //        this.islstBackgroundVisible = true;
        //        this.fillSize = 30;
        //        this.btnPrintToGroup.IsEnabled = false;
        //        this.btnPlaceOrder.IsEnabled = false;
        //        this.ApplyGreenEffectGrid();
        //        this.toleranceDefault = this.tolerance;
        //        bool arg_4F1_0;

        //        arg_4F1_0 = false;

        //        if (!arg_4F1_0)
        //        {
        //            this.Clone_Click(sender, e);
        //        }
        //        else
        //        {
        //            this.Zomout(true);
        //        }
        //    }
        //    catch (Exception serviceException)
        //    {
        //        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
        //        ErrorHandler.ErrorHandler.LogFileWrite(message);
        //    }
        //    finally
        //    {
        //        MemoryManagement.FlushMemory();
        //    }
        //    // this.LstGridEffects.Add("clone");
        //}


        private void btnCloneEffect_Click(object sender, RoutedEventArgs e)
        {
            this.btnantirotate.IsEnabled = true;
            IsCloneMainImage = true;
            //mainImage.Focus();
            try
            {
                if (2 != 0)
                {
                    this.HideGraphics();
                }
                this.btnPrintToGroup.Visibility = Visibility.Hidden;
                this.btn6X8Print.Visibility = Visibility.Hidden;
                UIElement expr_36 = this.btn8X10Print;
                //  Visibility expr_3B = Visibility.Hidden;

                Button button = (Button)sender;
                if (false)
                {
                    goto IL_3CE;
                }

            IL_83:
                this.btnantirotate.IsEnabled = true;
                if (8 == 0)
                {
                    //  goto IL_9D;
                }
                //this.dragCanvas.IsEnabled = true;

                Canvas.SetLeft(this.Opacitymsk, 0.0);
                Canvas.SetLeft(this.canbackgroundParent, 0.0);
                Canvas.SetTop(this.Opacitymsk, 0.0);
                Canvas.SetTop(this.canbackgroundParent, 0.0);

                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = null);
                bool arg_142_0 = this.frm.Children.Count <= 0;
            IL_142:

                this.mainImageundo.Visibility = Visibility.Visible;
                this.btnKeepTop.Visibility = Visibility.Visible;
                this.GrdRotateCropParent.Visibility = Visibility.Visible;
                this.grdZoomCanvas.Visibility = Visibility.Visible;

                DragCanvas.SetCanBeDragged(this.mainImage, true);
                DragCanvas.SetCanBeDragged(this.Opacitymsk, true);
                DragCanvas.SetCanBeDragged(this.imageundoGrid, false);

                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this._maxZoomFactor = 4.0;
                this.MyInkCanvas.SnapsToDevicePixels = true;
                // IL_289:
                this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                if (this.zoomTransform == null)
                {
                    goto IL_3AE;
                }
                bool arg_2CF_0;
                if (this.FlipMode == 0)
                {
                    arg_2CF_0 = (arg_142_0 = (this.FlipModeY == 0));
                    if (!false)
                    {
                        goto IL_2CE;
                    }
                    goto IL_142;
                }
            IL_2CD:
                arg_2CF_0 = false;
            IL_2CE:


            IL_3AE:
                this.GrdEffects.Visibility = Visibility.Visible;

            //  this.lstBackground.Visibility = Visibility.Visible;
            IL_3CE:
                this.lstFrame.Visibility = Visibility.Collapsed;
                this.lstGraphics.Visibility = Visibility.Collapsed;
                //  IL_3E7:
                this.lstStrip.Visibility = Visibility.Collapsed;
                this.canbackground.OpacityMask = null;

                //  this.EraserBrush(50, 50);
                //   this.dragCanvas.AllowDragging = true;
                if (false)
                {
                    goto IL_2CD;
                }
                VisualBrush opacityMask = new VisualBrush(this.opacitymaskmycan);
                this.mainImageundo.OpacityMask = opacityMask;

                // this.mainImageundo.OpacityMask = new LinearGradientBrush(Colors.Transparent, Colors.Black, 10);

                // this.mainImageundo.OpacityMask = new RadialGradientBrush(Colors.Transparent, Colors.Transparent);
                this.Zomout(true);
                this.islstBackgroundVisible = true;
                this.btnPrintToGroup.IsEnabled = false;
                this.btnPlaceOrder.IsEnabled = false;
                this.ApplyGreenEffectGrid();
                //   this.ApplyCloneEffectGrid();
                this.toleranceDefault = this.tolerance;
                bool arg_4F1_0;

                arg_4F1_0 = false;

                if (!arg_4F1_0)
                {
                    this.Clone_Click(sender, e);
                }
                else
                {
                    this.Zomout(true);
                }
                //MyInkCanvas.Focus();
                cloneLine = null;
                StartCloneCircle = null;
                EndCloneCircle = null;
                //mainImage.Focus();

                //DragCanvas.SetCanBeDragged(this.mainImage, true);
                //DragCanvas.SetCanBeDragged(this.Opacitymsk, true);
                //DragCanvas.SetCanBeDragged(this.imageundoGrid, false);

                this.dragCanvas.AllowDragging = false;
                this.dragCanvas.IsEnabled = true;
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this.MyInkCanvas.Cursor = Cursors.Arrow;
                //this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }

        }


        private void btnMirror_Click(object sender, RoutedEventArgs e)
        {
            this.effectPopup();
            this.btnMirrorAct.Visibility = Visibility.Visible;
            this.Mirror(-1);
        }
        private void btnenlargeminus_Click(object sender, RoutedEventArgs e)
        {
            this.cropPopup();
            this.btnenlargeminusAct.Visibility = Visibility.Visible;

            bool arg_14_0;
            arg_14_0 = (this.grdZoomCanvas.Visibility == Visibility.Collapsed);
            if (arg_14_0)
            {
                this.grdZoomCanvas.Visibility = Visibility.Visible;
                this.GrdRotateCropParent.Visibility = Visibility.Collapsed;
            }

            this.chromaKeyPopup();
            // this.CollapsePopUp();
            this.templatePopup();
            // this.btnChromaZoomOut.Visibility = Visibility.Visible;
            //  this.btnZoomOutAct.Visibility = Visibility.Visible;
            this.IsImageDirtyState = true;
            //  this.btnZoomOutActivate.Visibility = Visibility.Visible;
            UIElement expr_12 = this.CmbProductType;
            Visibility expr_17 = Visibility.Collapsed;
            if (6 != 0)
            {
                expr_12.Visibility = expr_17;
            }
            RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
            try
            {
                Button button;
                TransformGroup transformGroup;
                RotateTransform rotateTransform;
                ScaleTransform scaleTransform;
                if (this.elementForContextMenu == null)
                {
                    if (this._EnlargeReduceFactor < 1.02)
                    {
                        this._EnlargeReduceFactor = 1;
                        return;
                    }
                    this._EnlargeReduceFactor -= 0.04;
                    if (this.zoomTransform == null || this._EnlargeReduceFactor < 0.5)
                    {
                        goto IL_420;
                    }
                    if (this.FlipMode == 0 && this.FlipModeY == 0)
                    {
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                        this.zoomTransform.ScaleX = this._EnlargeReduceFactor;
                        this.zoomTransform.ScaleY = this._EnlargeReduceFactor;
                        this.transformGroup = new TransformGroup();
                        this.transformGroup.Children.Add(this.zoomTransform);
                        this.transformGroup.Children.Add(this.translateTransform);
                        this.transformGroup.Children.Add(this.rotateTransform);
                        if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                        {
                            this.GrdGreenScreenDefault3.RenderTransform = null;
                            this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                            this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._EnlargeReduceFactor, 0.0, 0.0, this._EnlargeReduceFactor, 0.0, 0.0);
                        }
                        else
                        {
                            this.MyInkCanvas.RenderTransform = null;
                            this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                        }
                        this.IsGraphicsChange = true;
                        goto IL_3F4;
                    }
                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    this.zoomTransform.ScaleX = this._EnlargeReduceFactor;
                    if (false)
                    {
                        goto IL_5F7;
                    }
                    this.zoomTransform.ScaleY = this._EnlargeReduceFactor;
                    this.transformGroup = new TransformGroup();
                    this.transformGroup.Children.Add(this.zoomTransform);
                    this.transformGroup.Children.Add(this.translateTransform);
                    this.transformGroup.Children.Add(this.rotateTransform);
                    if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                    {
                        this.GrdGreenScreenDefault3.RenderTransform = null;
                        if (-1 != 0)
                        {
                            this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                            this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._EnlargeReduceFactor, 0.0, 0.0, this._EnlargeReduceFactor, 0.0, 0.0);
                            goto IL_265;
                        }
                        goto IL_5A7;
                    }
                }
                else
                {
                    if (!(this.elementForContextMenu is Button))
                    {
                        goto IL_69D;
                    }
                    button = (Button)this.elementForContextMenu;
                    if (button.Tag != null)
                    {
                        this._GraphicsZoomFactor = Convert.ToDouble(button.Tag.ToString());
                    }
                    if (this._GraphicsZoomFactor < 0.625)
                    {
                        return;
                    }
                    //this._GraphicsZoomFactor -= 0.025;
                    transformGroup = new TransformGroup();
                    TransformGroup transformGroup2 = this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup;
                    rotateTransform = new RotateTransform();
                    scaleTransform = new ScaleTransform();
                    if (transformGroup2 == null)
                    {
                        goto IL_5E3;
                    }
                    if (transformGroup2.Children.Count > 0)
                    {
                        if (transformGroup2.Children[0] is ScaleTransform)
                        {
                            scaleTransform = (ScaleTransform)transformGroup2.Children[0];
                        }
                        else if (transformGroup2.Children[0] is RotateTransform)
                        {
                            rotateTransform = (RotateTransform)transformGroup2.Children[0];
                        }
                    }
                    if (transformGroup2.Children.Count <= 1)
                    {
                        goto IL_5DC;
                    }
                    if (transformGroup2.Children[1] is ScaleTransform)
                    {
                        scaleTransform = (ScaleTransform)transformGroup2.Children[1];
                        goto IL_5A7;
                    }
                    if (transformGroup2.Children[1] is RotateTransform)
                    {
                        rotateTransform = (RotateTransform)transformGroup2.Children[1];
                        goto IL_5DB;
                    }
                    goto IL_5DB;
                }
            IL_233:
                this.MyInkCanvas.RenderTransform = null;
                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
            IL_265:
                this.IsGraphicsChange = true;
            IL_3F4:
                this.lblzoomplus.Content = this._EnlargeReduceFactor * 100.0 + " % ";
            IL_420:
                goto IL_69D;
            IL_5A7:
            IL_5DB:
            IL_5DC:
                if (false)
                {
                    goto IL_233;
                }
            IL_5E3:
                if (scaleTransform == null)
                {
                    return;
                }
            IL_5F7:
                scaleTransform.ScaleX -= 0.025;
                scaleTransform.ScaleY -= 0.025;
                scaleTransform.CenterX = 0.0;
                scaleTransform.CenterY = 0.0;
                transformGroup.Children.Add(scaleTransform);
                if (rotateTransform != null)
                {
                    transformGroup.Children.Add(rotateTransform);
                }
                button.Tag = this._GraphicsZoomFactor;
                button.RenderTransform = transformGroup;
                this.elementForContextMenu = button;
                this.IsGraphicsChange = true;
            IL_69D:
                if (this._EnlargeReduceFactor >= 1.0)
                {
                    this.attribute.Width = this.attributeWidth / this._EnlargeReduceFactor;
                    this.attribute.Height = this.attributeHeight / this._EnlargeReduceFactor;
                }
                else
                {
                    this.attribute.Width = this.attributeWidth * this._EnlargeReduceFactor;
                    this.attribute.Height = this.attributeHeight * this._EnlargeReduceFactor;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
            this.IsGreenCorrection = false;
        }

        private void btnenlargeplus_Click(object sender, RoutedEventArgs e)
        {
            this.cropPopup();
            this.btnenlargeplusAct.Visibility = Visibility.Visible;
            //  this.ZoomOutButton_Click(sender, new RoutedEventArgs());
            // this.ZoomInButton_Click(sender, new RoutedEventArgs());
            bool arg_14_0;
            //bool arg_4B_0 = arg_14_0 = (this.lstBackground.Visibility == Visibility.Collapsed);
            arg_14_0 = (this.grdZoomCanvas.Visibility == Visibility.Collapsed);
            if (arg_14_0)
            {
                this.grdZoomCanvas.Visibility = Visibility.Visible;
                this.GrdRotateCropParent.Visibility = Visibility.Collapsed;
            }


            this.IsImageDirtyState = true;
            //CollapsePopUp();
            this.chromaKeyPopup();
            this.templatePopup();

            DependencyObject expr_12 = this.mainImage;
            EdgeMode expr_17 = EdgeMode.Aliased;
            if (!false)
            {
                RenderOptions.SetEdgeMode(expr_12, expr_17);
            }
            try
            {
                try
                {
                    this.CmbProductType.Visibility = Visibility.Collapsed;
                    bool flag = this.elementForContextMenu != null;
                    bool arg_50_0;
                    bool arg_AF_0 = arg_50_0 = flag;
                    while (6 != 0)
                    {
                        Button button;
                        TransformGroup transformGroup;
                        TransformGroup transformGroup2;
                        RotateTransform rotateTransform;
                        ScaleTransform scaleTransform;
                        if (!arg_50_0)
                        {
                            if (7 != 0)
                            {
                                if (this._EnlargeReduceFactor >= this._maxZoomFactor)
                                {
                                    this._EnlargeReduceFactor = 4.0;
                                    this.IsGraphicsChange = true;
                                    return;
                                }
                                // this._ZoomFactor += 0.025;
                                this._EnlargeReduceFactor += 0.04;
                                flag = (this.zoomTransform == null);
                                arg_AF_0 = flag;
                                break;
                            }
                        }
                        else
                        {
                            flag = !(this.elementForContextMenu is Button);
                            if (flag)
                            {
                                goto IL_700;
                            }
                            button = (Button)this.elementForContextMenu;
                            bool expr_497 = arg_50_0 = (arg_AF_0 = (button.Tag == null));
                            if (8 == 0)
                            {
                                continue;
                            }
                            if (!expr_497)
                            {
                                this._GraphicsZoomFactor = Convert.ToDouble(button.Tag.ToString());
                                this._GraphicsZoomFactor += 0.025;
                            }
                            else
                            {
                                this._GraphicsZoomFactor = 1.0;
                            }
                        IL_4E6:
                            transformGroup = new TransformGroup();
                            transformGroup2 = (this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup);
                            rotateTransform = new RotateTransform();
                            scaleTransform = new ScaleTransform();
                            if (transformGroup2 == null)
                            {
                                goto IL_61A;
                            }
                            if (transformGroup2.Children.Count > 0)
                            {
                                if (transformGroup2.Children[0] is ScaleTransform)
                                {
                                    scaleTransform = (ScaleTransform)transformGroup2.Children[0];
                                }
                                else if (transformGroup2.Children[0] is RotateTransform)
                                {
                                    rotateTransform = (RotateTransform)transformGroup2.Children[0];
                                }
                            }
                            if (transformGroup2.Children.Count <= 1)
                            {
                                goto IL_619;
                            }
                            if (!(transformGroup2.Children[1] is ScaleTransform))
                            {
                                if (transformGroup2.Children[1] is RotateTransform)
                                {
                                    rotateTransform = (RotateTransform)transformGroup2.Children[1];
                                    goto IL_618;
                                }
                                goto IL_618;
                            }
                        }
                        scaleTransform = (ScaleTransform)transformGroup2.Children[1];
                    IL_618:
                    IL_619:
                    IL_61A:
                        flag = (scaleTransform != null);
                    IL_624:
                        if (!flag)
                        {
                            scaleTransform = new ScaleTransform();
                            scaleTransform.ScaleX = this._GraphicsZoomFactor;
                            scaleTransform.ScaleY = this._GraphicsZoomFactor;
                        IL_64C:
                            scaleTransform.CenterX = 0.0;
                            scaleTransform.CenterY = 0.0;
                            if (7 == 0)
                            {
                            IL_461:
                            IL_463:
                                goto IL_700;
                            }
                        }
                        else
                        {
                            scaleTransform.ScaleX = this._GraphicsZoomFactor;
                            scaleTransform.ScaleY = this._GraphicsZoomFactor;
                            scaleTransform.CenterX = 0.0;
                            scaleTransform.CenterY = 0.0;
                        }
                        transformGroup.Children.Add(scaleTransform);
                        if (rotateTransform != null)
                        {
                            transformGroup.Children.Add(rotateTransform);
                        }
                        button.Tag = this._GraphicsZoomFactor.ToString();
                        button.RenderTransform = transformGroup;
                        this.elementForContextMenu = button;
                    IL_700:
                        this.IsGraphicsChange = true;
                        if (this._EnlargeReduceFactor >= 1.0)
                        {
                            this.attribute.Width = this.attributeWidth / this._EnlargeReduceFactor;
                            this.attribute.Height = this.attributeHeight / this._EnlargeReduceFactor;
                        }
                        else
                        {
                            this.attribute.Width = this.attributeWidth * this._EnlargeReduceFactor;
                            this.attribute.Height = this.attributeHeight * this._EnlargeReduceFactor;
                        }
                        goto IL_7D3;
                    }
                    if (arg_AF_0)
                    {
                        //goto IL_463;
                    }
                    if (-1 != 0)
                    {
                        if (this.FlipMode != 0 || this.FlipModeY != 0)
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = this._EnlargeReduceFactor;
                            this.zoomTransform.ScaleY = this._EnlargeReduceFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            if (false)
                            {
                                //goto IL_4E6;
                            }
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._EnlargeReduceFactor, 0.0, 0.0, this._EnlargeReduceFactor, 0.0, 0.0);
                            }
                            else
                            {
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._EnlargeReduceFactor, 0.0, 0.0, this._EnlargeReduceFactor, 0.0, 0.0);
                                this.MyInkCanvas.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            }
                            this.IsGraphicsChange = true;
                        }
                        else
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = this._EnlargeReduceFactor;
                            this.zoomTransform.ScaleY = this._EnlargeReduceFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._EnlargeReduceFactor, 0.0, 0.0, this._EnlargeReduceFactor, 0.0, 0.0);
                                if (3 == 0)
                                {
                                    //goto IL_64C;
                                }
                            }
                            else
                            {
                                this.MyInkCanvas.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            }
                            this.IsGraphicsChange = true;
                        }
                        this.lblzoomplus.Content = this._EnlargeReduceFactor * 100.0 + " % ";
                        //goto IL_461;
                    }
                    //goto IL_624;
                }
                catch (Exception ex)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(ex);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    MessageBox.Show(ex.Message);
                }
            IL_7D3:
                while (!true)
                {
                }
            }
            finally
            {
                MemoryManagement.FlushMemory();
                if (!false)
                {
                }
            }
            this.IsGreenCorrection = false;

        }

        //private void btnenlargeplus_Click ( object sender, RoutedEventArgs e )
        //    {
        //    try
        //        {
        //        this.cropPopup();
        //        this.btnenlargeplusAct.Visibility = Visibility.Visible;
        //        if(this._clp != null)
        //            {
        //            Rect clippingRectangle;
        //            double actualWidth;
        //            double actualHeight;
        //            double num;
        //            double num2;
        //            System.Windows.Documents.AdornerLayer adornerLayer;
        //            do
        //                {
        //                clippingRectangle = this._clp.ClippingRectangle;
        //                actualWidth = this.GrdCrop.ActualWidth;
        //                actualHeight = this.GrdCrop.ActualHeight;
        //                clippingRectangle = new Rect(clippingRectangle.X, clippingRectangle.Y, clippingRectangle.Width, clippingRectangle.Height);
        //                num = clippingRectangle.X;
        //                num2 = clippingRectangle.Y;
        //                adornerLayer = System.Windows.Documents.AdornerLayer.GetAdornerLayer(this.GrdCrop);
        //                clippingRectangle.Scale(1.01, 1.01);
        //                }
        //            while(false);
        //            clippingRectangle.X = num - num * 0.01 / 2.0;
        //            if(5 == 0)
        //                {
        //                goto IL_156;
        //                }
        //            clippingRectangle.Y = num2 - num2 * 0.01 / 2.0;
        //            double arg_10A_0 = clippingRectangle.X;
        //            double arg_10A_1 = clippingRectangle.Width;
        //            IL_10A:
        //            double arg_1C0_0;
        //            double arg_1C0_1;
        //            if(arg_10A_0 + arg_10A_1 > actualWidth)
        //                {
        //                if(!false)
        //                    {
        //                    return;
        //                    }
        //                goto IL_176;
        //                }
        //            else
        //                {
        //                double expr_122 = arg_10A_0 = (arg_1C0_0 = clippingRectangle.Y);
        //                double expr_129 = arg_10A_1 = (arg_1C0_1 = clippingRectangle.Height);
        //                if(false)
        //                    {
        //                    goto IL_1BA;
        //                    }
        //                if(expr_122 + expr_129 > actualHeight)
        //                    {
        //                    return;
        //                    }
        //                if(this._felCur == null)
        //                    {
        //                    goto IL_15F;
        //                    }
        //                }
        //            IL_156:
        //            this.RemoveCropFromCur();
        //            IL_15F:
        //            if(this._clp == null)
        //                {
        //                return;
        //                }
        //            IL_176:
        //            double expr_178 = arg_10A_0 = clippingRectangle.X;
        //            double expr_17D = arg_10A_1 = -3.0;
        //            if(false)
        //                {
        //                goto IL_10A;
        //                }
        //            if(expr_178 < expr_17D)
        //                {
        //                clippingRectangle.X = -3.0;
        //                }
        //            arg_1C0_0 = (arg_10A_0 = clippingRectangle.Y);
        //            arg_1C0_1 = (arg_10A_1 = -3.0);
        //            IL_1BA:
        //            if(false)
        //                {
        //                goto IL_10A;
        //                }
        //            if(arg_1C0_0 < arg_1C0_1)
        //                {
        //                clippingRectangle.Y = -3.0;
        //                }
        //            this._clp = new CroppingAdorner(this.GrdCrop, clippingRectangle);
        //            adornerLayer.Add(this._clp);
        //            this._felCur = this.GrdCrop;
        //            do
        //                {
        //                this.SetClipColorGrey();
        //                }
        //            while(2 == 0);
        //            }
        //        }
        //    catch(Exception serviceException)
        //        {
        //        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
        //        ErrorHandler.ErrorHandler.LogFileWrite(message);
        //        }
        //    }

        private void btnEraser_Click(object sender, RoutedEventArgs e)
        {
            bool arg_20_0;
            bool arg_F1_0 = arg_20_0 = this.IsEraserActive;
            do
            {
                if (!false && !false)
                {
                    bool flag;
                    if (!false)
                    {
                        flag = arg_F1_0;
                    }
                    arg_F1_0 = (arg_20_0 = flag);
                }
            }
            while (-1 == 0);
            if (!arg_20_0)
            {
                this.greenEraser.Visibility = Visibility.Collapsed;
                this.squre.Visibility = Visibility.Hidden;
                if (true)
                {
                    this.redeyecirclegreen.Visibility = Visibility.Visible;
                    this.IsEraserActive = true;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
                    this.mainImage.Cursor = Cursors.Arrow;
                    goto IL_E7;
                }
            }
            else
            {
                do
                {
                    this.greenEraser.Visibility = Visibility.Collapsed;
                }
                while (!true);
                this.squre.Visibility = Visibility.Hidden;
                this.mainImage.Cursor = Cursors.Arrow;
                this.redeyecirclegreen.Visibility = Visibility.Collapsed;
            }
            this.IsEraserActive = false;
            this.IsEraserDrawEllipseActive = false;
            this.IsEraserDrawRectangleActive = false;
            this.IsGreenCorrection = false;
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
        IL_E6:
        IL_E7:
            if (3 != 0)
            {
                return;
            }
            goto IL_E6;
        }

        public void btnExittoSearch_Click(object sender, EventArgs e)
        {
            CollapsePopUp();
            this.gumballRestore = false;
            this.btnExittoSearchActivate.Visibility = Visibility.Visible;
            bool flag = !this.IsImageDirtyState;
            if (flag)
            {
                goto IL_89;
            }
            string text = "Do you want to save the effects of the selected image?";
        IL_30:
            if (false)
            {
                goto IL_17F;
            }
            string caption = "Save Box";
            System.Windows.Forms.MessageBoxButtons buttons = System.Windows.Forms.MessageBoxButtons.YesNo;
            System.Windows.Forms.DialogResult dialogResult = System.Windows.Forms.MessageBox.Show(text, caption, buttons);
            flag = (dialogResult != System.Windows.Forms.DialogResult.Yes);
            if (!flag)
            {
                this.SaveOnImageChange();
                goto IL_85;
            }
            flag = !this.IsChromaChanged;
        IL_77:
            if (!flag)
            {
                this.CompleteRestore();
            }
        IL_85:
            goto IL_A9;
        IL_89:
            flag = !this.IsChromaChanged;
            if (!flag)
            {
                this.CompleteRestore();
                this.SaveOnImageChange();
            }
        IL_A9:
            this.btnGumBall.Visibility = Visibility.Collapsed;
            this.txtGumBall.Visibility = Visibility.Collapsed;
            if (3 == 0)
            {
                goto IL_77;
            }
            this.CmbProductType.Visibility = Visibility.Collapsed;
            System.Windows.Controls.Button button = new System.Windows.Controls.Button();
            button = (System.Windows.Controls.Button)sender;
            this.CmbProductType.Visibility = Visibility.Collapsed;
            this.EffectsSender = null;
            SearchResult searchResult = null;
            IEnumerator enumerator = System.Windows.Application.Current.Windows.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    Window window = (Window)enumerator.Current;
                    bool arg_137_0;
                    bool expr_128 = arg_137_0 = (window.Title == "View/Order Station");
                    if (7 != 0)
                    {
                        flag = !expr_128;
                        arg_137_0 = flag;
                    }
                    if (!arg_137_0)
                    {
                        searchResult = (SearchResult)window;
                    }
                }
            }
            finally
            {
                IDisposable disposable = enumerator as IDisposable;
                bool arg_169_0;
                bool expr_160 = arg_169_0 = (disposable == null);
                if (8 != 0)
                {
                    flag = expr_160;
                    arg_169_0 = flag;
                }
                if (!arg_169_0)
                {
                    disposable.Dispose();
                }
            }
            flag = (searchResult != null);
        IL_17F:
            if (!flag)
            {
                if (6 == 0)
                {
                    goto IL_30;
                }
                searchResult = new SearchResult();
            }
            bool arg_1B3_0;
            if (RobotImageLoader.GroupImages.Count != 0)
            {
                arg_1B3_0 = true;
                goto IL_1B2;
            }
        IL_19C:
            arg_1B3_0 = !(this.IsGoupped == "View All");
        IL_1B2:
            if (!arg_1B3_0)
            {
                this.IsGoupped = "View Group";
            }
            searchResult.pagename = "Saveback";
            searchResult.Savebackpid = Convert.ToString(this.PhotoId);
            searchResult.Show();
            searchResult.LoadWindow();
            if (false)
            {
                goto IL_19C;
            }
            base.Hide();
            if (true)
            {
                return;
            }
            goto IL_89;
        }

        private void btnflip_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                this.cropPopup();
                this.btnflipAct.Visibility = Visibility.Visible;
                while (true)
                {
                    bool flag = !this.SetRedeye;
                    if (4 == 0 || (!false && !flag))
                    {
                        if (!false)
                        {
                            this.ellipse.Visibility = Visibility.Collapsed;
                            goto IL_26;
                        }
                        goto IL_32;
                    }
                IL_3C:
                    if (false)
                    {
                        goto IL_26;
                    }
                    this.Flip(-1);
                    if (!false)
                    {
                        break;
                    }
                    continue;
                IL_32:
                    this.SetRedeye = false;
                    goto IL_3C;
                IL_26:
                    this.mainImage.Cursor = Cursors.Arrow;
                    goto IL_32;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void btnframe_Click(object sender, RoutedEventArgs e)
        {
            this.templatePopup();
            this.btnBorderAct.Visibility = Visibility.Visible;
            this.CmbProductType.Visibility = Visibility.Visible;
            this.jrotate.Visibility = Visibility.Hidden;
            this.lstBackground.Visibility = Visibility.Collapsed;
            this.lstGraphics.Visibility = Visibility.Collapsed;
            this.lstStrip.Visibility = Visibility.Collapsed;
            this.lstFrame.Visibility = Visibility.Visible;
            this.GrdEffects.Visibility = Visibility.Visible;
            this.loadImagestoList();
        }

        private void btngraphics_Click(object sender, RoutedEventArgs e)
        {
            this.templatePopup();
            this.btngraphicsAct.Visibility = Visibility.Visible;
            if (4 != 0)
            {
                this.CmbProductType.Visibility = Visibility.Collapsed;
                this.jrotate.Visibility = Visibility.Hidden;
                goto IL_1C;
            }
            do
            {
            IL_39:
                this.lstStrip.Visibility = Visibility.Collapsed;
            }
            while (8 == 0);
            if (!false)
            {
                this.lstGraphics.Visibility = Visibility.Visible;
                this.GrdEffects.Visibility = Visibility.Visible;
                goto IL_66;
            }
            goto IL_66;
        IL_1C:
            this.lstBackground.Visibility = Visibility.Collapsed;
            if (4 != 0)
            {
                this.lstFrame.Visibility = Visibility.Collapsed;
                this.lstGraphics.Visibility = Visibility.Visible;
                this.GrdEffects.Visibility = Visibility.Visible;
                // goto IL_39;
            }
        IL_66:
            if (!false)
            {
                return;
            }
            goto IL_1C;
        }

        private void btnGreen_Click(object sender, RoutedEventArgs e)
        {
            this._colorfiltereff.FilterColor = Colors.Green;
            while (true)
            {
                if (!false)
                {
                    this.Grdcolorfilter.Effect = this._colorfiltereff;
                }
                if (!false)
                {
                    this.colour = "green";
                    this.color = Colors.Green;
                    if (!false)
                    {
                        break;
                    }
                }
            }
        }

        private void btnAnimatedGifScreen_Click(object sender, RoutedEventArgs e)
        {
            // this.mainImageNew.Visibility = Visibility.Collapsed;   
            //DoubleAnimation animation = new DoubleAnimation();           
            //// this.mainImage.Visibility = Visibility.Collapsed;   
            //Storyboard sb = new Storyboard();   
            //DoubleAnimation da = new DoubleAnimation(-100, 100, new Duration(new TimeSpan(0, 0, 1)));   
            //Storyboard.SetTargetProperty(da, new PropertyPath("(Canvas.Top)"));   
            //if(da.Duration.TimeSpan.TotalSeconds == 1)   
            //    this.mainImageNew.Visibility = Visibility.Collapsed;   
            //sb.Children.Add(da);            
            //mainImageNew.BeginStoryboard(sb);  

        }


        private void btnGreenScreen_Click(object sender, RoutedEventArgs e)
        {
            CollapsePopUp();
            ////PopupButton.IsChecked = true;
            this.btnChromaActive.Visibility = Visibility.Visible;

            this.btnantirotate.IsEnabled = true;
            try
            {
                if (2 != 0)
                {
                    this.HideGraphics();
                }
                this.btnPrintToGroup.Visibility = Visibility.Hidden;
                this.btn6X8Print.Visibility = Visibility.Hidden;
                UIElement expr_36 = this.btn8X10Print;
                Visibility expr_3B = Visibility.Hidden;
                if (6 != 0)
                {
                    // expr_36.Visibility = expr_3B;
                }
                if (false)
                {
                    goto IL_32A;
                }
                Button button = (Button)sender;
                if (false)
                {
                    goto IL_3CE;
                }
                bool arg_83_0 = string.IsNullOrEmpty(this.BackgroundDBValue) || button.CommandParameter == null || button.CommandParameter == this.BackgroundDBValue;
            IL_83:
                if (!arg_83_0)
                {
                    if (-1 == 0)
                    {
                        goto IL_3E7;
                    }
                    button.CommandParameter = this.BackgroundDBValue;
                    button.Tag = LoginUser.DigiFolderBackGroundPath + "\\8x10\\" + this.BackgroundDBValue;
                }
                Canvas.SetLeft(this.Opacitymsk, 0.0);
                Canvas.SetLeft(this.canbackgroundParent, 0.0);
                Canvas.SetTop(this.Opacitymsk, 0.0);
                Canvas.SetTop(this.canbackgroundParent, 0.0);
                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = null);
                bool arg_142_0 = this.frm.Children.Count <= 0;
            IL_142:
                if (!arg_142_0)
                {
                    List<UIElement> list = new List<UIElement>();
                    foreach (UIElement uIElement in this.frm.Children)
                    {
                        if (uIElement is OpaqueClickableImage)
                        {
                            list.Add(uIElement);
                        }
                    }
                    foreach (UIElement uIElement in list)
                    {
                        this.frm.Children.Remove(uIElement);
                    }
                }
                this.mainImageundo.Visibility = Visibility.Visible;
                this.GrdsubGreenScreen.Visibility = Visibility.Visible;
                this.GrdChromaKeyNewScreen.Visibility = Visibility.Visible;
                this.btnKeepTop.Visibility = Visibility.Visible;
                this.btnKeepBottom.Visibility = Visibility.Visible;

                DragCanvas.SetCanBeDragged(this.mainImage, true);
                DragCanvas.SetCanBeDragged(this.Opacitymsk, false);
                DragCanvas.SetCanBeDragged(this.imageundoGrid, false);
                this.dragCanvas.AllowDragging = false;
                this.dragCanvas.IsEnabled = true;
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this._maxZoomFactor = 4.0;
                this.MyInkCanvas.SnapsToDevicePixels = true;
            IL_289:
                this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                if (this.zoomTransform == null)
                {
                    goto IL_3AE;
                }
                bool arg_2CF_0;
                if (this.FlipMode == 0)
                {
                    arg_2CF_0 = (arg_142_0 = (this.FlipModeY == 0));
                    if (!false)
                    {
                        goto IL_2CE;
                    }
                    goto IL_142;
                }
            IL_2CD:
                arg_2CF_0 = false;
            IL_2CE:
                if (!arg_2CF_0)
                {
                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    this.zoomTransform.ScaleX = this._ZoomFactor;
                }
                else
                {
                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    this.zoomTransform.ScaleX = this._ZoomFactor;
                    if (6 != 0)
                    {
                        this.zoomTransform.ScaleY = this._ZoomFactor;
                        goto IL_3AD;
                    }
                    goto IL_289;
                }
            IL_32A:
                this.zoomTransform.ScaleY = this._ZoomFactor;
            IL_3AD:
            IL_3AE:
                this.GrdEffects.Visibility = Visibility.Visible;
                if (false)
                {
                    goto IL_484;
                }
                this.lstBackground.Visibility = Visibility.Visible;
            IL_3CE:
                this.lstFrame.Visibility = Visibility.Collapsed;
                this.lstGraphics.Visibility = Visibility.Collapsed;
            IL_3E7:
                this.lstStrip.Visibility = Visibility.Collapsed;
                this.canbackground.OpacityMask = null;
                if (false)
                {
                    goto IL_2CD;
                }
                VisualBrush opacityMask = new VisualBrush(this.opacitymaskmycan);
                this.mainImageundo.OpacityMask = opacityMask;

                // this.grdZoomCanvas.LayoutTransform = new TransformGroup();
                this.Zomout(true);
                this.islstBackgroundVisible = true;
                this.ChromaColor.IsEnabled = true;
                this.rdbForgroundGreen.IsChecked = new bool?(true);
                this.ChkBackground.IsChecked = new bool?(true);
                this.ChkForground.IsChecked = new bool?(true);
            IL_484:
                //this._ZoomFactor = 0.5;
                this._ZoomFactor = 1;  //reset to original size 10/10/2018 Sunil
                this.ZoomInButton_Click1(sender, e);
                this.DisableSideButton();
                if (false)
                {
                    goto IL_3AD;
                }
                this.btnPrintToGroup.IsEnabled = false;
                this.btnPlaceOrder.IsEnabled = false;
                this.ApplyGreenEffectGrid(); 
                this.toleranceDefault = this.tolerance;
                bool arg_4F1_0;
                if (!this.IsDefaultBackgroundEnabled)
                {
                    bool expr_4DF = arg_83_0 = this.isGreenImage;
                    if (false)
                    {
                        goto IL_83;
                    }
                    arg_4F1_0 = !expr_4DF;
                }
                else
                {
                    arg_4F1_0 = false;
                }
                if (!arg_4F1_0)
                {
                    this.Effects_Click(sender, e);
                }
                else
                {
                    this.Zomout(true);
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
        }



        private void btnGreenScreenBackGround_Click(object sender, RoutedEventArgs e)
        {
            this.chromaKeyPopup();
            this.btnBackGroundAct.Visibility = Visibility.Visible;
            if (2 != 0)
            {
                if (!false)
                {
                    if (this.GrdEffects.Visibility != Visibility.Visible)
                    {
                        if (3 == 0)
                        {
                            goto IL_8F;
                        }
                    IL_73:
                        if (false)
                        {
                            goto IL_AD;
                        }
                        this.GrdEffects.Visibility = Visibility.Visible;
                        this.lstBackground.Visibility = Visibility.Visible;
                    IL_8F:
                        this.lstFrame.Visibility = Visibility.Collapsed;
                        if (3 == 0)
                        {
                            goto IL_73;
                        }
                        this.lstGraphics.Visibility = Visibility.Collapsed;
                    IL_AD:
                        return;
                    }
                    if (false)
                    {
                        goto IL_5F;
                    }
                    this.GrdEffects.Visibility = Visibility.Collapsed;
                    this.lstBackground.Visibility = Visibility.Collapsed;
                }
            }
            this.lstFrame.Visibility = Visibility.Collapsed;
        IL_5F:
            this.lstGraphics.Visibility = Visibility.Collapsed;
        }

        private void btnGreyScale_Click(object sender, RoutedEventArgs e)
        {
            this.effectPopup();
            this.btnGreyScaleAct.Visibility = Visibility.Visible;
            this.GreyScaleeffect();
            this.LstGridEffects.Add("greyscale");
        }

        private void btngrph_Click(object sender, RoutedEventArgs e)
        {
            if (4 != 0)
            {
                do
                {
                    this.jrotate.Visibility = Visibility.Hidden;
                }
                while (7 == 0);
                do
                {
                    if (!false)
                    {
                        this.elementForContextMenu = (Button)sender;
                    }
                }
                while (-1 == 0);
                this.IsSelectedMainImage = false;
            }
        }

        private void btngrph_GotFocus(object sender, RoutedEventArgs e)
        {
            this.elementForContextMenu = (Button)sender;
            this.IsSelectedMainImage = false;
        }

        private void btngumball_Click(object sender, RoutedEventArgs e)
        {
            bool arg_8C_0;
            if (!this.gumshow.Equals(true))
            {
                arg_8C_0 = !this.IsRestoreRideClick.Equals(true);
            }
            else
            {
                if (5 == 0)
                {
                    return;
                }
                arg_8C_0 = false;
            }
            if (!arg_8C_0)
            {
                this.ShowhidePlayerScore(Visibility.Visible);
                this.gumshow = false;
                this.gumshowDb = true;
                if (!false)
                {
                    this.IsRestoreRideClick = false;
                }
            }
            else
            {
                this.ShowhidePlayerScore(Visibility.Collapsed);
                this.gumshow = true;
                this.gumshowDb = false;
            }
        }

        private void btnHighPreview_Click(object sender, RoutedEventArgs e)
        {
            if (true)
            {
                try
                {
                    this.CmbProductType.Visibility = Visibility.Collapsed;
                    PhotoBusiness photoBusiness = new PhotoBusiness();
                    photoBusiness.SetPreviewCounter(this.PhotoId);
                    string item = string.Empty;
                    bool flag = false;
                    int arg_4E_0;
                    int arg_7E_0 = arg_4E_0 = (this.IsGraphicsChange ? 1 : 0);
                    int arg_4B_0 = 0;
                    int expr_ED;
                    int arg_F3_0;
                    while (true)
                    {
                        int arg_7E_1;
                        int expr_4B = arg_7E_1 = arg_4B_0;
                        if (expr_4B != 0)
                        {
                            goto IL_7E;
                        }
                        bool flag2 = arg_4E_0 == expr_4B;
                        if (!flag2)
                        {
                            if (false)
                            {
                                goto IL_B6;
                            }
                            item = this.SaveXaml(ref flag);
                        }
                        if (!flag)
                        {
                            item = null;
                        }
                        if (this.IsGreenRemove)
                        {
                            arg_7E_0 = (this.isChromaApplied ? 1 : 0);
                            arg_7E_1 = 0;
                            goto IL_7E;
                        }
                        bool arg_84_0 = true;
                        goto IL_83;
                    IL_ED:
                        int arg_ED_0;
                        expr_ED = (arg_4B_0 = arg_ED_0);
                        if (expr_ED == 0)
                        {
                            break;
                        }
                        continue;
                    IL_83:
                        if (arg_84_0)
                        {
                            goto IL_111;
                        }
                        if (this.isChromaApplied)
                        {
                            goto IL_110;
                        }
                        int expr_AC = arg_4E_0 = (arg_7E_0 = (arg_F3_0 = ((this.MyInkCanvas.Children.Count > 1) ? 1 : 0)));
                        int expr_AF = arg_ED_0 = 0;
                        if (expr_AF == 0)
                        {
                            flag2 = (expr_AC == expr_AF);
                            goto IL_B6;
                        }
                        goto IL_ED;
                    IL_7E:
                        arg_84_0 = (arg_7E_0 == arg_7E_1);
                        goto IL_83;
                    IL_B6:
                        if (!flag2)
                        {
                            this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                        }
                        arg_7E_0 = (arg_4E_0 = (arg_F3_0 = this.MyInkCanvas.Strokes.Count));
                        arg_ED_0 = 0;
                        goto IL_ED;
                    }
                    if (arg_F3_0 > expr_ED)
                    {
                        this.MyInkCanvas.Strokes.Clear();
                    }
                IL_110:
                IL_111:
                    List<object> list = new List<object>(2);
                    list.Add(item);
                    // AuditLog.AddUserLog(LoginUser.UserId, 2, "Show Preview of " + this.PhotoName + " image.", this.PhotoId);
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    do
                    {
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                    while (!false && false);
                }
            }
        }

        private void btnHome_Click(object sender, RoutedEventArgs e)
        {
            if (false)
            {
                goto IL_F1;
            }
            int arg_B9_0;
            int expr_08 = arg_B9_0 = 1;

            ClientView clientView = null;
            if (expr_08 != 0)
            {
                RobotImageLoader.IsZeroSearchNeeded = (expr_08 != 0);
                RobotImageLoader.StartIndex = 0;
                this.IsGoupped = "View Group";
                this.GetMktImgInfo();
                // clientView = null;
                foreach (Window window in Application.Current.Windows)
                {
                    bool flag = !(window.Title == "ClientView");
                    if (!false)
                    {
                        if (!flag)
                        {
                            clientView = (ClientView)window;
                        }
                    }
                }
                arg_B9_0 = ((clientView != null) ? 1 : 0);
            }
            if (arg_B9_0 != 0)
            {
                goto IL_CF;
            }
            clientView = new ClientView();
        IL_C6:
            clientView.WindowStartupLocation = WindowStartupLocation.Manual;
        IL_CF:
            clientView.GroupView = false;
            clientView.DefaultView = false;
            bool arg_FE_0;
            if (this.MktImgPath == "")
            {
                arg_FE_0 = true;
                goto IL_FD;
            }
        IL_F1:
            arg_FE_0 = (this.mktImgTime == 0);
        IL_FD:
          
     
        IL_133:
           // clientView.testR.Fill = null;
      
            if (false)
            {
               // goto IL_11D;
            }
            clientView.DefaultView = true;
            //if (clientView.instructionVideo.Visibility == Visibility.Visible)
            //{
            //    clientView.instructionVideo.Play();
            //    if (false)
            //    {
            //        goto IL_133;
            //    }
            //}
            //else
            //{
            //    clientView.instructionVideo.Pause();
            //}
            if (-1 != 0)
            {
                Home home = new Home();
                home.Show();
                base.Hide();
                return;
            }
            goto IL_C6;
        }

        private void btnSoftSkin_Click(object sender, RoutedEventArgs e)
        {
            this.SoftSkinChange();
        }

        private void SoftSkinChange()
        {
            try
            {

                if (this.softSkin == 0)
                {
                    this.softSkin = 0.04;
                    this._softskinEffect.SoftSkin = this.softSkin;
                    this.GrdSoftSkin.Effect = this._softskinEffect;
                    this._softskin = this.softSkin.ToString();
                    this.LstGridEffects.Add("softskin");
                }
                else
                {
                    this.softSkin = 0.0;
                    this._softskinEffect.SoftSkin = this.softSkin;
                    this.GrdSoftSkin.Effect = this._softskinEffect;
                    this._softskin = this.softSkin.ToString();
                    this.LstGridEffects.Add("softskin");
                }
            }
            catch (Exception)
            {

            }
            finally
            {
                this.EffectLogOperation(new LogEffect
                {
                    effvalue = this.softSkin,
                    optname = "softskin"
                });
            }
        }

        private void btnHue_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // this.hueshift += 0.02;
                this.hueshift = 0.03;
                this._shifthueeff.HueShift = this.hueshift;
                this.GrdHueShift.Effect = this._shifthueeff;
                this._hue = this.hueshift.ToString();
            }
            catch (Exception)
            {
            }
            finally
            {
                this.EffectLogOperation(new LogEffect
                {
                    effvalue = this.hueshift,
                    optname = "hue"
                });
            }
        }

        private void btnincreasecircle_Click(object sender, RoutedEventArgs e)
        {
            double redEyeSize;
            this.redEyesPopup();
            this.btnincreasecircleAct.Visibility = Visibility.Visible;
            if (!this.redeffectfirstApplied)
            {
                if (this.redEyeEffect.Radius >= 0.08)
                {
                    redEyeSize = (this.redEyeEffect.Radius = 0.08);
                    ContantValueForMainWindow.RedEyeSize = redEyeSize;
                }
                else
                {
                    redEyeSize = (this.redEyeEffect.Radius += 0.005);
                    if (false)
                    {
                        goto IL_407;
                    }
                    ContantValueForMainWindow.RedEyeSize = redEyeSize;
                }
                this.getredeyezoom(this.ptnred);
                if (5 != 0)
                {
                    goto IL_43E;
                }
            }
            else
            {
                while (!this.redeffectsecondApplied)
                {
                    if (this.redEyeEffectSecond.Radius >= 0.08)
                    {
                        ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectSecond.Radius = 0.08);
                        if (-1 == 0)
                        {
                            continue;
                        }
                    }
                    else
                    {
                        ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectSecond.Radius += 0.005);
                    }
                    this.getredeyezoom(this.ptnred);
                    goto IL_43E;
                }
                if (!this.redeffectmultiple1Applied)
                {
                    if (this.redEyeEffectMultiple.Radius >= 0.08)
                    {
                        ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectMultiple.Radius = 0.08);
                    }
                    else
                    {
                        ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectMultiple.Radius += 0.005);
                    }
                    this.getredeyezoom(this.ptnred);
                    goto IL_43E;
                }
                bool flag = this.redeffectmultiple2Applied;
                if (-1 != 0)
                {
                    if (!flag)
                    {
                        if (this.redEyeEffectMultiple.Radius1 >= 0.08)
                        {
                            ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectMultiple.Radius1 = 0.08);
                        }
                        else
                        {
                            ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectMultiple.Radius1 += 0.005);
                        }
                        this.getredeyezoom(this.ptnred);
                        if (!false)
                        {
                            goto IL_43E;
                        }
                    }
                    else
                    {
                        bool arg_360_0;
                        if (!this.redeffectmultiple3Applied)
                        {
                            flag = (this.redEyeEffectMultiple.Radius2 < 0.08);
                            bool expr_25D = arg_360_0 = flag;
                            if (2 == 0)
                            {
                                goto IL_360;
                            }
                            if (expr_25D)
                            {
                                ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectMultiple.Radius2 += 0.005);
                                goto IL_2AD;
                            }
                        }
                        else if (!this.redeffectmultiple4Applied)
                        {
                            if (this.redEyeEffectMultiple1.Radius >= 0.08)
                            {
                                redEyeSize = (this.redEyeEffectMultiple1.Radius = 0.08);
                                goto IL_2FD;
                            }
                            ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectMultiple1.Radius += 0.005);
                            goto IL_32C;
                        }
                        else
                        {
                            if (!this.redeffectmultiple5Applied)
                            {
                                arg_360_0 = (this.redEyeEffectMultiple1.Radius1 < 0.08);
                                goto IL_360;
                            }
                            if (this.redeffectmultiple6Applied)
                            {
                                goto IL_43E;
                            }
                            if (this.redEyeEffectMultiple1.Radius2 >= 0.06)
                            {
                                ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectMultiple1.Radius2 = 0.08);
                                goto IL_407;
                            }
                            ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectMultiple1.Radius2 += 0.005);
                            goto IL_430;
                        }
                    IL_266:
                        ContantValueForMainWindow.RedEyeSize = (this.redEyeEffectMultiple.Radius2 = 0.08);
                    IL_2AD:
                        this.getredeyezoom(this.ptnred);
                        goto IL_43E;
                    IL_360:
                        if (!arg_360_0)
                        {
                            redEyeSize = (this.redEyeEffectMultiple1.Radius1 = 0.08);
                        }
                        else
                        {
                            redEyeSize = (this.redEyeEffectMultiple1.Radius1 += 0.005);
                            if (6 == 0)
                            {
                                goto IL_266;
                            }
                            ContantValueForMainWindow.RedEyeSize = redEyeSize;
                            if (6 != 0)
                            {
                                goto IL_3B4;
                            }
                        }
                        ContantValueForMainWindow.RedEyeSize = redEyeSize;
                    }
                IL_3B4:
                    this.getredeyezoom(this.ptnred);
                }
                goto IL_43E;
            }
        IL_2FD:
            ContantValueForMainWindow.RedEyeSize = redEyeSize;
        IL_32C:
            this.getredeyezoom(this.ptnred);
            goto IL_43E;
        IL_407:
        IL_430:
            this.getredeyezoom(this.ptnred);
        IL_43E:
            this.redEyeEffectSecond.Radius = ContantValueForMainWindow.RedEyeSize;
            this.redEyeEffectMultiple.Radius = ContantValueForMainWindow.RedEyeSize;
            this.redEyeEffectMultiple1.Radius = ContantValueForMainWindow.RedEyeSize;
        }

        private void btnInvert_Click(object sender, RoutedEventArgs e)
        {
            this.InvertEffect();
            this.LstGridEffects.Add("invert");
        }

        private void btnleft_Click(object sender, RoutedEventArgs e)
        {
            this.left();
        }

        private void btnLightRed_Click(object sender, RoutedEventArgs e)
        {
            this.color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFFFCACB");
            this._colorfiltereff.FilterColor = this.color;
            this.Grdcolorfilter.Effect = this._colorfiltereff;
            this.colour = "lightred";
        }

        private void btnLime_Click(object sender, RoutedEventArgs e)
        {
            this.color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFFFFF00");
            this._colorfiltereff.FilterColor = this.color;
            this.Grdcolorfilter.Effect = this._colorfiltereff;
            this.colour = "lime";
        }

        private void btnLogout_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                while (true)
                {
                    // AuditLog.AddUserLog(LoginUser.UserId, 39, "Logged out at");
                    if (4 == 0)
                    {
                        goto IL_2F;
                    }
                    if (!false)
                    {
                        this.CompileEffectChanged(null, -2, (int)this.grdZoomCanvas.ActualHeight, (int)this.grdZoomCanvas.ActualWidth);
                        goto IL_2F;
                    }
                IL_40:
                    if (!false)
                    {
                        break;
                    }
                    continue;
                IL_2F:
                    Login login = new Login();
                    login.Show();
                    base.Hide();
                    goto IL_40;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void btnMagenta_Click(object sender, RoutedEventArgs e)
        {
            this._colorfiltereff.FilterColor = Colors.Magenta;
            while (true)
            {
                if (!false)
                {
                    this.Grdcolorfilter.Effect = this._colorfiltereff;
                }
                if (!false)
                {
                    this.colour = "magenta";
                    this.color = Colors.Magenta;
                    if (!false)
                    {
                        break;
                    }
                }
            }
        }

        private void btnModerate_Click(object sender, RoutedEventArgs e)
        {
            CollapsePopUp();
            PhotoBusiness photoBusiness = new PhotoBusiness();
            this.btnDeleteActivate.Visibility = Visibility.Visible;
            //goto IL_23;
            try
            {
                int num;
                bool expr_325;
                while (true)
                {
                IL_23:
                    bool arg_2F_0 = this.SetRedeye;
                    int arg_2F_1 = 0;
                    while (true)
                    {
                        bool flag = (arg_2F_0 ? 1 : 0) == arg_2F_1;
                        bool arg_3B_0 = flag;
                        while (true)
                        {
                            if (!arg_3B_0)
                            {
                                this.ellipse.Visibility = Visibility.Collapsed;
                                this.mainImage.Cursor = Cursors.Arrow;
                                this.SetRedeye = false;
                            }
                            photoBusiness.SetModerateImage(this.PhotoId, LoginUser.UserId);
                            (from t in RobotImageLoader.robotImages
                             where t.PhotoId == this.PhotoId
                             select t).FirstOrDefault<LstMyItems>().IsLocked = Visibility.Collapsed;
                            (from t in RobotImageLoader.robotImages
                             where t.PhotoId == this.PhotoId
                             select t).FirstOrDefault<LstMyItems>().IsPassKeyVisible = Visibility.Visible;
                            (from t in RobotImageLoader.robotImages
                             where t.PhotoId == this.PhotoId
                             select t).FirstOrDefault<LstMyItems>().FilePath = System.IO.Path.Combine(this.HotFolderPath, "Locked.png");
                            do
                            {
                                // this.mainImageundo.Source = (this.mainImage.Source = new BitmapImage(new Uri("/images/Locked.png", UriKind.Relative)));
                                this.mainImageundo.Source = (this.mainImage.Source = new BitmapImage(new Uri("/images/Locked.jpeg", UriKind.Relative)));
                                this.widthimg.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png"));
                                this.imgRotateCrop.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png"));
                                this.disableAllButtons();
                                //AuditLog.AddUserLog(LoginUser.UserId, 3, "Moderate " + (from t in RobotImageLoader.robotImages
                                // where t.Name == this.PhotoName
                                // select t).FirstOrDefault<LstMyItems>().Name.ToString() + " image.");
                            }
                            while (3 == 0);
                            this.IsModerate = true;
                            this.GrdInvert.Effect = null;
                            if (-1 != 0)
                            {
                                this.GrdSharpen.Effect = null;
                                this.GrdSketchGranite.Effect = null;
                            }
                            this.GrdEmboss.Effect = null;
                            this.Grdcartoonize.Effect = null;
                            this.GrdGreyScale.Effect = null;
                            if (2 != 0)
                            {
                                this.GrdHueShift.Effect = null;
                                this.Grdcolorfilter.Effect = null;
                                this.GrdBrightness.Effect = null;
                                if (!false)
                                {
                                    this.RemoveAllGraphicsEffect();
                                    this.Zomout(true);
                                    int arg_2A5_0;
                                    if (this.lstStrip.SelectedItem == null)
                                    {
                                        arg_2A5_0 = 0;
                                    }
                                    else
                                    {
                                        if (5 == 0)
                                        {
                                            goto IL_23;
                                        }
                                        arg_2A5_0 = this.NextGroupSelectedIndex(((LstMyItems)this.lstStrip.SelectedItem).PhotoId);
                                    }
                                    num = arg_2A5_0;
                                    this.BindStrip();
                                    this.PhotoName = string.Empty;
                                    this.PhotoId = 0;
                                    this.txtMainImage.Text = string.Empty;
                                    int expr_2E3 = (arg_2F_0 = (this.lstStrip.Items.Count > 0)) ? 1 : 0;
                                    int expr_2E6 = arg_2F_1 = 0;
                                    if (expr_2E6 != 0)
                                    {
                                        break;
                                    }
                                    if (expr_2E3 == expr_2E6)
                                    {
                                        goto IL_387;
                                    }
                                }
                            }
                            this.lstStrip.SelectedItem = this.lstStrip.Items[num];
                            flag = (this.lstStrip.SelectedItem == null);
                            expr_325 = (arg_3B_0 = flag);
                            if (!false)
                            {
                                goto Block_14;
                            }
                        }
                    }
                }
            Block_14:
                if (!expr_325)
                {
                    ListBoxItem listBoxItem = (ListBoxItem)this.lstStrip.ItemContainerGenerator.ContainerFromItem(this.lstStrip.Items[num]);
                    listBoxItem.Focus();
                    LstMyItems lstMyItems = (LstMyItems)this.lstStrip.SelectedItem;
                    do
                    {
                        this.EditImage(lstMyItems.PhotoId, lstMyItems.Name);
                    }
                    while (false);
                }
            IL_387:;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void btnmovedown_Click(object sender, RoutedEventArgs e)
        {
            this.ptnred.X = this.ptnred.X;
            this.ptnred.Y = this.ptnred.Y + 2.0;
            this.ellipse.PointToScreen(this.ptnred);
            this.getredeyezoom(this.ptnred);
            if (!this.redeffectfirstApplied)
            {
                this.pos = this.ptnred;
                this.redEyeEffect.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectsecondApplied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectSecond.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple1Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple2Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center1 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple3Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center2 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple4Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple5Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple6Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
        }

        private void btnMoveImage_Click(object sender, RoutedEventArgs e)
        {
            CollapsePopUp();
            this.btnMoveActivate.Visibility = Visibility.Visible;
            this.MoveImageStartStop();
        }

        private void btnmoveLeft_Click(object sender, RoutedEventArgs e)
        {
            this.ptnred.X = this.ptnred.X - 2.0;
            this.ptnred.Y = this.ptnred.Y;
            System.Windows.Point point = this.ellipse.PointToScreen(this.ptnred);
            this.getredeyezoom(this.ptnred);
            if (!this.redeffectfirstApplied)
            {
                this.pos = this.ptnred;
                this.redEyeEffect.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectsecondApplied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectSecond.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple1Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple2Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center1 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple3Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center2 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple4Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple5Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple6Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
        }

        private void btnmoveRight_Click(object sender, RoutedEventArgs e)
        {
            this.ptnred.X = this.ptnred.X + 2.0;
            this.ptnred.Y = this.ptnred.Y;
            System.Windows.Point point = this.ellipse.PointToScreen(this.ptnred);
            this.getredeyezoom(this.ptnred);
            if (!this.redeffectfirstApplied)
            {
                this.pos = this.ptnred;
                this.redEyeEffect.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectsecondApplied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectSecond.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple1Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple2Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center1 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple3Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center2 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple4Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple5Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple6Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
        }

        private void btnmoveup_Click(object sender, RoutedEventArgs e)
        {
            this.ptnred.X = this.ptnred.X;
            this.ptnred.Y = this.ptnred.Y - 2.0;
            System.Windows.Point point = this.ellipse.PointToScreen(this.ptnred);
            this.getredeyezoom(this.ptnred);
            if (!this.redeffectfirstApplied)
            {
                this.pos = this.ptnred;
                this.redEyeEffect.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectsecondApplied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectSecond.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple1Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple2Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center1 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple3Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple.Center2 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple4Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple5Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
            else if (!this.redeffectmultiple6Applied)
            {
                this.pos = this.ptnred;
                this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(this.ptnred.X / this.mainImage.ActualWidth, this.ptnred.Y / this.mainImage.ActualHeight);
            }
        }

        private void btnNextImages_Click(object sender, RoutedEventArgs e)
        {
            this.IsMoreImages = true;
            bool flag = !this.IsImageDirtyState;
            if (2 != 0)
            {
                if (!flag)
                {
                    string text = "Do you want to save the effects of the selected image?";
                    string caption = "Save Box";
                    System.Windows.Forms.MessageBoxButtons buttons = System.Windows.Forms.MessageBoxButtons.YesNo;
                    while (true)
                    {
                        System.Windows.Forms.DialogResult dialogResult = System.Windows.Forms.MessageBox.Show(text, caption, buttons);
                        bool arg_79_0;
                        bool expr_55 = arg_79_0 = (dialogResult != System.Windows.Forms.DialogResult.Yes);
                        if (!false)
                        {
                            if (!expr_55)
                            {
                                break;
                            }
                            if (2 == 0)
                            {
                                return;
                            }
                            arg_79_0 = this.IsChromaChanged;
                        }
                        if (!arg_79_0)
                        {
                            goto IL_8B;
                        }
                        if (!false)
                        {
                            goto Block_8;
                        }
                    }
                    this.SaveOnImageChange();
                    if (true)
                    {
                        goto IL_8C;
                    }
                    goto IL_B1;
                Block_8:
                    this.CompleteRestore();
                    goto IL_8B;
                }
                if (this.IsChromaChanged)
                {
                    this.CompleteRestore();
                    this.SaveOnImageChange();
                }
            IL_B1:
                goto IL_B3;
            }
        IL_8B:
        IL_8C:
            if (-1 == 0)
            {
                return;
            }
        IL_B3:
            this.LoadNextImageSet(this.IsMoreImages);
        }

        private void btnOrange_Click(object sender, RoutedEventArgs e)
        {
            this.color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFFFA81D");
            this._colorfiltereff.FilterColor = this.color;
            this.Grdcolorfilter.Effect = this._colorfiltereff;
            this.colour = "orange";
        }

        private void btnSaveToCollage_Click(object sender, RoutedEventArgs e)
        {
            string filename = string.Empty;

            System.Windows.Forms.SaveFileDialog saveFileDialog1 = new System.Windows.Forms.SaveFileDialog();
            saveFileDialog1.Filter = "jpg files (*.jpg)|*.jpg|gif files (*.gif)|*.gif|jpeg files (*.jpeg)|*.jpeg";
            System.Windows.Forms.DialogResult dr = saveFileDialog1.ShowDialog();

            if (dr == System.Windows.Forms.DialogResult.OK)
            {
                filename = saveFileDialog1.FileName;
                //save file using stream.                    
            }
            RenderTargetBitmap source = this.CaptureScreenForGreenScreen(this.forWdht, CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, false);
            if (!this.IsGIFAnimationChanged)
            {

            }

            using (FileStream fileStream = new FileStream(filename, FileMode.Create, FileAccess.ReadWrite))
            {
                new JpegBitmapEncoder
                {
                    QualityLevel = 95,
                    Frames =
                    {
                    BitmapFrame.Create(source)
                    }
                }.Save(fileStream);
            }
        }
        private void btnSaveToGifAnimation_Click(object sender, RoutedEventArgs e)
        {
            bool flag2;
            string root = this.HotFolderPath + "\\GIFImages";
            btnHome.IsEnabled = false;
            btnSave.IsEnabled = false;
            bool result = (OkButtoncolorActGIF.Visibility == Visibility.Collapsed);
           // InitializeBackgroundWorker();
            //SearchResult searchResult = null;
            //PhotoFrame ppp = new PhotoFrame();
            if (!result)
            {
                // Session["Result"] = result;
                Application.Current.Properties["Result"] = true;
                string filename = string.Empty;
                flag2 = (this.IsModerate || !this.IsEffectChange);
                if (!flag2)
                {
                    this.SaveEffectsintoDB();
                    if (7 == 0)
                    {
                        goto IL_441;
                    }
                }
                flag2 = (this.IsModerate || (!this.IsGraphicsChange && !this.IsEffectChange && !this.IsChromaChanged));
                if (!flag2)
                {
                    System.Windows.Forms.SaveFileDialog saveFileDialog1 = new System.Windows.Forms.SaveFileDialog();
                    saveFileDialog1.Filter = "Gif Image|*.gif";
                    System.Windows.Forms.DialogResult dr = saveFileDialog1.ShowDialog();
                    if (dr == System.Windows.Forms.DialogResult.OK)
                    {
                        filename = saveFileDialog1.FileName;
                        //save file using stream.                    
                    }

                    //spinner.Visibility = Visibility.Visible;
                   
                    //  this.SaveChangesToDB(input);
                    this.SaveChangesGIFAnimation(filename);

                    if (Directory.Exists(root))
                    {
                        //  Directory.Delete(root);
                        Directory.Delete(root, true);
                    }
                }
            IL_441:;

                CollapsePopUp();
                bool flag = false;
                SearchResult searchResult = null;
                IEnumerator enumerator = System.Windows.Application.Current.Windows.GetEnumerator();
                try
                {
                    while (enumerator.MoveNext())
                    {
                        Window window = (Window)enumerator.Current;
                        bool arg_137_0;
                        bool expr_128 = arg_137_0 = (window.Title == "View/Order Station");
                        if (7 != 0)
                        {
                            flag = !expr_128;
                            arg_137_0 = flag;
                        }
                        if (!arg_137_0)
                        {
                            searchResult = (SearchResult)window;
                        }
                    }
                }
                finally
                {
                    IDisposable disposable = enumerator as IDisposable;
                    bool arg_169_0;
                    bool expr_160 = arg_169_0 = (disposable == null);

                    if (8 != 0)
                    {
                        flag = expr_160;
                        arg_169_0 = flag;
                    }
                    if (!arg_169_0)
                    {
                        disposable.Dispose();
                    }
                }
                flag = (searchResult != null);
            IL_17F:
                if (!flag)
                {
                    searchResult = new SearchResult();
                }
                bool arg_1B3_0;
                if (RobotImageLoader.GroupImages.Count != 0)
                {
                    arg_1B3_0 = true;
                    goto IL_1B2;
                }
            IL_19C:
                arg_1B3_0 = !(this.IsGoupped == "View All");
            IL_1B2:
                if (!arg_1B3_0)
                {
                    this.IsGoupped = "View Group";
                }
                searchResult.pagename = "Saveback";
                searchResult.Savebackpid = Convert.ToString(this.PhotoId);
                searchResult.Show();
                searchResult.LoadWindow();
                if (false)
                {
                    goto IL_19C;
                }
                base.Hide();

                //  Gif Delete generated folder
                if (Directory.Exists(GIFPath))
                {
                    Directory.Delete(GIFPath, true);
                }

                if (true)
                {
                    return;
                }

            }
            else
            {
                MessageBox.Show("Please Press OK then save GIF");
            }
        }

        private void LoadGIF()
        {
            btnHome.IsEnabled = false;

        }
        public static System.Drawing.Image SetImageOpacity(System.Drawing.Image image, float opacity)
        {
            try
            {
                //create a Bitmap the size of the image provided  
                Bitmap bmp = new Bitmap(image.Width, image.Height);

                //create a graphics object from the image  
                using (Graphics gfx = System.Drawing.Graphics.FromImage(bmp))
                {
                    //create a color matrix object  
                    System.Drawing.Imaging.ColorMatrix matrix = new System.Drawing.Imaging.ColorMatrix();

                    //set the opacity  
                    matrix.Matrix33 = opacity;

                    //create image attributes  
                    System.Drawing.Imaging.ImageAttributes attributes = new System.Drawing.Imaging.ImageAttributes();

                    //set the color(opacity) of the image  
                    attributes.SetColorMatrix(matrix, System.Drawing.Imaging.ColorMatrixFlag.Default, System.Drawing.Imaging.ColorAdjustType.Bitmap);

                    //now draw the image  
                    gfx.DrawImage(image, new System.Drawing.Rectangle(0, 0, bmp.Width, bmp.Height), 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, attributes);
                }
                return bmp;
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        private void SaveChangesGIFAnimation(string filenameGIF)
        {
            try
            {
               
                if (8 == 0)
                {
                    goto IL_60;
                }
                bool flag = this.IsGumBall == this.gumshowDb;
                if (flag)
                {
                    goto IL_60;
                }
                if (5 == 0)
                {
                    goto IL_1AF;
                }
                if (!this.gumshowDb)
                {
                    this.ShowhidePlayerScore(Visibility.Collapsed);
                    goto IL_5D;
                }
            IL_47:
                this.ShowhidePlayerScore(Visibility.Visible);
            IL_5D:
                goto IL_68;
            IL_60:
                this.ShowhidePlayerScore(Visibility.Visible);
            IL_68:
                RenderTargetBitmap source = this.CaptureScreenForGreenScreen(this.forWdht, CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, false);
                if (this.IsGraphicsChange || this.isChromaApplied)
                {
                    //  this.SaveintoDB(input);
                }

                if (this.IsGIFAnimationChanged)
                {
                    /////////////// //Test Gif/////////

                    //int width = 128;
                    //int height = width;
                    //int stride = width / 8;
                    //byte[] pixels = new byte[height * stride];

                    BitmapPalette myPalette = BitmapPalettes.WebPalette;

                    //  BitmapSource image = BitmapSource.Create( width,height,96,96,PixelFormats.Indexed1,myPalette, pixels,stride);

                    //using(FileStream fileStream = new FileStream("Temp\\" + this.tempfilename, FileMode.Create, FileAccess.ReadWrite))
                    //    {

                    //    foreach(var image in this.listImage)
                    //        {
                    //        GifBitmapEncoder encoder = new GifBitmapEncoder();
                    //        encoder.Frames.Add(BitmapFrame.Create(source));
                    //        encoder.Save(fileStream);

                    //        }
                    //    }


                    int duration;
                    string filePath = System.IO.Path.Combine(this.HotFolderPath, this.DateFolder);
                    switch (seconds)
                    {
                        case 1:
                            duration = 1000;
                            break;
                        case 2:
                            duration = 2000;
                            break;
                        case 3:
                            duration = 3000;
                            break;
                        case 4:
                            duration = 4000;
                            break;
                        case 5:
                            duration = 5000;
                            break;
                        default:
                            duration = 1000;
                            break;
                    }

                    /* create Gif */
                    //you should replace filepath

                    string pathgif = System.IO.Path.Combine(this.HotFolderPath, "GIFImages");
                    if (!Directory.Exists(System.IO.Path.Combine(this.HotFolderPath, "GIFImages")))
                    {
                        Directory.CreateDirectory(System.IO.Path.Combine(this.HotFolderPath, "GIFImages"));
                    }
                    // String outputFilePath ="Temp\\Ainmation.gif";
                    //  String outputFilePath = pathgif + "\\Ainmation.gif";
                    String outputFilePath = filenameGIF;
                    AnimatedGifEncoder encoder = new AnimatedGifEncoder();
                    encoder.SetSize(400, 300);
                    encoder.Start(outputFilePath);
                    encoder.SetDelay(duration);

                    //-1:no repeat,0:always repeat

                    encoder.SetRepeat(0);

                    int value = MainWindow.dropdownGiFAnimation;
                    string imgPath = this.HotFolderPath;
                    string hotpath = imgPath.Replace("Thumbnails_Big", "");
                    if (value == 1)
                    {
                        //GIFPath = @"E:\GIFS\";
                        //DirectoryInfo dir = new DirectoryInfo(GIFPath);
                        //FileInfo[] files = dir.GetFiles();
                        //foreach(FileInfo file in files)
                        //    {
                        //    encoder.AddFrame(System.Drawing.Image.FromFile(file.FullName));
                        //    }
                        //encoder.Finish();
                      //  int count = 1;
                        string path = imgPath + "\\GIFImages";
                        //    DirectoryInfo dir = new DirectoryInfo(@"F:\GIFS");
                        DirectoryInfo dir = new DirectoryInfo(path);
                        FileInfo[] files = dir.GetFiles();

                        for (int i = 0; i < files.Count(); i++)
                        {
                            string img = files[i].ToString();
                            int count = 1;
                            System.Drawing.Image firstimage;
                            System.Drawing.Image secondimage;
                            using (Stream bmpStream = System.IO.File.Open(files[i].FullName, System.IO.FileMode.Open))
                            {
                                firstimage = System.Drawing.Image.FromStream(bmpStream);
                                firstimage = ResizeImage(firstimage, 400, 300);
                            }

                            if (i < files.Count() - 1)
                            {
                                using (Stream bmpStream = System.IO.File.Open(files[i + 1].FullName, System.IO.FileMode.Open))
                                {
                                    secondimage = System.Drawing.Image.FromStream(bmpStream);
                                    secondimage = ResizeImage(secondimage, 400, 300);
                                }

                                int steps = 100 / 30;
                                int k = 1;

                                for (int j = 100; j > 0; j -= steps)
                                {
                                    System.Drawing.Image image1 = SetImageOpacity(firstimage, (float)j / 100);
                                    System.Drawing.Image image2 = SetImageOpacity(secondimage, (float)k / 100);
                                    k += steps;

                                    //Blocked to resize
                                    int width = (int)Math.Max(image1.Width, image2.Width);
                                    int height = (int)Math.Max(image1.Height, image2.Height);
                                    
                                    Bitmap img3 = new Bitmap(width, height);
                                    Graphics g = System.Drawing.Graphics.FromImage(img3);

                                    // g.Clear(Color.Black);
                                    g.DrawImage(image1, new System.Drawing.Point(0, 0));
                                    //g.DrawImage(image2, new Point(img1.Width, 0));
                                    g.DrawImage(image2, new System.Drawing.Point(0, 0));
                                    g.Dispose();

                                    //   img3.Save(@"F:\Test\" + count.ToString() + ".Jpeg", System.Drawing.Imaging.ImageFormat.Jpeg);
                                    //if(count % 2 != 0)
                                    //    {
                                    GIFPath = hotpath + "DissolveAnimation\\";
                                   
                                    if (count < 10)
                                    {
                                        img = img.Replace(".jpg", "_");
                                        // img3.Save(GIFPath + "0" + count.ToString() + ".Jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
                                        img3.Save(GIFPath + img +"0" + count.ToString() + ".Jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
                                    }
                                    else
                                    {
                                        img = img.Replace(".jpg", "_");
                                        img3.Save(GIFPath + img + count.ToString() + ".Jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
                                    }
                                    // img3.Save(GIFPath + "test_0" + count.ToString() + ".Jpg", System.Drawing.Imaging.ImageFormat.Jpeg);
                                    img3.Dispose();
                                    //    }
                                    count = count + 1;

                                }
                            }
                        }
                        //  GIFPath = @"F:\Test\";

                        DirectoryInfo dir1 = new DirectoryInfo(GIFPath);
                        FileInfo[] files1 = dir1.GetFiles();
                        encoder.SetDelay(duration/5);
                        //encoder.SetSize(1200, 800);
                        foreach (FileInfo file in files1)
                        {
                            encoder.AddFrame(System.Drawing.Image.FromFile(file.FullName));
                        }
                        encoder.Finish();
                    }
                    else if (value == 2)
                    {
                        for (int i = 0, count = this.listImage.Count; i < count; i++)
                        {
                            //Animations.CircleAnimation CircleAnimation = new Animations.CircleAnimation();
                            //System.Windows.Controls.Image nxtimage = new System.Windows.Controls.Image();
                            //BitmapImage bi3 = new BitmapImage();
                            //bi3.BeginInit();
                            //bi3.UriSource = new Uri(filePath + "//" + this.listImage[i], UriKind.Absolute);
                            //bi3.EndInit();

                            //nxtimage.Source = bi3;
                            //nxtimage.Stretch = Stretch.Fill;

                            //System.Drawing.Image ntimage = System.Drawing.Image.FromFile(filePath + "//" + this.listImage[i]);
                            //CircleAnimation.SaveCircleAnimation(ntimage, 400, 300, new Uri(filePath + "//" + this.listImage[i], UriKind.Absolute), duration);                                              

                            Animations.CircleAnimation CircleAnimation = new Animations.CircleAnimation();
                            System.Windows.Controls.Image nxtimage = new System.Windows.Controls.Image();
                            BitmapImage bi3 = new BitmapImage();
                            bi3.BeginInit();
                            bi3.UriSource = new Uri(filePath + "//" + this.listImage[i], UriKind.Absolute);
                            bi3.EndInit();

                            nxtimage.Source = bi3;
                            nxtimage.Stretch = Stretch.Fill;

                            System.Drawing.Image ntimage = System.Drawing.Image.FromFile(filePath + "//" + this.listImage[i]);

                            float vRes = ntimage.VerticalResolution;
                            float hRes = ntimage.HorizontalResolution;

                            double x = ntimage.Width * (96 / hRes);
                            double y = ntimage.Height * (96 / vRes);
                            string img = this.listImage[i];

                            encoder.SetSize((int)x, (int)y);
                            CircleAnimation.SaveCircleAnimation(ntimage, 400, 300, new Uri(filePath + "//" + this.listImage[i], UriKind.Absolute), duration, img);
                        }

                        //   GIFPath = @"E:\GIFS\";
                        GIFPath = hotpath + "CircleAnimation\\";
                        DirectoryInfo dir = new DirectoryInfo(GIFPath);
                        FileInfo[] files = dir.GetFiles();
                        encoder.SetDelay(duration/10);
                        //encoder.SetRepeat(0);
                        foreach (FileInfo file in files)
                        {
                            encoder.AddFrame(System.Drawing.Image.FromFile(file.FullName));
                        }
                        encoder.Finish();
                    }
                    else if (value == 3)
                    {
                        encoder.SetDelay(duration / 4);
                        GIFPath = hotpath + "BlockAnimation\\";
                        DirectoryInfo dir = new DirectoryInfo(GIFPath);
                        FileInfo[] files = dir.GetFiles();

                        //worker = new BackgroundWorker(); //Initializing the worker object
                        //spinner.Visibility = Visibility.Visible;
                        //worker.ProgressChanged += Worker_ProgressChanged;
                        //worker.DoWork += Worker_DoWork;
                        //worker.WorkerReportsProgress = true;
                        //worker.RunWorkerCompleted += Worker_RunWorkerCompleted;
                        //worker.RunWorkerAsync();
                        
                        foreach (FileInfo file in files)
                        {
                            if (file.Length >= 1000)
                            {
                                encoder.AddFrame(System.Drawing.Image.FromFile(file.FullName));
                            }

                        }
                        encoder.Finish();
                    }
                    else if (value == 4)
                    {

                        // filePath = @"E:\GIFTest\";
                        this.listImage = PhotoSW.Animations.WaterFallAnimation.listAnimationGif;
                        // DirectoryInfo dir = new DirectoryInfo(@"E:\GIFTest\");
                        //  string path = hotpath + "\\WaterAnimation\\";
                        GIFPath = hotpath + "WaterAnimation\\";
                        DirectoryInfo dir = new DirectoryInfo(GIFPath);
                        FileInfo[] files = dir.GetFiles();

                        //  string[] filePaths = Directory.GetFiles(path, "*.jpg");

                        //DirectoryInfo dir = new DirectoryInfo(MapPath(@"E:\GIFTest\"));
                        //FileInfo[] file = dir.GetFiles();
                        //ArrayList list = new ArrayList();
                        //foreach(FileInfo file2 in file)
                        //    {
                        //    if(file2.Extension == ".jpg" || file2.Extension == ".jpeg" || file2.Extension == ".gif" || file2.Extension == ".png")
                        //        {
                        //        list.Add(file2);
                        //        }
                        //    }
                        //Thread.Sleep(60000);

                        foreach (FileInfo file in files)
                        {
                            encoder.AddFrame(System.Drawing.Image.FromFile(file.FullName));
                        }

                        //string str = files.ToString().Substring(files.ToString().LastIndexOf("/") + 1, (files.ToString().Length - files.ToString().LastIndexOf("/")) - 1);

                        //for (int i = 0, count = this.listImage.Count; i < count; i++)
                        //{
                        //    //Animations.GIFAnimation interlacedAnimation = new Animations.GIFAnimation();
                        //    //System.Windows.Controls.Image nxtimage = ConvertDrawingImageToWPFImage(System.Drawing.Image.FromFile(filePath + "//" + this.listImage[i]));
                        //    //interlacedAnimation.MakeWaterFallAnimation((FrameworkElement)nxtimage, 400, 300, new TimeSpan(0, 0, 1), this.listImage[i]);

                        //  //  encoder.AddFrame(System.Drawing.Image.FromFile(filePath + "//" + this.listImage[i]));                       

                        //}


                        encoder.Finish();

                    }
                    else
                    {
                        for (int i = 0, count = this.listImage.Count; i < count; i++)
                        {
                            encoder.AddFrame(System.Drawing.Image.FromFile(filePath + "//" + this.listImage[i]));

                        }
                        encoder.Finish();
                    }
                    return;


                    //Task.Delay(60000).ContinueWith(t => {
                    //    DirectoryInfo dir = new DirectoryInfo(@"E:\GIFTest\");
                    //    FileInfo[] files = dir.GetFiles();
                    //    foreach(FileInfo file in files)
                    //        {
                    //        encoder.AddFrame(System.Drawing.Image.FromFile(file.FullName));

                    //        }
                    //    encoder.Finish();
                    //});

                    ////////// End  //////////////////////// 

                }

                FileInfo fileInfo = new FileInfo("Temp\\" + this.tempfilename);
                flag = !this.gumshowDb;
            IL_1AF:
                if (!flag)
                {
                    do
                    {
                        this.ShowhidePlayerScore(Visibility.Collapsed);
                    }
                    while (5 == 0);
                    if (!Directory.Exists(System.IO.Path.Combine(this.HotFolderPath, "EditedImages", "RideCDUSB")))
                    {
                        Directory.CreateDirectory(System.IO.Path.Combine(this.HotFolderPath, "EditedImages", "RideCDUSB"));
                    }
                    fileInfo.CopyTo(System.IO.Path.Combine(this.HotFolderPath, "EditedImages", "RideCDUSB", this.tempfilename), true);
                    if (-1 == 0)
                    {
                        goto IL_47;
                    }
                    source = this.CaptureScreenForGreenScreen(this.forWdht, CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, false);
                }
                //  fileInfo.Delete();
            }
            catch (Exception ex)
            {
                do
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(ex);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    MessageBox.Show(ex.Message);
                }
                while (false);
            }
            finally
            {
                if (true)
                {
                    MemoryManagement.FlushMemory();
                }
            }
        }
        public static Bitmap ResizeImage(System.Drawing.Image image, int width, int height)
        {
            var destRect = new System.Drawing.Rectangle(0, 0, width, height);
            var destImage = new Bitmap(width, height);

            destImage.SetResolution(image.HorizontalResolution, image.VerticalResolution);

            using (var graphics = System.Drawing.Graphics.FromImage(destImage))
            {
                graphics.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;
                graphics.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;
                graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
                graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
                graphics.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;

                using (var wrapMode = new System.Drawing.Imaging.ImageAttributes())
                {
                    wrapMode.SetWrapMode(System.Drawing.Drawing2D.WrapMode.TileFlipXY);
                    graphics.DrawImage(image, destRect, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, wrapMode);
                }
            }

            return destImage;
        }
        private System.Windows.Controls.Image ConvertDrawingImageToWPFImage(System.Drawing.Image gdiImg)
        {


            System.Windows.Controls.Image img = new System.Windows.Controls.Image();

            //convert System.Drawing.Image to WPF image
            System.Drawing.Bitmap bmp = new System.Drawing.Bitmap(gdiImg);
            IntPtr hBitmap = bmp.GetHbitmap();
            System.Windows.Media.ImageSource WpfBitmap = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(hBitmap, IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions());

            img.Source = WpfBitmap;
            img.Width = 500;
            img.Height = 600;
            img.Stretch = System.Windows.Media.Stretch.Fill;
            return img;
        }

        private void btnPhotoID_Click(object sender, RoutedEventArgs e)
        {
            bool flag = false;
            try
            {
                this.EffectsSender = null;
                this.CmbProductType.Visibility = Visibility.Collapsed;
                bool expr_29 = this.redeffectfirstApplied;
                bool flag2;
                if (!false)
                {
                    flag2 = expr_29;
                }
                if (!flag2)
                {
                    this.GrdRedEyeFirst.Effect = null;
                }
                else
                {
                    flag = true;
                }
                if (3 != 0)
                {
                    flag2 = this.redeffectsecondApplied;
                    if (!flag2)
                    {
                        this.GrdRedEyeSecond.Effect = null;
                    }
                    else
                    {
                        flag = true;
                    }
                    flag2 = this.redeffectmultiple1Applied;
                    if (!flag2)
                    {
                        this.GrdRedEyeMultiple.Effect = null;
                    }
                    else
                    {
                        flag = true;
                    }
                    flag2 = this.redeffectmultiple2Applied;
                    if (!flag2)
                    {
                        this.redEyeEffectMultiple.Radius1 = 0.0;
                    }
                    else
                    {
                        flag = true;
                    }
                    flag2 = this.redeffectmultiple3Applied;
                    if (!flag2)
                    {
                        this.redEyeEffectMultiple.Radius2 = 0.0;
                        goto IL_DB;
                    }
                }
                flag = true;
            IL_DB:
                flag2 = this.redeffectmultiple4Applied;
                if (2 == 0)
                {
                    goto IL_15A;
                }
                if (flag2)
                {
                    flag = true;
                    goto IL_FB;
                }
            IL_EA:
                this.GrdRedEyeMultiple1.Effect = null;
            IL_FB:
                flag2 = this.redeffectmultiple5Applied;
                if (!flag2)
                {
                    this.redEyeEffectMultiple1.Radius1 = 0.0;
                }
                else
                {
                    flag = true;
                }
                flag2 = this.redeffectmultiple6Applied;
                if (!flag2)
                {
                    this.redEyeEffectMultiple1.Radius2 = 0.0;
                }
                else
                {
                    flag = true;
                }
                this.imageundoGrid.IsHitTestVisible = true;
                bool arg_167_0;
                if (this.isChromaApplied)
                {
                    arg_167_0 = true;
                    goto IL_166;
                }
            IL_15A:
                arg_167_0 = !this.IsGreenRemove;
            IL_166:
                flag2 = arg_167_0;
                if (!flag2)
                {
                    flag2 = (this.MyInkCanvas.Children.Count <= 1);
                    if (!flag2)
                    {
                        this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                    }
                    flag2 = (this.MyInkCanvas.Strokes.Count <= 0);
                    if (!flag2)
                    {
                        this.MyInkCanvas.Strokes.Clear();
                    }
                }
                string input = string.Empty;
                bool arg_1EE_0 = this.IsGumBall == this.gumshowDb;
                bool arg_430_0;
                bool expr_30C;
                while (true)
                {
                    flag2 = arg_1EE_0;
                    if (!flag2)
                    {
                        if (3 == 0)
                        {
                            goto IL_463;
                        }
                        this.IsEffectChange = true;
                    }
                    bool flag3 = false;
                    int arg_220_0;
                    arg_430_0 = ((this.IsGraphicsChange ? (arg_220_0 = 0) : (arg_220_0 = ((!this.isChromaApplied) ? 1 : 0))) != 0);
                    if (!false)
                    {
                        flag2 = (arg_220_0 != 0);
                        if (!flag2)
                        {
                            if (-1 == 0)
                            {
                                goto IL_EA;
                            }
                            input = this.SaveXaml(ref flag3);
                        }
                        flag2 = (flag3 || this.isChromaApplied || this.gumballRestore);
                        if (flag2)
                        {
                            goto IL_257;
                        }
                        if (!false)
                        {
                            input = null;
                            goto IL_257;
                        }
                        goto IL_271;
                    IL_272:
                        bool arg_273_0;
                        flag2 = arg_273_0;
                        if (!flag2)
                        {
                            flag = true;
                        }
                        flag2 = (this.IsModerate || !this.IsEffectChange);
                        if (!flag2)
                        {
                            this.SaveEffectsintoDB();
                            if (7 == 0)
                            {
                                goto IL_441;
                            }
                        }
                        flag2 = (this.IsModerate || (!this.IsGraphicsChange && !this.IsEffectChange && !this.IsChromaChanged));
                        if (!flag2)
                        {
                            this.SaveChangesToDB(input);
                        }
                        flag2 = (!this.isChromaApplied || this.IsModerate || (!this.IsChromaChanged && !flag));
                        if (flag2)
                        {
                            goto IL_322;
                        }
                        expr_30C = (arg_1EE_0 = !this.IsChromaChanged);
                        if (!false)
                        {
                            break;
                        }
                        continue;
                    IL_257:
                        this.gumballRestore = false;
                        if (!this.IsEffectChange)
                        {
                            arg_273_0 = !this.IsGraphicsChange;
                            goto IL_272;
                        }
                    IL_271:
                        arg_273_0 = false;
                        goto IL_272;
                    }
                    goto IL_42C;
                }
                flag2 = expr_30C;
                if (!flag2)
                {
                    this.IsChromaChanged = false;
                }
            IL_322:
                this.ChromaGridLeft = 0.0;
                this.ChromaGridTop = 0.0;
                this.ChromaCenterX = 0.0;
                this.ChromaCenterY = 0.0;
                this.ChromaZoomFactor = 0.0;
                this.ChromaBorderPath = string.Empty;
                this.OriginalBorder = string.Empty;
                SearchResult searchResult = null;
                IEnumerator enumerator = Application.Current.Windows.GetEnumerator();
                try
                {
                    while (true)
                    {
                        flag2 = enumerator.MoveNext();
                        if (!flag2)
                        {
                            break;
                        }
                        Window window = (Window)enumerator.Current;
                        flag2 = !(window.Title == "View/Order Station");
                        if (!flag2)
                        {
                            searchResult = (SearchResult)window;
                        }
                    }
                }
                finally
                {
                    IDisposable disposable = enumerator as IDisposable;
                    flag2 = (disposable == null);
                    if (!flag2)
                    {
                        disposable.Dispose();
                    }
                }
                flag2 = (searchResult != null);
                if (!flag2)
                {
                    searchResult = new SearchResult();
                }
                if (RobotImageLoader.GroupImages.Count == 0)
                {
                    arg_430_0 = !(this.IsGoupped == "View All");
                }
                else
                {
                    arg_430_0 = true;
                }
            IL_42C:
                flag2 = arg_430_0;
                if (!flag2)
                {
                    this.IsGoupped = "View Group";
                }
            IL_441:
                searchResult.pagename = "Saveback";
                searchResult.Savebackpid = Convert.ToString(this.PhotoId);

                searchResult.Show();
            //  searchResult.testPageLoad();

            IL_463:
                //  searchResult.LoadWindow();
                searchResult.LoadWindow();
                this.IsImageDirtyState = false;
                base.Hide();
                this.specproductType = null;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
                GC.AddMemoryPressure(10000L);
            }
        }

        public void btnPlaceOrder_Click(object sender, RoutedEventArgs e)
        {
            GC.AddMemoryPressure(10000L);
            bool expr_0D = false;
            bool flag;
            if (!false)
            {
                flag = expr_0D;
            }
            try
            {
                bool flag3;
                while (true)
                {
                    this.CmbProductType.Visibility = Visibility.Collapsed;
                    this.imageundoGrid.IsHitTestVisible = true;
                    PlaceOrder placeOrder = new PlaceOrder();
                    placeOrder.Show();
                    while (true)
                    {
                        placeOrder.LoadProductType(sender);
                        int arg_C0_0;
                        if (!this.isChromaApplied && this.IsGreenRemove)
                        {
                            if (this.MyInkCanvas.Children.Count > 1)
                            {
                                this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                            }
                            arg_C0_0 = this.MyInkCanvas.Strokes.Count;
                            goto IL_BF;
                        }
                    IL_DD:
                        string input = string.Empty;
                        int arg_EF_0 = this.IsGumBall ? 1 : 0;
                        bool flag2;
                        bool arg_11D_0;
                        while (true)
                        {
                            if (arg_EF_0 == (this.gumshowDb ? 1 : 0))
                            {
                                goto IL_103;
                            }
                            this.IsEffectChange = true;
                            if (8 != 0)
                            {
                                goto IL_103;
                            }
                            goto IL_118;
                        IL_119:
                            if (4 != 0)
                            {
                                break;
                            }
                            continue;
                        IL_103:
                            flag2 = false;
                            if (!this.IsGraphicsChange)
                            {
                                arg_11D_0 = ((arg_EF_0 = ((!this.isChromaApplied) ? 1 : 0)) != 0);
                                goto IL_119;
                            }
                        IL_118:
                            arg_11D_0 = ((arg_EF_0 = 0) != 0);
                            goto IL_119;
                        }
                        if (!arg_11D_0)
                        {
                            input = this.SaveXaml(ref flag2);
                        }
                        if (!flag2 && !this.isChromaApplied && !this.gumballRestore)
                        {
                            input = null;
                        }
                        this.gumballRestore = false;
                        if (this.IsEffectChange || this.IsGraphicsChange)
                        {
                            flag = true;
                        }
                        bool arg_188_0 = (this.IsModerate ? (arg_C0_0 = 1) : (arg_C0_0 = ((!this.IsEffectChange) ? 1 : 0))) != 0;
                        if (!false)
                        {
                            if (!arg_188_0)
                            {
                                this.SaveEffectsintoDB();
                            }
                            flag3 = (this.IsModerate || (!this.IsGraphicsChange && !this.IsEffectChange && !this.IsChromaChanged));
                            if (!flag3)
                            {
                                this.SaveChangesToDB(input);
                            }
                            if (!this.isChromaApplied)
                            {
                                break;
                            }
                            if (this.IsChromaChanged)
                            {
                                goto IL_1E8;
                            }
                            if (7 != 0)
                            {
                                goto Block_25;
                            }
                            continue;
                        }
                    IL_BF:
                        if (arg_C0_0 > 0)
                        {
                            this.MyInkCanvas.Strokes.Clear();
                        }
                        goto IL_DD;
                    }
                    if (6 == 0)
                    {
                        goto IL_1F9;
                    }
                    if (!false)
                    {
                        goto Block_27;
                    }
                }
            Block_25:
                bool arg_1F7_0 = !flag;
                goto IL_1E9;
            IL_1E8:
                arg_1F7_0 = false;
            IL_1E9:
                goto IL_1F6;
            Block_27:
                arg_1F7_0 = true;
            IL_1F6:
                flag3 = arg_1F7_0;
            IL_1F9:
                if (!flag3)
                {
                    if (this.IsChromaChanged)
                    {
                        this.IsChromaChanged = false;
                    }
                }
                base.Hide();
            }
            catch (Exception serviceException)
            {
                do
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    base.Hide();
                }
                while (false);
            }
            finally
            {
                do
                {
                    MemoryManagement.FlushMemory();
                }
                while (!true);
                GC.RemoveMemoryPressure(10000L);
            }
        }

        private void btnPreview_Click(object sender, RoutedEventArgs e)
        {
            do
            {
                try
                {
                    UIElement expr_07 = this.CmbProductType;
                    Visibility expr_0C = Visibility.Collapsed;
                    if (true)
                    {
                        expr_07.Visibility = expr_0C;
                    }
                    VisualBrush compiledBitmapImage = null;
                    ClientView clientView;
                    bool flag;
                    bool arg_298_0;
                    TransformGroup transformGroup2;
                    while (3 != 0)
                    {
                        bool? isChecked = this.btnchkpreview.IsChecked;
                        if (isChecked == true)
                        {
                            compiledBitmapImage = new VisualBrush(this.grdpreview);
                        }
                        this.CompileEffectChanged(compiledBitmapImage, -1, (int)this.grdZoomCanvas.ActualHeight, (int)this.grdZoomCanvas.ActualWidth);
                        //  AuditLog.AddUserLog(LoginUser.UserId, 1, "Show resoultion Preview of " + this.PhotoName + " image.", this.PhotoId);
                        PhotoBusiness photoBusiness = new PhotoBusiness();
                        photoBusiness.SetPreviewCounter(this.PhotoId);
                        if (this.isSingleScreenPreview)
                        {
                            clientView = null;
                            if (4 == 0)
                            {
                                continue;
                            }
                            IEnumerator enumerator = Application.Current.Windows.GetEnumerator();
                            try
                            {
                                while (enumerator.MoveNext())
                                {
                                    Window window = (Window)enumerator.Current;
                                    if (window.Title == "ClientView")
                                    {
                                        clientView = (ClientView)window;
                                        break;
                                    }
                                }
                            }
                            finally
                            {
                                IDisposable disposable;
                                if (!false)
                                {
                                    disposable = (enumerator as IDisposable);
                                }
                                flag = (disposable == null);
                                do
                                {
                                    if (!flag)
                                    {
                                        disposable.Dispose();
                                    }
                                }
                                while (false);
                            }
                            if (clientView == null)
                            {
                                clientView = new ClientView();
                            }
                            clientView.FilpFrom = 2;
                            //clientView.btnPrev.Visibility = Visibility.Collapsed;
                            //clientView.btnNext.Visibility = Visibility.Collapsed;
                            //clientView.stkPrint.Visibility = Visibility.Collapsed;
                            isChecked = this.btnchkpreview.IsChecked;
                            int arg_1C1_0;
                            if (isChecked.GetValueOrDefault())
                            {
                                arg_298_0 = ((arg_1C1_0 = (isChecked.HasValue ? 1 : 0)) != 0);
                                if (4 == 0)
                                {
                                IL_298:
                                    if (!arg_298_0)
                                    {
                                        clientView.WindowState = WindowState.Maximized;
                                    }
                                    goto IL_300;
                                }
                                if (!false)
                                {
                                }
                            }
                            else
                            {
                                arg_1C1_0 = 0;
                            }
                            if (arg_1C1_0 != 0)
                            {
                                //clientView.btnMinimize.Visibility = Visibility.Visible;
                                TransformGroup transformGroup = new TransformGroup();
                                transformGroup.Children.Add(new RotateTransform(180.0));
                                transformGroup.Children.Add(new TranslateTransform(this.ContentContainer.ActualWidth, this.ContentContainer.ActualHeight));
                                this.ContentContainer.RenderTransform = transformGroup;
                                if (!false)
                                {
                                    transformGroup2 = new TransformGroup();
                                    transformGroup2.Children.Add(new RotateTransform(180.0));
                                    break;
                                }
                                continue;
                            }
                            else
                            {
                                //clientView.btnMinimize.Visibility = Visibility.Collapsed;
                                TransformGroup transformGroup = new TransformGroup();
                                transformGroup.Children.Add(new RotateTransform(0.0));
                                this.ContentContainer.RenderTransform = transformGroup;
                                if (clientView != null)
                                {
                                   // clientView.img12.RenderTransform = transformGroup;
                                }
                            }
                        IL_300:;
                        }
                        goto IL_363;
                    }
                  //  transformGroup2.Children.Add(new TranslateTransform(clientView.img12.ActualWidth, clientView.img12.ActualHeight));
                  //  clientView.img12.RenderTransform = transformGroup2;
                    flag = (clientView == null);
                    arg_298_0 = flag;
                    // goto IL_298;
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            IL_363:;
            }
            while (7 == 0);
        }

        private void btnPreviousImages_Click(object sender, RoutedEventArgs e)
        {
            this.IsMoreImages = true;
            bool flag = !this.IsImageDirtyState;
            bool arg_23_0 = flag;
            while (!arg_23_0)
            {
                if (false)
                {
                IL_AE:
                IL_AF:
                    goto IL_B0;
                }
                string text = "Do you want to save the effects of the selected image?";
                string caption = "Save Box";
                System.Windows.Forms.MessageBoxButtons buttons = System.Windows.Forms.MessageBoxButtons.YesNo;
                System.Windows.Forms.DialogResult dialogResult = System.Windows.Forms.MessageBox.Show(text, caption, buttons);
                bool expr_55 = arg_23_0 = (dialogResult == System.Windows.Forms.DialogResult.Yes);
                if (!true)
                {
                    continue;
                }
                flag = !expr_55;
                if (false)
                {
                    goto IL_8C;
                }
                if (!flag)
                {
                    this.SaveOnImageChange();
                    goto IL_8C;
                }
                int arg_F2_0;
                int expr_73 = arg_F2_0 = (this.IsChromaChanged ? 1 : 0);
                int arg_F2_1;
                int expr_79 = arg_F2_1 = 0;
                if (expr_79 != 0)
                {
                    goto IL_F2;
                }
                if (expr_73 == expr_79)
                {
                    goto IL_8B;
                }
            IL_84:
                this.CompleteRestore();
            IL_8B:
            IL_8C:
            IL_B0:
                this.IsImageDirtyState = false;
                this.LoadPrevImages();
                if (!this.IsMoreImages)
                {
                    goto IL_134;
                }
                this.BindStrip();
                int expr_E1 = arg_F2_0 = this.lstStrip.Items.Count;
                int expr_E7 = arg_F2_1 = this.NoOfDisplayItem;
                if (!false)
                {
                    arg_F2_0 = ((expr_E1 > expr_E7) ? 1 : 0);
                    arg_F2_1 = 0;
                }
            IL_F2:
                if (arg_F2_0 != arg_F2_1)
                {
                    this.lstStrip.ScrollIntoView(this.lstStrip.Items[this.lstStrip.Items.Count - 1]);
                    if (4 == 0)
                    {
                        goto IL_134;
                    }
                }
                if (false)
                {
                    goto IL_84;
                }
            IL_134:
                this.SetFocus();
                return;
            }
            if (this.IsChromaChanged)
            {
                this.CompleteRestore();
                this.SaveOnImageChange();
                // goto IL_AE;
            }
            // goto IL_AF;
        }

        private void btnPreviousNextimg_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (!false)
                {
                    string arg_1BB_0 = string.Empty;
                    bool flag = false;
                    PhotoInfo photoInfo;
                    PhotoBusiness photoBusiness;
                    do
                    {
                        if (this.IsGraphicsChange)
                        {
                            this.SaveXaml(ref flag);
                        }
                        if (!flag)
                        {
                        }
                        photoInfo = new PhotoInfo();
                        photoBusiness = new PhotoBusiness();
                        if (!(((Button)sender).Name == "btnPreviousimg"))
                        {
                            goto IL_97;
                        }
                        photoInfo = photoBusiness.GetNextPreviousPhoto(this.PhotoId, "P");
                    }
                    while (7 == 0);
                IL_A9:
                    bool arg_C5_0;
                    while (photoInfo != null)
                    {
                        if (true)
                        {
                            arg_C5_0 = string.IsNullOrEmpty(photoInfo.DG_Photos_Effects);
                        IL_C5:
                            if (!arg_C5_0)
                            {
                                this.ImageEffect = photoInfo.DG_Photos_Effects;
                            }
                            else
                            {
                                this.ImageEffect = "<image brightness = '10'  Crop='##' colourvalue = '##' rotatewidth='##' rotateheight='##' rotate='##' flipMode='0' flipModeY='0' _centerx ='0' _centery='0'><effects sharpen='##' greyscale='0' digimagic='0' sepia='0' defog='0' underwater='0' emboss='0' invert = '0' granite='0' hue ='##' cartoon = '0'></effects></image>";
                            }
                            this.PhotoName = photoInfo.DG_Photos_RFID;
                            if (6 != 0)
                            {
                                this.PhotoId = photoInfo.DG_Photos_pkey;
                                RobotImageLoader.PhotoId = this.PhotoName;
                                if (((Button)sender).Name == "btnPreviousimg")
                                {
                                    this.btnNextsimg.IsEnabled = true;
                                }
                                else
                                {
                                    this.btnPreviousimg.IsEnabled = true;
                                }
                                goto IL_154;
                            }
                        IL_19D:
                        IL_1AE:
                            goto IL_1AF;
                        }
                    }
                    MessageBox.Show("End of image list!", "Spectra Photo", MessageBoxButton.OK, MessageBoxImage.Asterisk);
                    bool flag2 = !(((Button)sender).Name == "btnPreviousimg");
                    bool expr_184 = arg_C5_0 = flag2;
                    if (8 == 0)
                    {
                        //  goto IL_C5;
                    }
                    if (!expr_184)
                    {
                        this.btnPreviousimg.IsEnabled = false;
                        // goto IL_19D;
                    }
                    this.btnNextsimg.IsEnabled = false;
                    //goto IL_1AE;
                    goto IL_A9;
                IL_97:
                    photoInfo = photoBusiness.GetNextPreviousPhoto(this.PhotoId, "N");
                    goto IL_A9;
                }
            IL_154:
            IL_1AF:
                this.Window_Loaded(sender, e);
            }
            catch (Exception serviceException)
            {
                if (!false)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
            finally
            {
                do
                {
                    MemoryManagement.FlushMemory();
                }
                while (5 == 0);
            }
        }

        private void btnPrintToGroup_Click(object sender, RoutedEventArgs e)
        {
            bool flag;
            PhotoBusiness photoBusiness;
            if (4 != 0)
            {
                GC.AddMemoryPressure(10000L);
                flag = false;
                photoBusiness = new PhotoBusiness();
            }
            int Location = photoBusiness.GetLocationIdByPhotoId(this.PhotoId);
            LstMyItems lstMyItems = (from t in RobotImageLoader.robotImages
                                     where t.PhotoId == this.PhotoId
                                     select t).FirstOrDefault<LstMyItems>();
            try
            {
                if (!this.IsGreenScreenPrintingEnabled(Location, this.semiOrderProfileId))
                {
                    System.Windows.Controls.Image image = (System.Windows.Controls.Image)this.btnPrintToGroup.Content;
                    if (lstMyItems == null)
                    {
                        lstMyItems = (from t in RobotImageLoader.GroupImages
                                      where t.PhotoId == this.PhotoId
                                      select t).FirstOrDefault<LstMyItems>();
                    }
                    LstMyItems lstMyItems2 = (from t in RobotImageLoader.PrintImages
                                              where t.PhotoId == this.PhotoId
                                              select t).FirstOrDefault<LstMyItems>();
                    if (lstMyItems2 == null)
                    {
                        RobotImageLoader.PrintImages.Add(lstMyItems);
                        if (lstMyItems != null)
                        {
                            lstMyItems.PrintGroup = new BitmapImage(new Uri("/images/print-accept.png", UriKind.Relative));
                        }
                        image.Source = new BitmapImage(new Uri("/images/print-accept.png", UriKind.Relative));
                    }
                    else
                    {
                        RobotImageLoader.PrintImages.Remove(lstMyItems2);
                        image.Source = new BitmapImage(new Uri("/images/print-group.png", UriKind.Relative));
                        if (lstMyItems != null)
                        {
                            if (-1 == 0)
                            {
                                goto IL_317;
                            }
                            lstMyItems.PrintGroup = new BitmapImage(new Uri("/images/print-group.png", UriKind.Relative));
                        }
                    }
                    goto IL_5CA;
                }
                photoBusiness.ResetImageProcessedStatus(this.PhotoId, LoginUser.SubStoreId);
                if (!this.isChromaApplied && this.IsGreenRemove)
                {
                    if (this.MyInkCanvas.Children.Count > 1)
                    {
                        this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                    }
                    if (this.MyInkCanvas.Strokes.Count > 0)
                    {
                        this.MyInkCanvas.Strokes.Clear();
                        if (4 == 0)
                        {
                            goto IL_469;
                        }
                    }
                }
                string input = string.Empty;
                if (this.IsGumBall != this.gumshowDb)
                {
                    this.IsEffectChange = true;
                }
                int arg_270_0 = 0;
                bool flag3;
                bool arg_2EC_0;
                do
                {
                    bool flag2 = arg_270_0 != 0;
                    if (this.IsGraphicsChange || this.isChromaApplied)
                    {
                        input = this.SaveXaml(ref flag2);
                    }
                    if (!flag2 && !this.isChromaApplied)
                    {
                        input = null;
                    }
                    flag3 = (!this.IsEffectChange && !this.IsGraphicsChange);
                    if (8 == 0)
                    {
                        goto IL_4C3;
                    }
                    if (!flag3)
                    {
                        flag = true;
                    }
                    if (this.IsModerate)
                    {
                        goto IL_2EA;
                    }
                    arg_2EC_0 = ((arg_270_0 = ((!this.IsEffectChange) ? 1 : 0)) != 0);
                }
                while (4 == 0);
                goto IL_2EB;
            IL_2EA:
                arg_2EC_0 = true;
            IL_2EB:
                if (!arg_2EC_0)
                {
                    this.SaveEffectsintoDB();
                }
                bool arg_328_0;
                if (this.IsModerate)
                {
                    arg_328_0 = true;
                    goto IL_327;
                }
                bool arg_3A2_0;
                bool expr_302 = arg_3A2_0 = this.IsGraphicsChange;
                if (false)
                {
                    goto IL_3A2;
                }
                if (expr_302 || this.IsEffectChange)
                {
                    arg_328_0 = false;
                    goto IL_323;
                }
            IL_317:
                arg_328_0 = !this.IsChromaChanged;
            IL_323:
            IL_327:
                if (!arg_328_0)
                {
                    this.SaveChangesToDB(input);
                }
                if (this.isChromaApplied && (this.IsChromaChanged || flag))
                {
                    if (this.IsChromaChanged)
                    {
                        this.IsChromaChanged = false;
                    }
                }
                SemiOrderSettings semiOrderSettings = LoginUser.ListSemiOrderSettingsSubStoreWise.Where(delegate (SemiOrderSettings x)
                {
                    int? dG_LocationId = x.PS_LocationId;
                    int location = Location;
                    int expr_5A;
                    while (true)
                    {
                    IL_1B:
                        int arg_34_0 = (dG_LocationId == location) ? 1 : 0;
                        while (true)
                        {
                            while (true)
                            {
                                int arg_54_0;
                                if (arg_34_0 != 0)
                                {
                                    if (false)
                                    {
                                        goto IL_1B;
                                    }
                                    arg_54_0 = (arg_34_0 = ((x.PS_SemiOrder_Settings_Pkey == this.semiOrderProfileId) ? 1 : 0));
                                }
                                else
                                {
                                    arg_54_0 = (arg_34_0 = 0);
                                }
                            IL_50:
                                if (false)
                                {
                                    break;
                                }
                                bool flag4 = arg_54_0 != 0;
                                if (5 != 0)
                                {
                                }
                                expr_5A = (arg_34_0 = (arg_54_0 = (flag4 ? 1 : 0)));
                                if (!false)
                                {
                                    if (6 != 0)
                                    {
                                        return expr_5A != 0;
                                    }
                                    break;
                                }
                                goto IL_50;
                            }
                        }
                    }
                    return expr_5A != 0;
                }).FirstOrDefault<SemiOrderSettings>();
                flag3 = (semiOrderSettings == null);
                arg_3A2_0 = flag3;
            IL_3A2:
                if (arg_3A2_0)
                {
                    goto IL_5C9;
                }
                string[] array = semiOrderSettings.PS_SemiOrder_ProductTypeId.Split(new char[]
                {
            ','
                });
                string[] array2 = array;
                for (int i = 0; i < array2.Length; i++)
                {
                    string value = array2[i];
                    this.AddToPrintQueue(Convert.ToInt32(value));
                }
                this.lstStrip.Items.Refresh();
                this.lstStrip.UpdateLayout();
                int num = this.lstStrip.SelectedIndex;
                int count = this.lstStrip.Items.Count;
                int arg_44D_0;
                int expr_435 = arg_44D_0 = num;
                int arg_44D_1;
                int expr_437 = arg_44D_1 = count;
                LstMyItems lstMyItems3;
                if (3 != 0)
                {
                    if (expr_435 < expr_437 - 1)
                    {
                        arg_44D_0 = num;
                        arg_44D_1 = 1;
                    }
                    else
                    {
                        lstMyItems3 = (LstMyItems)this.lstStrip.Items[num];
                        if (this.IsGumBall && this.gumshowDb)
                        {
                            this.ShowhidePlayerScore(Visibility.Visible);
                            goto IL_52D;
                        }
                        goto IL_4C3;
                    }
                }
                num = arg_44D_0 + arg_44D_1;
                LstMyItems lstMyItems4 = (LstMyItems)this.lstStrip.Items[num];
            IL_469:
                this.EditImage(lstMyItems4.PhotoId, lstMyItems4.Name);
                goto IL_5C8;
            IL_4C3:
                int arg_4D5_0;
                if (this.IsGumBall)
                {
                    arg_4D5_0 = (this.gumshowDb ? 1 : 0);
                }
                else
                {
                    arg_4D5_0 = 1;
                }
            IL_4D1:
                if (arg_4D5_0 == 0)
                {
                    this.ShowhidePlayerScore(Visibility.Collapsed);
                }
                else if (!this.IsGumBall && !this.gumshowDb)
                {
                    this.ShowhidePlayerScore(Visibility.Collapsed);
                }
                else
                {
                    bool arg_51F_0;
                    if (!this.IsGumBall)
                    {
                        arg_51F_0 = ((arg_4D5_0 = ((!this.gumshowDb) ? 1 : 0)) != 0);
                        if (5 == 0)
                        {
                            goto IL_4D1;
                        }
                    }
                    else
                    {
                        arg_51F_0 = true;
                    }
                    if (!arg_51F_0)
                    {
                        this.ShowhidePlayerScore(Visibility.Visible);
                    }
                }
            IL_52D:
                this.LoadNextImageSet(true);
                if (((LstMyItems)this.lstStrip.Items[num]).PhotoId == lstMyItems3.PhotoId)
                {
                    this.lstStrip.SelectedIndex = num;
                    this.lstStrip.ScrollIntoView((LstMyItems)this.lstStrip.Items[num]);
                }
                else
                {
                    lstMyItems4 = (LstMyItems)this.lstStrip.Items[0];
                    this.EditImage(lstMyItems4.PhotoId, lstMyItems4.Name);
                }
            IL_5C8:
            IL_5C9:
            IL_5CA:;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                do
                {
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (4 == 0);
            }
            finally
            {
                MemoryManagement.FlushMemory();
                GC.RemoveMemoryPressure(10000L);
            }
        }

        private void btnrectdecreasecircle_Click(object sender, RoutedEventArgs e)
        {
            this.rectheight = this.greenEraser.Height;
            this.rectewidth = this.greenEraser.Width;
            double arg_46_0 = this.rectewidth;
            bool arg_1E6_0;
            while (arg_46_0 < 10.0)
            {
                if (false)
                {
                    goto IL_AD;
                }
                double expr_50 = arg_46_0 = this.rectheight;
                if (3 == 0)
                {
                    continue;
                }
                int arg_10C_0;
                arg_1E6_0 = ((arg_10C_0 = ((expr_50 < 10.0) ? 1 : 0)) != 0);
            IL_63:
                if (false)
                {
                    goto IL_F3;
                }
            IL_6C:
                bool flag = arg_1E6_0;
                if (!flag)
                {
                    this.greenEraser.Width = this.rectewidth - 5.0;
                    this.greenEraser.Height = this.rectheight - 5.0;
                }
            IL_AD:
                this.rectheight = this.attribute.Height;
                this.rectewidth = this.attribute.Width;
                if (this.rectewidth < 10.0)
                {
                    arg_1E6_0 = ((arg_10C_0 = ((this.rectheight < 10.0) ? 1 : 0)) != 0);
                }
                else
                {
                    if (!false)
                    {
                        arg_1E6_0 = ((arg_10C_0 = 0) != 0);
                        goto IL_105;
                    }
                    goto IL_10D;
                }
            IL_F3:
                if (false || 3 == 0)
                {
                    goto IL_63;
                }
            IL_105:
                if (8 == 0)
                {
                    goto IL_63;
                }
                flag = (arg_10C_0 != 0);
            IL_10D:
                if (!flag)
                {
                    this.attribute.Width = this.rectewidth - 5.0;
                    this.attribute.Height = this.rectheight - 5.0;
                }
                this.greenEraser.Visibility = Visibility.Collapsed;
                this.redeyecirclegreen.Visibility = Visibility.Collapsed;
                this.IsEraserActive = false;
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this.IsEraserDrawRectangleActive = true;
                this.IsEraserDrawEllipseActive = false;
                this.IsGreenCorrection = false;
                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = new MatrixTransform());
                return;
            }
            arg_1E6_0 = false;
            //goto IL_6C;
        }

        private void btnrecteraseMedium_Click(object sender, RoutedEventArgs e)
        {
            this.dragCanvas.AllowDragging = false;
            bool flag = base.IsInitialized;
            if (flag)
            {
                double arg_128_0;
                double expr_32 = arg_128_0 = this._ZoomFactor;
                if (3 == 0)
                {
                    goto IL_11F;
                }
                double arg_128_1;
                double expr_3D = arg_128_1 = 1.0;
                if (3 == 0)
                {
                    goto IL_128;
                }
                bool expr_4C = expr_32 < expr_3D;
                if (3 != 0)
                {
                    flag = expr_4C;
                }
                if (!flag)
                {
                    this.attribute.Width = 50.0 / this._ZoomFactor;
                    this.attribute.Height = 50.0 / this._ZoomFactor;
                }
                else
                {
                    this.attribute.Width = 50.0 * this._ZoomFactor;
                    this.attribute.Height = 50.0 * this._ZoomFactor;
                }
                this.attributeWidth = 50.0;
                this.attributeHeight = 50.0;
                this.UpdateControlVisuals();
                this.rectangularRadio.IsChecked = new bool?(true);
            IL_108:
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
                arg_128_0 = 50.0;
            IL_11F:
                arg_128_1 = 50.0;
            IL_128:
                StylusShape eraserShape = new RectangleStylusShape(arg_128_0, arg_128_1);
                this.MyInkCanvas.EraserShape = eraserShape;
                this.IsEraserDrawRectangleActive = true;
                this.IsEraserDrawEllipseActive = false;
                this.IsGreenCorrection = false;
                if (3 == 0)
                {
                    goto IL_108;
                }
                this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
            }
        }

        private void btnrectincreasecircle_Click(object sender, RoutedEventArgs e)
        {
            // This item is obfuscated and can not be translated.
        }

        private void btnrectsmall_Click(object sender, RoutedEventArgs e)
        {
            DragCanvas expr_06 = this.dragCanvas;
            bool expr_0B = false;
            if (6 != 0)
            {
                expr_06.AllowDragging = expr_0B;
            }
            bool arg_8C_0;
            bool expr_1D0 = arg_8C_0 = base.IsInitialized;
            if (false)
            {
                goto IL_8C;
            }
            bool flag = expr_1D0;
        IL_27:
            if (!flag)
            {
                return;
            }
            flag = !this.IsGreenCorrection;
            bool arg_8A_0;
            bool expr_1F2 = arg_8A_0 = flag;
            if (!false)
            {
                if (!expr_1F2)
                {
                    if (false)
                    {
                        goto IL_13A;
                    }
                    this.fillSize = 100;
                    if (2 == 0)
                    {
                        goto IL_140;
                    }
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    if (true)
                    {
                        return;
                    }
                    goto IL_E6;
                }
                else
                {
                    arg_8A_0 = (this._ZoomFactor < 1.0);
                }
            }
            flag = arg_8A_0;
            arg_8C_0 = flag;
        IL_8C:
            if (!arg_8C_0)
            {
                this.attribute.Width = 150.0 / this._ZoomFactor;
                this.attribute.Height = 150.0 / this._ZoomFactor;
                goto IL_104;
            }
            this.attribute.Width = 150.0 * this._ZoomFactor;
        IL_E6:
            this.attribute.Height = 150.0 * this._ZoomFactor;
        IL_104:
            this.attributeWidth = 150.0;
        IL_113:
            this.attributeHeight = 150.0;
            this.MyInkCanvas.DefaultDrawingAttributes = this.attribute;
            if (8 == 0)
            {
                goto IL_27;
            }
        IL_13A:
            this.UpdateControlVisuals();
        IL_140:
            this.rectangularRadio.IsChecked = new bool?(true);
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
            StylusShape eraserShape = new RectangleStylusShape(this.attribute.Width, this.attribute.Height);
            this.MyInkCanvas.EraserShape = eraserShape;
            this.IsEraserDrawRectangleActive = true;
            this.IsEraserDrawEllipseActive = false;
            this.IsGreenCorrection = false;
            this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
            if (false)
            {
                goto IL_113;
            }
            this.fillSize = 100;
        }

        private void btnrectsmall10_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 10;
                this.rdbSQ7.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = true;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.dragCanvas.AllowDragging = false;
                    this.removebackGround();
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btnrectsmall100_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 150;
                this.rdbSQ2.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3D_0;
                    bool arg_86_0 = arg_3D_0 = this.IsGreenCorrection;
                    int arg_3A_0 = 0;
                    int expr_83;
                    while (true)
                    {
                        int arg_83_0;
                        int expr_3A = arg_83_0 = arg_3A_0;
                        if (expr_3A == 0)
                        {
                            bool expr_3D = (arg_3D_0 ? 1 : 0) == expr_3A;
                            if (8 != 0)
                            {
                                flag = expr_3D;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = true;
                            arg_86_0 = (arg_3D_0 = this.undoEraser);
                            arg_83_0 = 0;
                        }
                        expr_83 = (arg_3A_0 = arg_83_0);
                        if (expr_83 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.dragCanvas.AllowDragging = false;
                    this.removebackGround();
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_86_0 ? 1 : 0) == expr_83);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btnrectsmall15_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 15;
                this.rdbSQ6.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = true;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.dragCanvas.AllowDragging = false;
                    this.removebackGround();
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btnrectsmall150_Click(object sender, RoutedEventArgs e)
        {
            bool flag;
            do
            {
                this.fillSize = 200;
                this.rdbSQ1.IsChecked = new bool?(true);
                flag = !this.IsGreenCorrection;
            }
            while (false);
            if (flag)
            {
                while (true)
                {
                IL_66:
                    this.rectangleEraser = true;
                    flag = !this.undoEraser;
                    while (!flag)
                    {
                        if (-1 == 0)
                        {
                            goto IL_43;
                        }
                        if (!false)
                        {
                            this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                            if (5 != 0)
                            {
                                goto Block_4;
                            }
                            goto IL_66;
                        }
                    }
                    goto IL_9C;
                }
            Block_4:
                return;
            IL_9C:
                this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                return;
            }
        IL_43:
            DragCanvas expr_48 = this.dragCanvas;
            bool expr_4D = false;
            if (!false)
            {
                expr_48.AllowDragging = expr_4D;
            }
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
        }

        private void btnrectsmall25_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 25;
                this.rdbSQ5.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = true;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btnrectsmall5_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 5;
                this.rdbSQ8.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_39_0;
                    bool arg_82_0 = arg_39_0 = this.IsGreenCorrection;
                    int arg_36_0 = 0;
                    int expr_7F;
                    while (true)
                    {
                        int arg_7F_0;
                        int expr_36 = arg_7F_0 = arg_36_0;
                        if (expr_36 == 0)
                        {
                            bool expr_39 = (arg_39_0 ? 1 : 0) == expr_36;
                            if (8 != 0)
                            {
                                flag = expr_39;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = true;
                            arg_82_0 = (arg_39_0 = this.undoEraser);
                            arg_7F_0 = 0;
                        }
                        expr_7F = (arg_36_0 = arg_7F_0);
                        if (expr_7F == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_82_0 ? 1 : 0) == expr_7F);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btnrectsmall50_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 50;
                this.rdbSQ4.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = true;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btnrectsmall75_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = 70;
                this.rdbSQ3.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = true;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            goto Block_4;
                        }
                    }
                    this.dragCanvas.AllowDragging = false;
                    this.removebackGround();
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }
        }

        private void btnRed_Click(object sender, RoutedEventArgs e)
        {
            this._colorfiltereff.FilterColor = Colors.Red;
            while (true)
            {
                if (!false)
                {
                    this.Grdcolorfilter.Effect = this._colorfiltereff;
                }
                if (!false)
                {
                    this.colour = "red";
                    this.color = Colors.Red;
                    if (!false)
                    {
                        break;
                    }
                }
            }
        }

        private void btnredeyeRestore_Click(object sender, RoutedEventArgs e)
        {
            if (!false)
            {
                try
                {
                    this.redEyesPopup();
                    this.btnredeyeRestoreAct.Visibility = Visibility.Visible;
                    VisualStateManager.GoToState(this.RedEye, "Unchecked", true);
                    this.SetRedeye = false;
                    this.ellipse.Visibility = Visibility.Collapsed;
                    this.ForRedeye.Visibility = Visibility.Collapsed;
                    do
                    {
                        new BitmapImage();
                        using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, this.tempfilename)))
                        {
                            BitmapImage bitmapImage = new BitmapImage();
                            MemoryStream memoryStream = new MemoryStream();
                            fileStream.CopyTo(memoryStream);
                            memoryStream.Seek(0L, SeekOrigin.Begin);
                            fileStream.Close();
                            bitmapImage.BeginInit();
                            bitmapImage.StreamSource = memoryStream;
                            bitmapImage.EndInit();
                            this.widthimg.Source = bitmapImage;
                            this.mainImage.Source = bitmapImage;
                            this.imgRotateCrop.Source = bitmapImage;
                            if (!false)
                            {
                                bitmapImage.Freeze();
                            }
                        }
                    }
                    while (7 == 0);
                    PhotoBusiness photoBusiness = new PhotoBusiness();
                    photoBusiness.SaveIsCropedPhotos((long)this.PhotoId, null, "Restore");
                    try
                    {
                        do
                        {
                            bool arg_13A_0;
                            bool expr_12B = arg_13A_0 = File.Exists(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename));
                            if (!false)
                            {
                                bool flag = !expr_12B;
                                arg_13A_0 = flag;
                            }
                            if (!arg_13A_0)
                            {
                                File.Delete(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename));
                            }
                        }
                        while (false);
                    }
                    catch (Exception)
                    {
                        if (!false)
                        {
                        }
                    }
                }
                catch (Exception serviceException)
                {
                    while (6 == 0)
                    {
                    }
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
        }

        private void btnRestore_Click(object sender, RoutedEventArgs e)
        {
            while (true)
            {
                this.effectPopup();
                this.btnRestoreAct.Visibility = Visibility.Visible;
                while (true)
                {
                    this.Noeffect();
                    while (true)
                    {
                        List<string> expr_08 = this.LstGridEffects;
                        string expr_0D = "noeffect";
                        if (7 != 0)
                        {
                            expr_08.Add(expr_0D);
                        }
                        if (false)
                        {
                            return;
                        }
                        this.UncheckEffectsButton();
                        if (3 == 0)
                        {
                            break;
                        }
                        if (!true)
                        {
                            break;
                        }
                        if (!false)
                        {
                            goto Block_3;
                        }
                    }
                }
            }
        Block_3:
            this.EffectLog.Clear();
        }

        private void btnRestoreBrightCont_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                luminosityPopup();
                this.btnLuminosityRestore.Visibility = Visibility.Visible;
                while (true)
                {
                    while (true)
                    {
                        this.GrdBrightness.Effect = null;
                        if (2 == 0)
                        {
                            goto IL_B3;
                        }
                        this.bright = 0.0;
                        if (6 != 0)
                        {
                            this.cont = 1.0;
                            this.currentbrightness = 0.0;
                            this.currentcontrast = 1.0;
                            VisualStateManager.GoToState(this.btnColorEffects, "Unchecked", true);
                            while (!false)
                            {
                                VisualStateManager.GoToState(this.btnDigiMagic, "Unchecked", true);
                                if (5 == 0)
                                {
                                    goto IL_AB;
                                }
                                if (!false)
                                {
                                    goto Block_5;
                                }
                            }
                        }
                    }
                }
            Block_5:
                VisualStateManager.GoToState(this.btnColorEffectsfilters, "Unchecked", true);
            IL_AB:
                this.checkDigimagic = false;
            IL_B3:;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                while (-1 == 0)
                {
                }
            }
        }

        private void btnRestorecolorfilters_Click(object sender, RoutedEventArgs e)
        {
            while (true)
            {
                this.Grdcolorfilter.Effect = null;
                while (true)
                {
                    if (!false)
                    {
                        base.UpdateLayout();
                        while (false)
                        {
                        }
                        this.colour = "restore";
                        this.color = default(System.Windows.Media.Color);
                        VisualStateManager.GoToState(this.btnColorFilters, "Unchecked", true);
                        goto IL_40;
                    }
                IL_47:
                    if (false)
                    {
                        break;
                    }
                    if (!false)
                    {
                        if (true)
                        {
                            return;
                        }
                        continue;
                    }
                IL_40:
                    this.UncheckAllColorFilter();
                    goto IL_47;
                }
            }
        }

        private void btnRestoreGraphics_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                this.templatePopup();
                this.btnRestoreGraphicsAct.Visibility = Visibility.Visible;
                this.CmbProductType.Visibility = Visibility.Collapsed;
                this.jrotate.Angle = 0.0;
                this.elementForContextMenu = null;
                this.RemoveAllGraphicsEffect();
                if (-1 != 0)
                {
                    this.UncheckGraphicsButton();
                    this.IsGraphicsChange = true;
                    this.graphicsBorderApplied = false;
                    this.graphicsCount = 0;
                    this.graphicsframeApplied = false;
                }
                do
                {
                    this.graphicsTextBoxCount = 0;
                    this.lblzoomplus.Content = 100 + " % ";
                    this.selectedborder = string.Empty;
                    this.GrdEffects.Visibility = Visibility.Collapsed;
                    this.jrotate.Visibility = Visibility.Hidden;
                }
                while (false);
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void btnrestoremainimg_Click(object sender, RoutedEventArgs e)
        {
            this.gumshowDb = false;
            CollapsePopUp();
            this.btnrestoremainimgActivate.Visibility = Visibility.Collapsed;
            if (IsRestoreCollage)
            {
                this.Opacitymsk.Visibility = Visibility.Collapsed;
                return;
            }

            this.CompleteRestore();
            bool arg_22_0;
            bool arg_48_0 = arg_22_0 = this.IsImageDirtyState;
            bool expr_4B;
            do
            {
                bool flag;
                if (7 != 0)
                {
                    bool expr_22 = arg_48_0 = !arg_22_0;
                    if (5 != 0)
                    {
                        if (!false)
                        {
                            flag = expr_22;
                        }
                        if (false)
                        {
                            goto IL_51;
                        }
                        if (!flag)
                        {
                            this.SaveOnImageChange();
                        }
                        this.CompleteRestore();
                        if (false)
                        {
                            goto IL_51;
                        }
                        arg_48_0 = this.IsImageDirtyState;
                    }
                }
                flag = !arg_48_0;
                expr_4B = (arg_22_0 = (arg_48_0 = flag));
            }
            while (!true);
            if (expr_4B)
            {
                goto IL_58;
            }
        IL_51:
            this.SaveOnImageChange();
        IL_58:
            this.IsImageDirtyState = false;
            this.IsRestoreRideClick = true;
        }

        private void btnright_Click(object sender, RoutedEventArgs e)
        {
            this.right();
        }

        private void btnRotateclick_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                this.cropPopup();
                this.btnrotateAct.Visibility = Visibility.Visible;
                this.RemoveEnlargeReduce();

                while (true)
                {
                    bool flag = !this.SetRedeye;
                    if (4 == 0 || (!false && !flag))
                    {
                        if (!false)
                        {
                            this.ellipse.Visibility = Visibility.Collapsed;
                            goto IL_26;
                        }
                        goto IL_32;
                    }
                IL_3C:
                    if (false)
                    {
                        goto IL_26;
                    }
                    this.AntiRotate(-1);
                    if (!false)
                    {
                        break;
                    }
                    continue;
                IL_32:
                    this.SetRedeye = false;
                    goto IL_3C;
                IL_26:
                    this.mainImage.Cursor = Cursors.Arrow;
                    goto IL_32;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void btnrotateGraphics_Click(object sender, RoutedEventArgs e)
        {
            this.templatePopup();
            this.btnrotateGraphicsAct.Visibility = Visibility.Visible;
            if (!true)
            {
                goto IL_66;
            }
            UIElement expr_06 = this.CmbProductType;
            Visibility expr_0B = Visibility.Collapsed;
            if (!false)
            {
                expr_06.Visibility = expr_0B;
            }
        IL_14:
            bool arg_34_0;
            bool expr_25 = arg_34_0 = !this.jrotate.IsVisible;
            if (!false)
            {
                bool flag = expr_25;
                arg_34_0 = flag;
            }
            if (!arg_34_0)
            {
                this.jrotate.Visibility = Visibility.Hidden;
                if (8 != 0)
                {
                    this.spRotatepanel.Visibility = Visibility.Hidden;
                    if (-1 != 0)
                    {
                    }
                    return;
                }
                goto IL_6A;
            }
            else
            {
                this.jrotate.Visibility = Visibility.Visible;
            }
        IL_66:
            if (6 == 0)
            {
                goto IL_14;
            }
        IL_6A:
            this.spRotatepanel.Visibility = Visibility.Visible;
        }

        private void btnSearch_Click(object sender, RoutedEventArgs e)
        {
            if (4 != 0)
            {
                bool expr_07 = false;
                bool flag;
                if (!false)
                {
                    flag = expr_07;
                }
                try
                {
                    this.IsGoupped = "View Group";
                    this.CmbProductType.Visibility = Visibility.Collapsed;
                    if (!this.redeffectfirstApplied)
                    {
                        this.GrdRedEyeFirst.Effect = null;
                    }
                    else
                    {
                        flag = true;
                    }
                    if (!this.redeffectsecondApplied)
                    {
                        this.GrdRedEyeSecond.Effect = null;
                    }
                    else
                    {
                        flag = true;
                    }
                    int arg_149_0;
                    if (!this.redeffectmultiple1Applied)
                    {
                        this.GrdRedEyeMultiple.Effect = null;
                    }
                    else
                    {
                        int expr_94 = arg_149_0 = 1;
                        if (expr_94 == 0)
                        {
                            goto IL_149;
                        }
                        flag = (expr_94 != 0);
                    }
                    if (false)
                    {
                        goto IL_22F;
                    }
                    bool arg_242_0;
                    bool expr_A2 = arg_242_0 = this.redeffectmultiple2Applied;
                    if (false)
                    {
                        goto IL_241;
                    }
                    if (!expr_A2)
                    {
                        this.redEyeEffectMultiple.Radius1 = 0.0;
                    }
                    else
                    {
                        flag = true;
                    }
                    if (!this.redeffectmultiple3Applied)
                    {
                        this.redEyeEffectMultiple.Radius2 = 0.0;
                    }
                    else
                    {
                        flag = true;
                    }
                    if (false)
                    {
                        goto IL_32B;
                    }
                    bool arg_1A0_0;
                    bool expr_F8 = arg_1A0_0 = this.redeffectmultiple4Applied;
                    if (-1 == 0)
                    {
                        goto IL_1A0;
                    }
                    if (!expr_F8)
                    {
                        this.GrdRedEyeMultiple1.Effect = null;
                    }
                    else
                    {
                        flag = true;
                    }
                    if (!this.redeffectmultiple5Applied)
                    {
                        this.redEyeEffectMultiple1.Radius1 = 0.0;
                    }
                    else
                    {
                        flag = true;
                    }
                    bool flag2 = this.redeffectmultiple6Applied;
                    arg_149_0 = (flag2 ? 1 : 0);
                IL_149:
                    if (arg_149_0 == 0)
                    {
                        this.redEyeEffectMultiple1.Radius2 = 0.0;
                    }
                    else
                    {
                        flag = true;
                    }
                    this.imageundoGrid.IsHitTestVisible = true;
                    string input = string.Empty;
                    bool flag3 = false;
                    if (this.IsGraphicsChange || this.isChromaApplied)
                    {
                        input = this.SaveXaml(ref flag3);
                    }
                IL_19E:
                    arg_1A0_0 = flag3;
                IL_1A0:
                    if (!arg_1A0_0 && !this.isChromaApplied)
                    {
                        input = null;
                    }
                    if (this.IsEffectChange || this.IsGraphicsChange)
                    {
                        flag = true;
                    }
                    if (!this.IsModerate && this.IsEffectChange)
                    {
                        this.SaveEffectsintoDB();
                    }
                    bool arg_222_0;
                    if (!this.IsModerate)
                    {
                        if (!this.IsGraphicsChange && !this.IsEffectChange)
                        {
                            arg_222_0 = !this.IsChromaChanged;
                        }
                        else
                        {
                            if (false)
                            {
                                goto IL_19E;
                            }
                            arg_222_0 = false;
                        }
                    }
                    else
                    {
                        arg_222_0 = true;
                    }
                    if (!arg_222_0)
                    {
                        this.SaveChangesToDB(input);
                    }
                IL_22F:
                    bool arg_24C_0;
                    if (!this.isChromaApplied)
                    {
                        arg_24C_0 = true;
                        goto IL_24B;
                    }
                    if (this.IsChromaChanged)
                    {
                        arg_24C_0 = false;
                        goto IL_247;
                    }
                    arg_242_0 = flag;
                IL_241:
                    arg_24C_0 = !arg_242_0;
                IL_247:
                IL_24B:
                    if (!arg_24C_0)
                    {
                        if (this.IsChromaChanged)
                        {
                            this.IsChromaChanged = false;
                        }
                    }
                    this.CompileEffectChanged(null, -2, (int)this.grdZoomCanvas.ActualHeight, (int)this.grdZoomCanvas.ActualWidth);
                    Window window = null;
                    foreach (Window window2 in Application.Current.Windows)
                    {
                        if (window2.Title == "Search")
                        {
                            window = (window2 as SearchByPhoto);
                        }
                    }
                    SearchByPhoto searchByPhoto;
                    if (window != null)
                    {
                        searchByPhoto = (SearchByPhoto)window;
                    }
                    else
                    {
                        searchByPhoto = new SearchByPhoto();
                    }
                    searchByPhoto.Show();
                IL_32B:
                    base.Hide();
                    searchByPhoto.LoadData();
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    while (8 == 0)
                    {
                    }
                }
                finally
                {
                    MemoryManagement.FlushMemory();
                }
            }
        }

        private void btnSearchImage_Click(object sender, RoutedEventArgs e)
        {
            this.SearchImages();
            this.CmbProductType.Visibility = Visibility.Collapsed;
        }

        private void btnselect_Click(object sender, RoutedEventArgs e)
        {
            this.cropPopup();
            this.btnselectAct.Visibility = Visibility.Visible;
            this.RemoveEnlargeReduce();
            if (2 != 0)
            {
                this.btnSelectReverse.IsEnabled = true;
                if (this.mainImage.ActualWidth < this.mainImage.ActualHeight)
                {
                    this.CropSize = "6 * 8";
                    try
                    {
                        decimal aspectRatio;
                        while (true)
                        {
                            Button button = (Button)sender;
                            while (true)
                            {
                                aspectRatio = 0.75m;
                                if (button.Tag == null)
                                {
                                    break;
                                }
                                if (!false)
                                {
                                    goto Block_6;
                                }
                            }
                            this.AddCropToElement(this.GrdCrop, false, this.mainImage, aspectRatio);
                            if (!false)
                            {
                                goto IL_B4;
                            }
                        }
                    Block_6:
                        this.AddCropToElement(this.GrdCrop, true, this.mainImage, aspectRatio);
                    IL_B4:
                        this._brOriginal = this._clp.Fill;
                    }
                    catch (Exception serviceException)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                    return;
                }
            }
            this.CropSize = "8 * 6";
            try
            {
                Button button = (Button)sender;
                decimal aspectRatio = 1.33m;
                if (button.Tag != null)
                {
                    this.AddCropToElement(this.GrdCrop, true, this.mainImage, aspectRatio);
                }
                else
                {
                    this.AddCropToElement(this.GrdCrop, false, this.mainImage, aspectRatio);
                }
                this._brOriginal = this._clp.Fill;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void btnSelectCrop3by3_Click(object sender, RoutedEventArgs e)
        {
            this.cropPopup();
            this.btnselectedAct.Visibility = Visibility.Visible;
            this.RemoveEnlargeReduce();
            if (2 != 0)
            {
                this.CropSize = "3 * 3";
                this.btnSelectReverse.IsEnabled = true;
            }
            while (true)
            {
                try
                {
                    while (true)
                    {
                        Button button = (Button)sender;
                        decimal aspectRatio = 1.0m;
                        if (button.Tag == null)
                        {
                            goto IL_71;
                        }
                        if (!false)
                        {
                            this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                            goto IL_8B;
                        }
                    IL_86:
                        if (4 != 0)
                        {
                            goto IL_8B;
                        }
                        continue;
                    IL_71:
                        this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                        goto IL_86;
                    IL_8B:
                        this._brOriginal = this._clp.Fill;
                        if (!false)
                        {
                            break;
                        }
                        goto IL_71;
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (!false)
                {
                    if (true)
                    {
                        return;
                    }
                }
            }
        }

        private void btnSelectCrop4by6_Click(object sender, RoutedEventArgs e)
        {
            this.cropPopup();
            this.btnSelectCrop4by6Act.Visibility = Visibility.Visible;
            this.RemoveEnlargeReduce();
            Button button = (Button)sender;
            this.btnSelectReverse.IsEnabled = true;
            if (this.mainImage.ActualWidth < this.mainImage.ActualHeight)
            {
                this.CropSize = "4 * 6";
                try
                {
                    decimal aspectRatio = 0.66m;
                    bool arg_72_0 = button.Tag == null;
                    bool expr_74;
                    do
                    {
                        bool flag = arg_72_0;
                        expr_74 = (arg_72_0 = flag);
                    }
                    while (false);
                    if (expr_74)
                    {
                        this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                        goto IL_AB;
                    }
                IL_7C:
                    this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                IL_AB:
                    this._brOriginal = this._clp.Fill;
                    if (false)
                    {
                        goto IL_7C;
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
            else
            {
                this.CropSize = "6 * 4";
                try
                {
                    decimal aspectRatio = 1.5m;
                    if (button.Tag != null)
                    {
                        this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                    }
                    else
                    {
                        this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                    }
                    this._brOriginal = this._clp.Fill;
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
        }

        private void btnSelectCrop5by7_Click(object sender, RoutedEventArgs e)
        {
            this.cropPopup();
            this.btnSelectCrop5by7Act.Visibility = Visibility.Visible;
            this.RemoveEnlargeReduce();
            Button button = (Button)sender;
            this.btnSelectReverse.IsEnabled = true;

            if (this.mainImage.ActualWidth < this.mainImage.ActualHeight)
            {
                this.CropSize = "5 * 7";
                try
                {
                    decimal aspectRatio = 0.714m;
                    bool arg_75_0 = button.Tag == null;
                    bool expr_77;
                    do
                    {
                        bool flag = arg_75_0;
                        expr_77 = (arg_75_0 = flag);
                    }
                    while (false);
                    if (expr_77)
                    {
                        this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                        goto IL_AE;
                    }
                IL_7F:
                    this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                IL_AE:
                    this._brOriginal = this._clp.Fill;
                    if (false)
                    {
                        goto IL_7F;
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
            else
            {
                this.CropSize = "7 * 5";
                try
                {
                    decimal aspectRatio = 1.4m;
                    if (button.Tag != null)
                    {
                        this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                    }
                    else
                    {
                        this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                    }
                    this._brOriginal = this._clp.Fill;
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
        }

        private void btnselectEightByEleven_Click(object sender, RoutedEventArgs e)
        {
            this.cropPopup();
            this.btnselect8By11Act.Visibility = Visibility.Visible;
            this.btnSelectReverse.IsEnabled = true;
            this.RemoveEnlargeReduce();
            Button button = (Button)sender;
            if (this.mainImage.ActualWidth < this.mainImage.ActualHeight)
            {
                this.CropSize = "8 * 10";
                try
                {
                    decimal aspectRatio = 0.8m;
                    bool arg_71_0 = button.Tag == null;
                    bool expr_73;
                    do
                    {
                        bool flag = arg_71_0;
                        expr_73 = (arg_71_0 = flag);
                    }
                    while (false);
                    if (expr_73)
                    {
                        this.AddCropToElement(this.GrdCrop, false, this.mainImage, aspectRatio);
                        goto IL_AA;
                    }
                IL_7B:
                    this.AddCropToElement(this.GrdCrop, true, this.mainImage, aspectRatio);
                IL_AA:
                    this._brOriginal = this._clp.Fill;
                    if (false)
                    {
                        goto IL_7B;
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
            else
            {
                this.CropSize = "10 * 8";
                try
                {
                    decimal aspectRatio = 1.25m;
                    if (button.Tag != null)
                    {
                        this.AddCropToElement(this.GrdCrop, true, this.mainImage, aspectRatio);
                    }
                    else
                    {
                        this.AddCropToElement(this.GrdCrop, false, this.mainImage, aspectRatio);
                    }
                    this._brOriginal = this._clp.Fill;
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
        }

        private void btnselectfourBySix_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                decimal aspectRatio;
                do
                {
                    Button button;
                    if (8 != 0)
                    {
                        button = (Button)sender;
                    }
                    aspectRatio = 0.8m;
                    bool arg_C0_0 = button.Tag == null;
                    bool expr_C7;
                    do
                    {
                        bool flag;
                        if (!false)
                        {
                            flag = arg_C0_0;
                        }
                        expr_C7 = (arg_C0_0 = flag);
                    }
                    while (false || false);
                    if (expr_C7)
                    {
                        goto IL_65;
                    }
                }
                while (false);
                this.AddCropToElement(this.GrdCrop, true, this.mainImage, aspectRatio);
            IL_62:
                goto IL_7C;
            IL_65:
                this.AddCropToElement(this.GrdCrop, false, this.mainImage, aspectRatio);
            IL_7C:
                this._brOriginal = this._clp.Fill;
                if (5 == 0)
                {
                    goto IL_62;
                }
            }
            catch (Exception serviceException)
            {
                do
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (false);
            }
        }

        private void btnSelectReverse_Click(object sender, RoutedEventArgs e)
        {
            this.cropPopup();
            this.btnSelectReverseAct.Visibility = Visibility.Visible;
            this.RemoveEnlargeReduce();
            bool arg_659_0 = !(this.CropSize == "8 * 10");
            Button button;
            while (arg_659_0)
            {
                if (this.CropSize == "10 * 8")
                {
                    this.CropSize = "8 * 10";
                    try
                    {
                        button = (Button)sender;
                        decimal aspectRatio = 0.8m;
                        if (button.Tag != null)
                        {
                            this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                        }
                        else
                        {
                            this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                        }
                        this._brOriginal = this._clp.Fill;
                    }
                    catch (Exception serviceException)
                    {
                        if (3 != 0)
                        {
                            string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                            ErrorHandler.ErrorHandler.LogFileWrite(message);
                        }
                    }
                }
                else if (this.CropSize == "6 * 8")
                {
                    this.CropSize = "8 * 6";
                    try
                    {
                        button = (Button)sender;
                        decimal aspectRatio = 1.33m;
                        if (button.Tag != null)
                        {
                            this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                        }
                        else
                        {
                            this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                        }
                        this._brOriginal = this._clp.Fill;
                    }
                    catch (Exception serviceException)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                }
                else if (this.CropSize == "8 * 6")
                {
                    this.CropSize = "6 * 8";
                    try
                    {
                        button = (Button)sender;
                        decimal aspectRatio = 0.75m;
                        if (button.Tag != null)
                        {
                            this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                        }
                        else
                        {
                            this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                        }
                        this._brOriginal = this._clp.Fill;
                    }
                    catch (Exception serviceException)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                }
                else if (this.CropSize == "4 * 6")
                {
                    this.CropSize = "6 * 4";
                    try
                    {
                        button = (Button)sender;
                        decimal aspectRatio = 1.5m;
                        if (button.Tag != null)
                        {
                            this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                        }
                        else
                        {
                            this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                        }
                        do
                        {
                            this._brOriginal = this._clp.Fill;
                        }
                        while (false);
                    }
                    catch (Exception serviceException)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                }
                else if (this.CropSize == "6 * 4")
                {
                    this.CropSize = "4 * 6";
                    try
                    {
                        button = (Button)sender;
                        decimal aspectRatio = 0.66m;
                        if (button.Tag != null)
                        {
                            this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                        }
                        else
                        {
                            this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                        }
                        this._brOriginal = this._clp.Fill;
                    }
                    catch (Exception serviceException)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                }
                else if (this.CropSize == "5 * 7")
                {
                    this.CropSize = "7 * 5";
                    try
                    {
                        button = (Button)sender;
                        decimal aspectRatio;
                        if (7 != 0)
                        {
                            aspectRatio = 1.4m;
                        }
                        if (button.Tag != null)
                        {
                            this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                        }
                        else
                        {
                            this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                        }
                        this._brOriginal = this._clp.Fill;
                    }
                    catch (Exception serviceException)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        if (!false)
                        {
                            ErrorHandler.ErrorHandler.LogFileWrite(message);
                        }
                    }
                }
                else
                {
                    bool flag = !(this.CropSize == "7 * 5");
                    bool expr_4F7 = arg_659_0 = flag;
                    if (false)
                    {
                        continue;
                    }
                    if (!expr_4F7)
                    {
                        this.CropSize = "5 * 7";
                        try
                        {
                            button = (Button)sender;
                            decimal aspectRatio = 0.714m;
                            if (button.Tag != null)
                            {
                                this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                            }
                            else
                            {
                                this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                            }
                            this._brOriginal = this._clp.Fill;
                        }
                        catch (Exception serviceException)
                        {
                            string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                            ErrorHandler.ErrorHandler.LogFileWrite(message);
                        }
                        if (!false)
                        {
                        }
                    }
                    else if (this.CropSize == "3 * 3")
                    {
                        if (!false)
                        {
                            this.CropSize = "3 * 3";
                            try
                            {
                                button = (Button)sender;
                                decimal aspectRatio = 1.0m;
                                if (button.Tag != null)
                                {
                                    this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                                }
                                else
                                {
                                    this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                                }
                                this._brOriginal = this._clp.Fill;
                            }
                            catch (Exception serviceException)
                            {
                                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                                ErrorHandler.ErrorHandler.LogFileWrite(message);
                            }
                        }
                    }
                }
                return;
            }
            this.CropSize = "10 * 8";
            try
            {
                Button expr_3A = (Button)sender;
                if (!false)
                {
                    button = expr_3A;
                }
                decimal aspectRatio = 1.25m;
                if (button.Tag != null)
                {
                    this.AddCropToElement(this.Grdcartoonize, true, this.mainImage, aspectRatio);
                }
                else
                {
                    this.AddCropToElement(this.Grdcartoonize, false, this.mainImage, aspectRatio);
                }
                this._brOriginal = this._clp.Fill;
            }
            catch (Exception serviceException)
            {
                if (8 != 0)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (false)
                {
                }
            }
        }

        private void RemoveEnlargeReduce()
        {
            bool arg_14_0;
            arg_14_0 = (this.grdZoomCanvas.Visibility == Visibility.Collapsed);
            if (!arg_14_0)
            {
                this.grdZoomCanvas.Visibility = Visibility.Collapsed;
                this.GrdRotateCropParent.Visibility = Visibility.Visible;
            }
        }

        private void btnSendtoBack_Click(object sender, RoutedEventArgs e)
        {
            while (true)
            {
                this.CmbProductType.Visibility = Visibility.Collapsed;
                this.GrdSubGraphics.Visibility = Visibility.Collapsed;
                while (!false)
                {
                    if (7 == 0)
                    {
                        return;
                    }
                    bool arg_23_0;
                    bool expr_1A = arg_23_0 = (this.elementForContextMenu == null);
                    if (!false)
                    {
                        bool flag = expr_1A;
                        arg_23_0 = flag;
                    }
                    if (arg_23_0)
                    {
                        return;
                    }
                    if (6 != 0)
                    {
                        goto Block_4;
                    }
                }
            }
        Block_4:
            if (3 != 0)
            {
                this.dragCanvas.SendToBack(this.elementForContextMenu);
            }
        }

        private void btnSepia_Click(object sender, RoutedEventArgs e)
        {
            this.effectPopup();
            this.btnSepiaAct.Visibility = Visibility.Visible;
            this.Sepia();
            this.LstGridEffects.Add("sepia");
        }

        private void SharpnessPlus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                try
                {
                    this.effectPopup();
                    this.btnSharpenAct.Visibility = Visibility.Visible;
                    if (false)
                    {
                        goto IL_65;
                    }
                IL_05:
                    this.sharpen += 0.025;
                IL_23:
                    this._sharpeff.Strength = this.sharpen;
                    this._sharpeff.PixelWidth = 0.0015;
                    this._sharpeff.PixelHeight = 0.0015;
                IL_65:
                    this.GrdSharpen.Effect = this._sharpeff;
                    if (-1 == 0)
                    {
                        goto IL_05;
                    }
                    this._Sharepen = this.sharpen.ToString();
                    if (false)
                    {
                        goto IL_23;
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (7 == 0 || false)
                {
                }
            }
            finally
            {
                this.EffectLogOperation(new LogEffect
                {
                    effvalue = this.sharpen,
                    optname = "sharpen"
                });
            }
            if (6 != 0)
            {
            }

        }

        private void SharpnessMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                try
                {
                    this.effectPopup();
                    this.btnSharpenAct.Visibility = Visibility.Visible;
                    if (false)
                    {
                        goto IL_65;
                    }
                IL_05:
                    if (this.sharpen > 0)
                        this.sharpen -= 0.025;
                    IL_23:
                    this._sharpeff.Strength = this.sharpen;
                    this._sharpeff.PixelWidth = 0.0015;
                    this._sharpeff.PixelHeight = 0.0015;
                IL_65:
                    this.GrdSharpen.Effect = this._sharpeff;
                    if (-1 == 0)
                    {
                        goto IL_05;
                    }
                    this._Sharepen = this.sharpen.ToString();
                    if (false)
                    {
                        goto IL_23;
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (7 == 0 || false)
                {
                }
            }
            finally
            {
                this.EffectLogOperation(new LogEffect
                {
                    effvalue = this.sharpen,
                    optname = "sharpen"
                });
            }
            if (6 != 0)
            {
            }
        }
        private void btnSharpen_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                try
                {
                    this.effectPopup();
                    this.btnSharpenAct.Visibility = Visibility.Visible;
                    if (false)
                    {
                        goto IL_65;
                    }
                IL_05:
                    this.sharpen += 0.025;
                IL_23:
                    this._sharpeff.Strength = this.sharpen;
                    this._sharpeff.PixelWidth = 0.0015;
                    this._sharpeff.PixelHeight = 0.0015;
                IL_65:
                    this.GrdSharpen.Effect = this._sharpeff;
                    if (-1 == 0)
                    {
                        goto IL_05;
                    }
                    this._Sharepen = this.sharpen.ToString();
                    if (false)
                    {
                        goto IL_23;
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (7 == 0 || false)
                {
                }
            }
            finally
            {
                this.EffectLogOperation(new LogEffect
                {
                    effvalue = this.sharpen,
                    optname = "sharpen"
                });
            }
            if (6 != 0)
            {
            }
        }

        private void btnSkblue_Click(object sender, RoutedEventArgs e)
        {
            this.color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FF7CF5F5");
            this._colorfiltereff.FilterColor = this.color;
            this.Grdcolorfilter.Effect = this._colorfiltereff;
            this.colour = "skyblue";
        }

        private void btnSQBig_Click(object sender, RoutedEventArgs e)
        {
            this.dragCanvas.AllowDragging = false;
            bool arg_276_0 = this.IsEraserActive;
            while (true)
            {
                bool flag = arg_276_0;
                if (!false)
                {
                    if (!flag)
                    {
                        this.greenEraser.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        this.greenEraser.Visibility = Visibility.Collapsed;
                        if (true)
                        {
                            this.redeyecirclegreen.Visibility = Visibility.Collapsed;
                            if (!false)
                            {
                                this.IsEraserActive = false;
                                this.IsEraserDrawEllipseActive = false;
                                this.IsEraserDrawRectangleActive = false;
                                this.IsGreenCorrection = false;
                                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = new MatrixTransform());
                                goto IL_E3;
                            }
                            goto IL_134;
                        }
                    }
                    this.redeyecirclegreen.Visibility = Visibility.Visible;
                    this.IsEraserActive = true;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
                    this.IsGreenCorrection = false;
                    if (5 == 0)
                    {
                        goto IL_217;
                    }
                IL_E3:
                    this.squre.Visibility = Visibility.Hidden;
                    goto IL_F0;
                }
                goto IL_1D6;
            IL_148:
                bool arg_149_0;
                if (!arg_149_0)
                {
                    this.greenEraser.Width = this.rectewidth - 5.0;
                    this.greenEraser.Height = this.rectheight - 5.0;
                }
                this.rectheight = this.attribute.Height;
                this.rectewidth = this.attribute.Width;
                int arg_1D5_0;
                arg_276_0 = (((this.rectewidth >= 10.0) ? (arg_1D5_0 = 0) : (arg_1D5_0 = ((this.rectheight < 10.0) ? 1 : 0))) != 0);
                if (true)
                {
                    flag = (arg_1D5_0 != 0);
                    goto IL_1D6;
                }
                continue;
            IL_134:
                arg_149_0 = (this.rectheight < 10.0);
                goto IL_148;
            IL_F0:
                this.mainImage.Cursor = Cursors.Arrow;
                this.rectheight = this.greenEraser.Height;
                this.rectewidth = this.greenEraser.Width;
                if (this.rectewidth < 10.0)
                {
                    goto IL_134;
                }
                arg_149_0 = false;
                goto IL_148;
            IL_1DA:
                if (false)
                {
                    goto IL_F0;
                }
                this.attribute.Width = this.rectewidth - 5.0;
                this.attribute.Height = this.rectheight - 5.0;
            IL_219:
                this.greenEraser.Visibility = Visibility.Collapsed;
                this.redeyecirclegreen.Visibility = Visibility.Collapsed;
                this.IsEraserActive = false;
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                if (!false)
                {
                    break;
                }
                goto IL_1DA;
            IL_217:
                goto IL_219;
            IL_1D6:
                if (!flag)
                {
                    goto IL_1DA;
                }
                goto IL_219;
            }
            this.IsEraserDrawRectangleActive = true;
            this.IsEraserDrawEllipseActive = false;
            this.IsGreenCorrection = false;
        }

        private void btnStartMove_Click(object sender, RoutedEventArgs e)
        {
            this.dragCanvas.AllowDragging = true;
            while (true)
            {
                UIElement expr_0E = this.dragCanvas;
                bool expr_13 = true;
                if (!false)
                {
                    expr_0E.IsEnabled = expr_13;
                }
                this.IsGreenCorrection = false;
                while (true)
                {
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    this.IsEraserActive = false;
                    this.IsEraserDrawEllipseActive = false;
                    if (false)
                    {
                        break;
                    }
                    this.IsEraserDrawRectangleActive = false;
                    if (5 != 0)
                    {
                        return;
                    }
                }
            }
        }

        private void btnThumbnails_Click(object sender, RoutedEventArgs e)
        {
            if (4 != 0)
            {
                this.CmbProductType.Visibility = Visibility.Collapsed;
                this.jrotate.Visibility = Visibility.Hidden;
                goto IL_1C;
            }
            do
            {
            IL_39:
                this.lstBackground.Visibility = Visibility.Collapsed;
            }
            while (8 == 0);
            if (!false)
            {
                this.lstStrip.Visibility = Visibility.Visible;
                this.GrdEffects.Visibility = Visibility.Visible;
                goto IL_66;
            }
            goto IL_66;
        IL_1C:
            this.lstFrame.Visibility = Visibility.Collapsed;
            if (4 != 0)
            {
                this.lstGraphics.Visibility = Visibility.Collapsed;
                //  goto IL_39;
            }
        IL_66:
            if (!false)
            {
                return;
            }
            goto IL_1C;
        }

        private void btntoolscolorfilter_Click(object sender, RoutedEventArgs e)
        {
            if (true)
            {
                this.GrdsubColorFilters.Visibility = Visibility.Collapsed;
            }
            bool arg_71_0;
            bool flag;
            if (!false)
            {
                this.GrdsubCrop.Visibility = Visibility.Hidden;
                this.ColorEffectsIMG.Visibility = Visibility.Collapsed;
                this.IMGFrame.Visibility = Visibility.Visible;
                bool expr_6A = arg_71_0 = !(this.currentcolor == (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#00000000"));
                if (3 != 0)
                {
                    flag = expr_6A;
                    goto IL_70;
                }
                goto IL_71;
            }
            do
            {
            IL_85:
                this.color = this.currentcolor;
            }
            while (5 == 0);
            this._colorfiltereff.FilterColor = this.color;
            this.Grdcolorfilter.Effect = this._colorfiltereff;
            goto IL_B7;
        IL_70:
            arg_71_0 = flag;
        IL_71:
            if (!arg_71_0)
            {
                this.Grdcolorfilter.Effect = null;
                goto IL_BC;
            }
        // goto IL_85;
        IL_B7:
            if (false)
            {
                goto IL_70;
            }
        IL_BC:
            this.EnableSideButton();
            if (!false)
            {
                return;
            }
            goto IL_B7;
        }

        private void btntoolsgreenscreen_Click(object sender, RoutedEventArgs e)
        {
            this.GrdsubGreenScreen.Visibility = Visibility.Hidden;
            UIElement expr_17 = this.mainImage;
            bool expr_1C = false;
            if (-1 != 0)
            {
                DragCanvas.SetCanBeDragged(expr_17, expr_1C);
            }
            DragCanvas.SetCanBeDragged(this.Opacitymsk, false);
            this.dragCanvas.AllowDragging = true;
            this.dragCanvas.IsEnabled = true;
            this.greenEraser.Visibility = Visibility.Collapsed;
            this.squre.Visibility = Visibility.Hidden;
            this.mainImage.Cursor = Cursors.Arrow;
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
            this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = new MatrixTransform());
            this.IsEraserActive = false;
            this.IsEraserDrawEllipseActive = false;
            this.IsEraserDrawRectangleActive = false;
            this.IsGreenCorrection = false;
            this._ZoomFactor = 1.0;
            this._maxZoomFactor = 4.0;
            this.zoomTransform.ScaleX = this._ZoomFactor;
            this.zoomTransform.ScaleY = this._ZoomFactor;
            this.GrdEffects.Visibility = Visibility.Collapsed;
            this.lstBackground.Visibility = Visibility.Collapsed;
        }

        private void btntoolsredeye_Click(object sender, RoutedEventArgs e)
        {
            //this.PopupButton.IsChecked = false;
            this.GrdsubRedEye.Visibility = Visibility.Hidden;
            // this.GrdsubRedEye1.Visibility = Visibility.Hidden;
            this.GrdFirst.Visibility = Visibility.Visible;
            if (false)
            {
                goto IL_E0;
            }
            this.ellipse.Visibility = Visibility.Collapsed;
            if (false)
            {
                goto IL_101;
            }
            this.RedeyePreview.Visibility = Visibility.Collapsed;
        IL_3F:
            this.mainImage.Cursor = Cursors.Arrow;
            this.SetRedeye = false;
            this.dragCanvas.IsEnabled = false;
            bool arg_74_0;
            bool expr_6A = arg_74_0 = this.redeffectfirstApplied;
            bool flag;
            if (!false)
            {
                flag = expr_6A;
                arg_74_0 = flag;
            }
            if (!arg_74_0)
            {
                this.GrdRedEyeFirst.Effect = null;
            }
            if (!this.redeffectsecondApplied)
            {
                this.GrdRedEyeSecond.Effect = null;
            }
            if (!this.redeffectmultiple1Applied)
            {
                this.GrdRedEyeMultiple.Effect = null;
            }
            flag = this.redeffectmultiple2Applied;
            bool arg_121_0;
            bool expr_BE = arg_121_0 = flag;
            if (4 == 0)
            {
                goto IL_121;
            }
            if (!expr_BE)
            {
                if (false)
                {
                    goto IL_119;
                }
                if (false)
                {
                    goto IL_10D;
                }
                this.redEyeEffectMultiple.Radius1 = 0.0;
            }
        IL_E0:
            if (!this.redeffectmultiple3Applied)
            {
                this.redEyeEffectMultiple.Radius2 = 0.0;
            }
        IL_101:
            if (this.redeffectmultiple4Applied)
            {
                goto IL_11B;
            }
        IL_10D:
            this.GrdRedEyeMultiple1.Effect = null;
        IL_119:
        IL_11B:
            arg_121_0 = this.redeffectmultiple5Applied;
        IL_121:
            flag = arg_121_0;
            if (!false)
            {
                if (!flag)
                {
                    this.redEyeEffectMultiple1.Radius1 = 0.0;
                }
                if (!this.redeffectmultiple6Applied)
                {
                    this.redEyeEffectMultiple1.Radius2 = 0.0;
                }
                return;
            }
            goto IL_3F;
        }

        private void btnUnderWater_Click(object sender, RoutedEventArgs e)
        {
            this.effectPopup();
            this.btnUnderWaterAct.Visibility = Visibility.Visible;
            this.UnderWater();
            this.LstGridEffects.Add("underwater");
        }

        private void btnundo_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                CollapsePopUp();
                this.btnundoActivate.Visibility = Visibility.Visible;
                bool flag = !this.SetRedeye;
                if (8 != 0)
                {
                    if (flag)
                    {
                        goto IL_3C;
                    }
                }
            IL_15:
                this.ellipse.Visibility = Visibility.Collapsed;
            IL_21:
                if (false)
                {
                    goto IL_15;
                }
                this.mainImage.Cursor = Cursors.Arrow;
            IL_30:
                if (7 == 0)
                {
                    goto IL_21;
                }
                this.SetRedeye = false;
            IL_3C:
                this.Undo();
                if (false)
                {
                    goto IL_30;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                if (!false)
                {
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
        }

        private void btnUndoTemplate_Click(object sender, RoutedEventArgs e)
        {
            
            IEnumerator enumerator = this.dragCanvas.Children.GetEnumerator();
            while (enumerator.MoveNext())
            {
                UIElement uIElement = (UIElement)enumerator.Current;
                if (!(uIElement is Grid))
                {
                    if (!(uIElement is Ellipse))
                    {
                        if (uIElement is System.Windows.Controls.TextBox)
                        {
                            this.dragCanvas.Children.Remove(uIElement);
                            return;
                        }
                        
                    }
                }
            }

            string str = "";
            int count = 0;
        }

        private void btnundocoloreffects_Click(object sender, RoutedEventArgs e)
        {
            this.effectPopup();
            this.btnundocoloreffectsAct.Visibility = Visibility.Visible;
            this.UndoEffect();
        }

        private void btnup_Click(object sender, RoutedEventArgs e)
        {
            this.up();
        }

        private void btnViewGroup_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                do
                {
                    this.CmbProductType.Visibility = Visibility.Collapsed;
                    if (RobotImageLoader.GroupImages.Count <= 0)
                    {
                        break;
                    }
                    SearchResult searchResult = null;
                    bool flag;
                    // using (IEnumerator enumerator = Application.Current.Windows.GetEnumerator())
                    IEnumerator enumerator = Application.Current.Windows.GetEnumerator();
                    try
                    {

                        while (true)
                        {
                        IL_80:
                            flag = enumerator.MoveNext();
                            while (flag)
                            {
                                Window window = (Window)enumerator.Current;
                                while (true)
                                {
                                    flag = !(window.Title == "View/Order Station");
                                    if (flag)
                                    {
                                        break;
                                    }
                                    if (!false)
                                    {
                                        goto Block_9;
                                    }
                                }
                            IL_7C:
                                if (6 != 0)
                                {
                                    goto IL_80;
                                }
                                continue;
                            Block_9:
                                searchResult = (SearchResult)window;
                                goto IL_7C;
                            }
                            break;
                        }
                    }
                    catch
                    {
                    }
                    finally
                    {
                    }
                    if (false)
                    {
                        break;
                    }
                    flag = (searchResult != null);
                    do
                    {
                        if (!flag)
                        {
                            searchResult = new SearchResult();
                        }
                        if (2 != 0)
                        {
                            searchResult.pagename = "MainGroup";
                            searchResult.Show();
                            searchResult.LoadWindow();
                        }
                    }
                    while (false);
                    searchResult.PreviewPhoto();
                    base.Hide();
                }
                while (false);
            }
            catch (Exception)
            {
            }
        }

        private void btnYellow_Click(object sender, RoutedEventArgs e)
        {
            this.color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFFFFF96");
            this._colorfiltereff.FilterColor = this.color;
            this.Grdcolorfilter.Effect = this._colorfiltereff;
            this.colour = "yellow";
        }

        private void bttnLogin_Enter(object sender, KeyEventArgs e)
        {
            if (4 != 0)
            {
                bool arg_0C_0 = e.Key == Key.Return;
                bool arg_18_0;
                do
                {
                    bool expr_0C = arg_0C_0 = (arg_18_0 = !arg_0C_0);
                    if (!false)
                    {
                        bool flag = expr_0C;
                        arg_18_0 = (arg_0C_0 = flag);
                    }
                }
                while (3 == 0);
                if (!arg_18_0)
                {
                    if (6 != 0 && !false)
                    {
                        this.SearchImages();
                    }
                }
            }
        }

        /// <summary>
        /// Use for graphic text created by jayendra
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnGraphicsText_Click(object sender, RoutedEventArgs e)
        {
            // this.PopupButton.IsChecked = true;
            templatePopup();
            this.GrdSubGraphics.Visibility = Visibility.Visible;
            this.btnGraphicsTextAct.Visibility = Visibility.Visible;
            this.CmbProductType.Visibility = Visibility.Collapsed;
            this.elementForContextMenu = null;
            this.jrotate.Visibility = Visibility.Hidden;
            TextBox textBox = new TextBox();
            textBox.ContextMenu = this.dragCanvas.ContextMenu;

            textBox.Foreground = new SolidColorBrush((System.Windows.Media.Color)System.Windows.Media.ColorConverter.
                ConvertFromString(this.CmbColor.SelectedValue.ToString()));
            textBox.Background = new SolidColorBrush(Colors.Transparent);
            textBox.FontWeight = FontWeights.Bold;
            if (string.IsNullOrEmpty(this.CmbFontSize.Text))
                this.CmbFontSize.Text = "20.0";
            textBox.FontSize = Convert.ToDouble(this.CmbFontSize.Text);//20.0;
                                                                       // this.CmbFontSize.SelectedIndex = 6;
                                                                       // this.cmbFont.SelectedIndex = 0;
            do
            {
                //   this.CmbColor.SelectedIndex = 0;
                textBox.FontFamily = (System.Windows.Media.FontFamily)new FontFamilyConverter().ConvertFromString(cmbFont.Text);//"Arial");
                                                                                                                                //textBox.Text = "Enter Text...";
                                                                                                                                //textBox.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                                                                                                                                //textBox.Uid = "txtblock";
                                                                                                                                //textBox.BorderBrush = null;

                //  textBox.Text = this.txtContent.Text;  comment by jayendra
                textBox.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                textBox.Uid = this.txtContent.Uid;
                textBox.BorderBrush = null;

                textBox.Style = (Style)base.FindResource("SearchIDTB");
            }
            while (false);
            RotateTransform renderTransform = new RotateTransform();
            textBox.RenderTransform = renderTransform;
            textBox.MouseLeftButtonUp += new MouseButtonEventHandler(this.SelectObject);
            textBox.LostFocus += new RoutedEventHandler(this.txtContent_LostFocus);
            textBox.GotFocus += new RoutedEventHandler(this.txtContent_GotFocus);
            textBox.TextChanged += new TextChangedEventHandler(this.txtTest_TextChanged);
            //this.txtContent.Text = textBox.Text;
            this.dragCanvas.Children.Add(textBox);

            Canvas.SetLeft(textBox, this.GrdBrightness.ActualWidth / 2.0);
            Canvas.SetTop(textBox, this.GrdBrightness.ActualHeight / 2.0);
            Panel.SetZIndex(textBox, 4);
            this.txtContent.Focus();
            VisualStateManager.GoToState(this.btnGraphicsText, "Checked", true);
            VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
            this.graphicsTextBoxCount++;
            this.GrdEffects.Visibility = Visibility.Collapsed;
        }

       
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            //this.PopupButton.IsChecked = true;
            string str = this.txtContent.ToString();
            if (str != "")
            {
                this.CmbProductType.Visibility = Visibility.Collapsed;
                this.elementForContextMenu = null;
                this.jrotate.Visibility = Visibility.Hidden;
                TextBox textBox = new TextBox();
                textBox.ContextMenu = this.dragCanvas.ContextMenu;
                
                //this.Content = "Add";
                //textBox.Foreground = new SolidColorBrush((System.Windows.Media.Color)System.Windows.Media.ColorConverter.
                //    ConvertFromString(this.CmbColor.SelectedValue.ToString()));

                textBox.Foreground = this.txtContent.Foreground;

                textBox.Background = new SolidColorBrush(Colors.Transparent);
                textBox.FontWeight = FontWeights.Bold;
                if (string.IsNullOrEmpty(this.CmbFontSize.Text))
                    this.CmbFontSize.Text = "20.0";
                //jayendra
                // textBox.FontSize = Convert.ToDouble(this.CmbFontSize.Text);//20.0;
                if (this.CmbFontSize.Text != "11")
                {
                    textBox.FontSize = Convert.ToDouble(this.CmbFontSize.Text);//20.0;
                }
                else
                {
                    textBox.FontSize = txtContent.FontSize;
                }
                ///////// 
                // this.CmbFontSize.SelectedIndex = 6;
                // this.cmbFont.SelectedIndex = 0;
                do
                {
                    //   this.CmbColor.SelectedIndex = 0;
                    textBox.FontFamily = (System.Windows.Media.FontFamily)new FontFamilyConverter().ConvertFromString(cmbFont.Text);//"Arial");
                     //textBox.Text = "Enter Text...";
                     //textBox.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                     //textBox.Uid = "txtblock";
                     //textBox.BorderBrush = null;

                    textBox.Text = this.txtContent.Text;
                    textBox.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                    textBox.Uid = this.txtContent.Uid;
                    textBox.BorderBrush = null;

                    textBox.Style = (Style)base.FindResource("SearchIDTB");
                }
                while (false);
                RotateTransform renderTransform = new RotateTransform();
                textBox.RenderTransform = renderTransform;
                textBox.MouseLeftButtonUp += new MouseButtonEventHandler(this.SelectObject);
                textBox.LostFocus += new RoutedEventHandler(this.txtContent_LostFocus);
                textBox.GotFocus += new RoutedEventHandler(this.txtContent_GotFocus);
                textBox.TextChanged += new TextChangedEventHandler(this.txtTest_TextChanged);
                //this.txtContent.Text = textBox.Text;
                lstBox.Add(textBox);
                this.dragCanvas.Children.Add(textBox);

                Canvas.SetLeft(textBox, this.GrdBrightness.ActualWidth / 2.0);
                Canvas.SetTop(textBox, this.GrdBrightness.ActualHeight / 2.0);
                Panel.SetZIndex(textBox, 4);
                this.txtContent.Focus();
                VisualStateManager.GoToState(this.btnGraphicsText, "Checked", true);
                VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                this.graphicsTextBoxCount++;
                this.GrdEffects.Visibility = Visibility.Collapsed;
                this.txtContent.Text = "";
            }
            //else
            //{
            //    this.txtContent.Text = null;
            //}

        }

        private void Button_Click_BlockErase(object sender, RoutedEventArgs e)
        {
            if (true)
            {
                this.squre.Visibility = Visibility.Hidden;
            }
            this.GrdGreenScreenDefault.IsHitTestVisible = true;
            this.undoEraser = false;
            this.IsGreenCorrection = false;
            this.rectangleEraser = false;
            bool arg_7A_0;
            bool expr_F4 = arg_7A_0 = base.IsLoaded;
            if (false)
            {
                goto IL_79;
            }
            int arg_80_0;
            if (expr_F4)
            {
                if (3 != 0)
                {
                    arg_7A_0 = (this.rdbForgroundGreen.IsChecked == true);
                    goto IL_79;
                }
                goto IL_99;
            }
            else
            {
                arg_80_0 = 1;
            }
            bool expr_81;
            do
            {
            IL_7F:
                bool flag = arg_80_0 != 0;
                expr_81 = (arg_7A_0 = ((arg_80_0 = (flag ? 1 : 0)) != 0));
                if (!true)
                {
                    goto IL_79;
                }
            }
            while (false);
            if (!expr_81)
            {
                this.IsInverseEraseActive = false;
                this.IsBlockEraseActive = true;
                goto IL_99;
            }
            return;
        IL_79:
            arg_80_0 = ((!arg_7A_0) ? 1 : 0);
        //goto IL_7F;
        IL_99:
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
            do
            {
                this.mainImage.Cursor = Cursors.Cross;
            }
            while (false);
        }

        private void Button_Click_Brush(object sender, RoutedEventArgs e)
        {
            while (true)
            {
                this.undoEraser = false;
                this.IsGreenCorrection = false;
                bool arg_28_0;
                bool expr_19 = arg_28_0 = this.undoEraser;
                bool flag;
                if (7 != 0)
                {
                    flag = !expr_19;
                    goto IL_26;
                }
            IL_28:
                if (!arg_28_0)
                {
                    if (!false)
                    {
                        break;
                    }
                }
                else
                {
                    if (!true)
                    {
                        continue;
                    }
                    this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    if (2 == 0)
                    {
                        return;
                    }
                    if (3 != 0)
                    {
                        return;
                    }
                }
            IL_26:
                arg_28_0 = flag;
                goto IL_28;
            }
            this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
        }

        private void keepClear()
        {
            this.imgKeep.Source = new BitmapImage(new Uri("/images/keepIcon.png", UriKind.Relative));
            this.imgdrop.Source = new BitmapImage(new Uri("/images/keepIcon.png", UriKind.Relative));
            this.keepImgRect.Source = new BitmapImage(new Uri("/images/keepSquare.png", UriKind.Relative));
            this.ImgBrush.Source = new BitmapImage(new Uri("/images/keepbrush.png", UriKind.Relative));
        }

        private void keepCloneClear()
        {
            this.imgKeepClone.Source = new BitmapImage(new Uri("/images/keepIcon.png", UriKind.Relative));
            this.imgdropClone.Source = new BitmapImage(new Uri("/images/keepIcon.png", UriKind.Relative));
            this.ImgBrushClone.Source = new BitmapImage(new Uri("/images/keepbrush.png", UriKind.Relative));
        }
        private void Button_Click_delete(object sender, RoutedEventArgs e)
        {
            this.MyInkCanvas.CutSelection();
        }

        private void Button_Click_Erase(object sender, RoutedEventArgs e)
        {
            this.IsKeepDrop = false;
            this.IsBlockEraseActive = false;
            this.IsInverseEraseActive = false;
            this.keepClear();
            this.imgdrop.Source = new BitmapImage(new Uri("/images/keepIconAct.png", UriKind.Relative));
            // this.imgKeep.Source = new BitmapImage(new Uri("/images/keepIcon.png", UriKind.Relative));
            int arg_5E_0;
            if (!base.IsLoaded)
            {
                arg_5E_0 = 1;
                goto IL_5D;
            }
            bool? isChecked = this.rdbBackgroundGreen.IsChecked;
            int arg_52_0;
            if (!isChecked.GetValueOrDefault())
            {
                arg_52_0 = 0;
                goto IL_50;
            }
        IL_40:
            if (false)
            {
                return;
            }
            arg_52_0 = (isChecked.HasValue ? 1 : 0);
        IL_50:
            int arg_230_0 = arg_5E_0 = ((arg_52_0 == 0) ? 1 : 0);
            if (-1 == 0)
            {
                goto IL_22F;
            }
        IL_5D:
            bool flag = arg_5E_0 != 0;
            bool arg_EB_0;
            int arg_E5_0;
            if (!flag)
            {
                if (2 == 0)
                {
                    goto IL_40;
                }
                if (false)
                {
                    goto IL_E2;
                }
                this.dragCanvas.AllowDragging = false;
                if (false)
                {
                    goto IL_EC;
                }
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
            }
            else
            {
                if (!base.IsLoaded)
                {
                    arg_EB_0 = true;
                    goto IL_EA;
                }
                isChecked = this.rdbForgroundGreen.IsChecked;
                if (isChecked.GetValueOrDefault())
                {
                    arg_E5_0 = (isChecked.HasValue ? 1 : 0);
                    goto IL_E3;
                }
                goto IL_E2;
            }
        IL_85:
            this.IsEraserDrawRectangleActive = false;
            this.IsEraserDrawEllipseActive = false;
            this.IsGreenCorrection = true;
            this.undoEraser = false;
            this.GrdGreenScreenDefault.IsHitTestVisible = false;
            this.removebackGround();
            return;
        IL_E2:
            arg_E5_0 = 0;
        IL_E3:
            arg_EB_0 = (arg_E5_0 == 0);
        IL_EA:
            flag = arg_EB_0;
        IL_EC:
            if (flag)
            {
                return;
            }
            this.squre.Visibility = Visibility.Hidden;
            this.GrdGreenScreenDefault.IsHitTestVisible = true;
            if (2 != 0)
            {
                if (false)
                {
                    goto IL_85;
                }
                this.mainImage.Cursor = Cursors.Arrow;
                this.undoEraser = false;
                this.IsGreenCorrection = false;
                if (this.undoEraser)
                {
                    this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    return;
                }
                this.EraserBrush((double)this.fillSize, (double)this.fillSize);
            }
            if (this.primaryColorName == "Red")
            {
                this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                return;
            }
            if (this.primaryColorName == "Green")
            {
                this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                if (5 != 0)
                {
                    return;
                }
                goto IL_236;
            }
            else
            {
                if (this.primaryColorName == "Blue")
                {
                    this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                    return;
                }
                arg_230_0 = ((this.primaryColorName == "Gray") ? 1 : 0);
            }
        IL_22F:
            if (arg_230_0 == 0)
            {
                return;
            }
        IL_236:
            this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
        }

        private void Button_Click_FillMinus(object sender, RoutedEventArgs e)
        {
            MainWindow.saturation -= 0.01;
            if (!false)
            {
                this._greenscreendefault3.SaturationShift = MainWindow.saturation;
                do
                {
                    this.dragCanvas.AllowDragging = false;
                }
                while (false);
                this.IsGreenCorrection = false;
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                UIElement expr_4A = this.MyInkCanvas;
                bool expr_4F = true;
                if (7 != 0)
                {
                    expr_4A.SnapsToDevicePixels = expr_4F;
                }
                this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            }
            RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
        }

        private void Button_Click_FillPlus(object sender, RoutedEventArgs e)
        {
            do
            {
                MainWindow.saturation += 0.01;
                this._greenscreendefault3.SaturationShift = MainWindow.saturation;
                this.dragCanvas.AllowDragging = false;
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this.IsEraserDrawRectangleActive = false;
                this.IsEraserDrawEllipseActive = false;
                do
                {
                    this.IsGreenCorrection = false;
                }
                while (false);
                this.MyInkCanvas.SnapsToDevicePixels = true;
                this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
            }
            while (5 == 0);
        }

        private void Button_Click_InverseErase(object sender, RoutedEventArgs e)
        {
            if (true)
            {
                this.squre.Visibility = Visibility.Hidden;
            }
            this.GrdGreenScreenDefault.IsHitTestVisible = true;
            this.undoEraser = false;
            this.IsGreenCorrection = false;
            this.rectangleEraser = false;
            bool arg_7A_0;
            bool expr_F4 = arg_7A_0 = base.IsLoaded;
            if (false)
            {
                goto IL_79;
            }
            int arg_80_0;
            if (expr_F4)
            {
                if (3 != 0)
                {
                    arg_7A_0 = (this.rdbForgroundGreen.IsChecked == true);
                    goto IL_79;
                }
                goto IL_99;
            }
            else
            {
                arg_80_0 = 1;
            }
            bool expr_81;
            do
            {
            IL_7F:
                bool flag = arg_80_0 != 0;
                expr_81 = (arg_7A_0 = ((arg_80_0 = (flag ? 1 : 0)) != 0));
                if (!true)
                {
                    goto IL_79;
                }
            }
            while (false);
            if (!expr_81)
            {
                this.IsBlockEraseActive = false;
                this.IsInverseEraseActive = true;
                goto IL_99;
            }
            return;
        IL_79:
            arg_80_0 = ((!arg_7A_0) ? 1 : 0);
        // goto IL_7F;
        IL_99:
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
            do
            {
                this.mainImage.Cursor = Cursors.Cross;
            }
            while (false);
        }

        private void Button_Click_large(object sender, RoutedEventArgs e)
        {
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.EraseByPoint;
            StylusShape stylusShape = new RectangleStylusShape(50.0, 50.0);
            InkCanvas expr_24 = this.MyInkCanvas;
            StylusShape expr_66 = stylusShape;
            if (!false)
            {
                expr_24.EraserShape = expr_66;
            }
            this.IsEraserDrawRectangleActive = false;
            this.IsEraserDrawEllipseActive = false;
            this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
        }

        private void Button_Click_medium(object sender, RoutedEventArgs e)
        {
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.EraseByPoint;
            StylusShape stylusShape = new EllipseStylusShape(10.0, 10.0);
            InkCanvas expr_24 = this.MyInkCanvas;
            StylusShape expr_66 = stylusShape;
            if (!false)
            {
                expr_24.EraserShape = expr_66;
            }
            this.IsEraserDrawRectangleActive = false;
            this.IsEraserDrawEllipseActive = false;
            this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
        }

        private void Button_Click_Revert(object sender, RoutedEventArgs e)
        {
            IsKeepDrop = true;
            if (false)
            {
                goto IL_9D;
            }
            this.IsBlockEraseActive = false;
            this.IsInverseEraseActive = false;          
          
            bool? isChecked;
            bool arg_5E_0;
            if (base.IsLoaded)
            {
                if (false)
                {
                    goto IL_101;
                }
                isChecked = this.rdbBackgroundGreen.IsChecked;
                arg_5E_0 = !(isChecked == true);
            }
            else
            {
                arg_5E_0 = true;
            }
            bool arg_C4_0;
            if (!arg_5E_0)
            {
                this.IsGreenCorrection = false;
                this.squre.Visibility = Visibility.Hidden;
                this.mainImage.Cursor = Cursors.Arrow;
            }
            else
            {
                if (base.IsLoaded)
                {
                    goto IL_9D;
                }
                arg_C4_0 = true;
                goto IL_C3;
            }
        IL_87:
            this.removebackGround();
        IL_90:
            return;
        IL_9D:
            isChecked = this.rdbForgroundGreen.IsChecked;
            arg_C4_0 = !(isChecked == true);
        IL_C3:
            if (arg_C4_0)
            {
                return;
            }
            if (5 == 0)
            {
                goto IL_90;
            }
             //this.ApplyGreenEffectGrid(); 
            this.squre.Visibility = Visibility.Hidden;
            this.GrdGreenScreenDefault.IsHitTestVisible = true;
            this.mainImage.Cursor = Cursors.Arrow;            
            this.undoEraser = false; 
        IL_101:
            if (!this.undoEraser)
            {
                if (-1 != 0)
                {
                    this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    
                    this.keepClear();
                    this.imgKeep.Source = new BitmapImage(new Uri("/images/keepIconAct.png", UriKind.Relative));
                    //this.imgdrop.Source = new BitmapImage(new Uri("/images/keepIcon.png", UriKind.Relative));
                    if (7 != 0)
                    {
                        if (this.primaryColorName == "Red")
                        {
                            this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#00FF00");
                        }
                        else
                        {
                            if (-1 == 0)
                            {
                                goto IL_87;
                            }
                            if (this.primaryColorName == "Green")
                            {
                                this.attribute.Color = System.Windows.Media.Colors.LightSlateGray; 
                                
                            }
                            else if (this.primaryColorName == "Blue")
                            {
                                this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#00FF00");
                            }
                            else if (this.primaryColorName == "Gray")
                            {
                                this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#00FF00");
                            }
                        }
                    }
                    goto IL_21D;
                }
                goto IL_87;
            }
        IL_10E:
            this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
        IL_21D:
            this.GrdGreenScreenDefault.IsHitTestVisible = true;
            if (false)
            {
                goto IL_10E;
            }

        }

        private void Button_Click_select(object sender, RoutedEventArgs e)
        {
            while (8 != 0 && 5 != 0)
            {
                if (!false)
                {
                    InkCanvas expr_0C = this.MyInkCanvas;
                    InkCanvasEditingMode expr_11 = InkCanvasEditingMode.Select;
                    if (4 != 0)
                    {
                        expr_0C.EditingMode = expr_11;
                    }
                    if (2 != 0)
                    {
                        this.IsEraserDrawRectangleActive = false;
                    }
                    this.IsEraserDrawEllipseActive = false;
                    break;
                }
            }
        }

        private void Button_Click_small(object sender, RoutedEventArgs e)
        {
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.EraseByPoint;
            StylusShape stylusShape = new RectangleStylusShape(10.0, 10.0);
            InkCanvas expr_24 = this.MyInkCanvas;
            StylusShape expr_66 = stylusShape;
            if (!false)
            {
                expr_24.EraserShape = expr_66;
            }
            this.IsEraserDrawRectangleActive = false;
            this.IsEraserDrawEllipseActive = false;
            this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
        }

        private void Button_Click_stroke(object sender, RoutedEventArgs e)
        {
            while (8 != 0 && 5 != 0)
            {
                if (!false)
                {
                    InkCanvas expr_0C = this.MyInkCanvas;
                    InkCanvasEditingMode expr_11 = InkCanvasEditingMode.EraseByStroke;
                    if (4 != 0)
                    {
                        expr_0C.EditingMode = expr_11;
                    }
                    if (2 != 0)
                    {
                        this.IsEraserDrawRectangleActive = false;
                    }
                    this.IsEraserDrawEllipseActive = false;
                    break;
                }
            }
        }

        private void Button_Click_TolMinus(object sender, RoutedEventArgs e)
        {
            DragCanvas expr_06 = this.dragCanvas;
            bool expr_0B = false;
            if (!false)
            {
                expr_06.AllowDragging = expr_0B;
            }
            if (4 != 0)
            {
                string text = this.primaryColorName;
                if (!false)
                {
                    if (true)
                    {
                        if (text != null)
                        {
                            if (7 != 0)
                            {
                                if (!(text == "Green"))
                                {
                                    if (text == "Blue" || text == "Red" || text == "Gray")
                                    {
                                        this.toleranceDefault += 0.001f;
                                        goto IL_BD;
                                    }
                                    if (!false)
                                    {
                                    }
                                }
                                else
                                {
                                    MainWindow.lightness -= 0.01;
                                    this._greenscreendefault3.LightnessShift = MainWindow.lightness;
                                }
                                goto IL_D2;
                            }
                        IL_BD:
                            this.ckae.Tolerance = (double)this.toleranceDefault;
                        }
                    }
                IL_D2:
                    this.IsGreenCorrection = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    while (false)
                    {
                    }
                    this.IsEraserDrawRectangleActive = false;
                    this.IsEraserDrawEllipseActive = false;
                    this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
                }
            }
        }

        private void Button_Click_TolPlus(object sender, RoutedEventArgs e)
        {
            DragCanvas expr_06 = this.dragCanvas;
            bool expr_0B = false;
            if (!false)
            {
                expr_06.AllowDragging = expr_0B;
            }
            if (4 != 0)
            {
                string text = this.primaryColorName;
                if (!false)
                {
                    if (true)
                    {
                        if (text != null)
                        {
                            if (7 != 0)
                            {
                                if (!(text == "Green"))
                                {
                                    if (text == "Blue" || text == "Red" || text == "Gray")
                                    {
                                        this.toleranceDefault -= 0.001f;
                                        goto IL_BD;
                                    }
                                    if (!false)
                                    {
                                    }
                                }
                                else
                                {
                                    MainWindow.lightness += 0.01;
                                    this._greenscreendefault3.LightnessShift = MainWindow.lightness;
                                }
                                goto IL_D2;
                            }
                        IL_BD:
                            this.ckae.Tolerance = (double)this.toleranceDefault;
                        }
                    }
                IL_D2:
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    do
                    {
                        this.IsEraserDrawRectangleActive = false;
                    }
                    while (false);
                    this.IsEraserDrawEllipseActive = false;
                    this.IsGreenCorrection = false;
                    this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
                }
            }
        }

        private void Button_Click_verylarge(object sender, RoutedEventArgs e)
        {
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.EraseByPoint;
            StylusShape stylusShape = new EllipseStylusShape(50.0, 50.0);
            InkCanvas expr_24 = this.MyInkCanvas;
            StylusShape expr_66 = stylusShape;
            if (!false)
            {
                expr_24.EraserShape = expr_66;
            }
            this.IsEraserDrawRectangleActive = false;
            this.IsEraserDrawEllipseActive = false;
            this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
        }

        private void canbackgroundold_MouseWheel(object sender, MouseWheelEventArgs e)
        {
            bool flag = this.GrdsubGreenScreen.Visibility == Visibility.Visible || this.jrotate.Visibility == Visibility.Visible || this.spRotatepanel.Visibility == Visibility.Visible;

            bool arg_5C_0;
            int arg_5C_1;
            if (flag)
            {
                if (5 != 0)
                {
                    bool arg_9F_0 = arg_5C_0 = (this.GrdsubGreenScreen.Visibility == Visibility.Visible);

                    bool expr_9F;
                    do
                    {
                        int expr_9C = arg_5C_1 = 0;
                        if (expr_9C != 0)
                        {
                            goto IL_5C;
                        }
                        expr_9F = (arg_5C_0 = (arg_9F_0 = ((arg_9F_0 ? 1 : 0) == expr_9C)));
                    }
                    while (false);
                    if (expr_9F)
                    {
                        goto IL_FE;
                    }
                    flag = !this.mainImage.IsMouseOver;
                }
                if (!flag)
                {
                    while (true)
                    {
                        this.IsSelectedMainImage = true;
                        int arg_CA_0 = e.Delta;
                        int arg_CA_1 = 0;
                        int expr_CA;
                        int expr_CD;
                        do
                        {
                            expr_CA = (arg_CA_0 = ((arg_CA_0 > arg_CA_1) ? 1 : 0));
                            expr_CD = (arg_CA_1 = 0);
                        }
                        while (expr_CD != 0);
                        if (expr_CA != expr_CD)
                        {
                            break;
                        }
                        if (!false)
                        {
                            goto Block_13;
                        }
                    }
                    this.ZoomInButton_Click1(sender, new RoutedEventArgs());
                    if (!false)
                    {
                        goto IL_FC;
                    }
                    return;
                Block_13:
                    this.ZoomOutButton_Click1(sender, new RoutedEventArgs());
                IL_FC:;
                }
            IL_FE:
                return;
            }
            this.IsSelectedMainImage = true;
            arg_5C_0 = (e.Delta > 0);
            arg_5C_1 = 0;
        IL_5C:
            if ((arg_5C_0 ? 1 : 0) != arg_5C_1)
            {
                if (true)
                {
                    this.ZoomInButton_Click(sender, new RoutedEventArgs());
                }
            }
            else
            {
                this.ZoomOutButton_Click(sender, new RoutedEventArgs());
            }
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            PopupButton.IsChecked = false;
            this.CmbProductType.Visibility = Visibility.Collapsed;
            this.elementForContextMenu = null;
            this.imageundoGrid.IsHitTestVisible = true;
            this.rotateangle = 0;
            this.FlipMode = 0;
            this.jrotate.Visibility = Visibility.Hidden;
            try
            {
                if (!false)
                {
                    if (this._felCur == null)
                    {
                        goto IL_83;
                    }
                    this.RemoveCropFromCur();
                    if (6 == 0)
                    {
                        goto IL_234;
                    }
                    this._felCur = null;
                }
                this._clp = null;
            IL_83:
                this.btnSelectReverse.IsEnabled = false;
                this.GrdsubColoreffects.Visibility = Visibility.Collapsed;
                this.GrdFirst.Visibility = Visibility.Visible;
                this.GrdSubGraphics.Visibility = Visibility.Collapsed;
                this.GrdSubGraphics1.Visibility = Visibility.Collapsed;
                this.GrdsubCrop.Visibility = Visibility.Hidden;
                if (5 == 0)
                {
                    goto IL_2FB;
                }
                this.lstStrip.Visibility = Visibility.Visible;
                this.GrdEffects.Visibility = Visibility.Visible;
                if (!true)
                {
                    goto IL_324;
                }
                this.ColorEffectsIMG.Visibility = Visibility.Collapsed;
                if (true)
                {
                    this.IMGFrame.Visibility = Visibility.Visible;
                    this.GrdEffects.Visibility = Visibility.Collapsed;
                    this.btnrotate.IsEnabled = true;
                }
                this.btnrotate.IsEnabled = true;
                this.btnModerate.IsEnabled = true;
                this.btnflip.IsEnabled = true;
                this.btnCrop.IsEnabled = true;
                this.btnantirotate.IsEnabled = true;
                this.btnAddgraphics.IsEnabled = true;
                this.dragCanvas.AllowDragging = false;
                this.dragCanvas.IsEnabled = false;
                int arg_270_0;
                int expr_187 = arg_270_0 = this.dragCanvas.Children.Count;
                int arg_270_1;
                int expr_18D = arg_270_1 = 4;
                if (expr_18D == 0)
                {
                    goto IL_270;
                }
                bool arg_22F_0;
                if (expr_187 != expr_18D || this._ZoomFactor != 1.0 || this.frm.Children.Count != 0)
                {
                    arg_22F_0 = true;
                    goto IL_22E;
                }
                if (this.graphicsBorderApplied || this.graphicsCount > 0 || this.graphicsframeApplied || this.graphicsTextBoxCount > 0 || this.gumballTextCount > 0 || this._ZoomFactor > 1.0 || this._ZoomFactor < 1.0)
                {
                    arg_22F_0 = true;
                    goto IL_22A;
                }
                bool arg_222_0 = this.jrotate.Angle == 0.0;
                int arg_222_1 = 0;
            IL_222:
                arg_22F_0 = ((arg_222_0 ? 1 : 0) == arg_222_1);
                if (!false)
                {
                }
            IL_22A:
            IL_22E:
                if (arg_22F_0)
                {
                    this.DisableButtonForLayering();
                    goto IL_247;
                }
            IL_234:
                this.EnableButtonForLayering();
            IL_247:
                if (this.graphicsBorderApplied || this.graphicsCount > 0 || this.graphicsframeApplied || this.graphicsTextBoxCount > 0)
                {
                    goto IL_299;
                }
                arg_270_0 = this.gumballTextCount;
                arg_270_1 = 0;
            IL_270:
                bool arg_29B_0;
                if (arg_270_0 <= arg_270_1 && this._ZoomFactor <= 1.0)
                {
                    arg_29B_0 = (this._ZoomFactor >= 1.0);
                    goto IL_29A;
                }
            IL_299:
                arg_29B_0 = false;
            IL_29A:
                if (!arg_29B_0)
                {
                    VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                }
                else
                {
                    VisualStateManager.GoToState(this.btnAddgraphics, "Unchecked", true);
                }
                this.grdZoomCanvas.Visibility = Visibility.Visible;
                this.GrdRotateCropParent.Visibility = Visibility.Collapsed;
                bool arg_311_0;
                if (this.IsCropped || this.FlipMode != 0 || this.FlipModeY != 0)
                {
                    arg_311_0 = false;
                    goto IL_310;
                }
            IL_2FB:
                int expr_302 = (arg_222_0 = (this.rotateangle > 0)) ? 1 : 0;
                int expr_305 = arg_222_1 = 0;
                if (expr_305 != 0)
                {
                    goto IL_222;
                }
                arg_311_0 = (expr_302 == expr_305);
            IL_310:
                if (!arg_311_0)
                {
                    this.btnCrop.IsEnabled = false;
                }
            IL_324:
                VisualStateManager.GoToState(this.btnrotate, "Unchecked", true);
                VisualStateManager.GoToState(this.btnantirotate, "Unchecked", true);
                VisualStateManager.GoToState(this.btnflip, "Unchecked", true);
                this.btnThumbnails_Click(new object(), new RoutedEventArgs());
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void CancelButtoncolorGIF_Click(object sender, RoutedEventArgs e)
        {

            string root = this.HotFolderPath + "\\GIFImages";
            if (Directory.Exists(root))
            {
                Directory.Delete(root, true);
            }
            CollapsePopUp();
            bool flag = false;
            SearchResult searchResult = null;
            IEnumerator enumerator = System.Windows.Application.Current.Windows.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    Window window = (Window)enumerator.Current;
                    bool arg_137_0;
                    bool expr_128 = arg_137_0 = (window.Title == "View/Order Station");
                    if (7 != 0)
                    {
                        flag = !expr_128;
                        arg_137_0 = flag;
                    }
                    if (!arg_137_0)
                    {
                        searchResult = (SearchResult)window;
                    }
                }
            }
            finally
            {
                IDisposable disposable = enumerator as IDisposable;
                bool arg_169_0;
                bool expr_160 = arg_169_0 = (disposable == null);
                if (8 != 0)
                {
                    flag = expr_160;
                    arg_169_0 = flag;
                }
                if (!arg_169_0)
                {
                    disposable.Dispose();
                }
            }
            flag = (searchResult != null);
        IL_17F:
            if (!flag)
            {

                searchResult = new SearchResult();
            }
            bool arg_1B3_0;
            if (RobotImageLoader.GroupImages.Count != 0)
            {
                arg_1B3_0 = true;
                goto IL_1B2;
            }
        IL_19C:
            arg_1B3_0 = !(this.IsGoupped == "View All");
        IL_1B2:
            if (!arg_1B3_0)
            {
                this.IsGoupped = "View Group";
            }
            searchResult.pagename = "Saveback";
            searchResult.Savebackpid = Convert.ToString(this.PhotoId);
            searchResult.Show();
            searchResult.LoadWindow();
            if (false)
            {
                goto IL_19C;
            }
            base.Hide();
            if (true)
            {
                return;
            }
        }

        private void CancelButtoncolor_Click(object sender, RoutedEventArgs e)
        {
            CollapsePopUp();
            this.PopupButton.IsChecked = false;
            try
            {
                try
                {
                    this.GrdsubColoreffects.Visibility = Visibility.Collapsed;
                IL_12:
                    while (!false)
                    {
                        this.GrdsubCrop.Visibility = Visibility.Hidden;
                        do
                        {
                            this.ColorEffectsIMG.Visibility = Visibility.Collapsed;
                            while (true)
                            {
                                this.IMGFrame.Visibility = Visibility.Visible;
                                if (this.bright > 0.0 && this.currentbrightness != 0.0)
                                {
                                    break;
                                }
                                if (!false)
                                {
                                    goto Block_9;
                                }
                            }
                            this.bright = this.currentbrightness;
                            if (true)
                            {
                                this._brighteff.Brightness = this.bright;
                            }
                            if (4 == 0)
                            {
                                goto IL_12;
                            }
                            this._brighteff.Contrast = 1.0;
                            this.GrdBrightness.Effect = this._brighteff;
                        }
                        while (false);
                        goto IL_F6;
                    Block_9:
                        this.GrdBrightness.Effect = null;
                        this.bright = 0.0;
                    IL_F6:
                        if (this.cont > 0.0 && this.currentcontrast != 0.0)
                        {
                            break;
                        }
                        this.cont = 1.0;
                    IL_141:
                        this.EnableSideButton();
                        while (false)
                        {
                        }
                        this.btnThumbnails_Click(new object(), new RoutedEventArgs());
                        goto IL_1B8;
                    }
                    this.cont = this.currentcontrast;
                    //goto IL_141;
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            IL_1B8:;
            }
            finally
            {
                if (!false)
                {
                    MemoryManagement.FlushMemory();
                }
            }
        }

        private void CancelButtonSPSEdition_Click(object sender, RoutedEventArgs e)
        {
            CollapsePopUp();
            bool arg_14_0;
            bool arg_4B_0 = arg_14_0 = (this.mainImage.Visibility == Visibility.Collapsed);
            try
            {
                using (List<string>.Enumerator enumerator = this.LstGridEffects.GetEnumerator())
                {
                    if (arg_4B_0)
                    {
                        this.mainImage.Visibility = Visibility.Visible;
                    }

                    if (!false)
                    {
                        this.Bloomeffect();
                        this.SoftSkinChange();
                    }

                    //if(enumerator.MoveNext())
                    //    {
                    //    string current = enumerator.Current;

                    //    bool arg_1BB_0 = !(current == "bloom");
                    //    //if(arg_1BB_0)
                    //    //    {
                    //    //    if(current == "softskin")
                    //    //        {
                    //    //        this.Defogger();
                    //    //        goto IL_2B4;
                    //    //        }
                    //    //    }
                    //    //this.Bloomeffect();
                    //    //goto IL_2B4;


                    //    }
                }
            }
            catch (Exception ex)
            {

            }


        }

        private void CancelButtoncoloreffect_Click(object sender, RoutedEventArgs e)
        {
            this.GrdFirst.Visibility = Visibility.Visible;
            this.GrdsubColoreffects.Visibility = Visibility.Collapsed;
            this.GrdsubEffects.Visibility = Visibility.Collapsed;
            this.GrdsubCrop.Visibility = Visibility.Hidden;
            this.ColorEffectsIMG.Visibility = Visibility.Collapsed;
            this.IMGFrame.Visibility = Visibility.Visible;
            if (this.sharpen > 0.0 && this.currentsharpen != 0.0)
            {
                this._sharpeff.Strength = this.sharpen;
                this._sharpeff.PixelWidth = 0.0015;
            }
            else
            {
                this.GrdSharpen.Effect = null;
                this.sharpen = 0.0;
                if (!false)
                {
                    goto IL_F3;
                }
                goto IL_121;
            }
        IL_A8:
            this._sharpeff.PixelHeight = 0.0015;
            this.GrdSharpen.Effect = this._sharpeff;
        IL_F3:
            if (this.hueshift <= 0.0 || this.currenthueshift <= 0.0)
            {
                this.GrdHueShift.Effect = null;
                this.hueshift = 0.0;
                if (-1 == 0)
                {
                    goto IL_A8;
                }
                if (3 != 0)
                {
                    goto IL_16F;
                }
                goto IL_133;
            }
        IL_121:
            this._shifthueeff.HueShift = this.hueshift;
        IL_133:
            this.GrdHueShift.Effect = this._shifthueeff;
        IL_16F:
            using (List<string>.Enumerator enumerator = this.LstGridEffects.GetEnumerator())
            {
                if (!false)
                {
                }
            IL_1A6:
            IL_2B4:
                if (enumerator.MoveNext())
                {
                    string current = enumerator.Current;
                    if (!(current == "invert"))
                    {
                        bool arg_1BB_0 = !(current == "greyscale");
                        while (arg_1BB_0)
                        {
                            bool flag = !(current == "sepia");
                            if (!false)
                            {
                                if (!flag)
                                {
                                    this.Sepia();
                                    goto IL_2B4;
                                }
                                if (current == "defog")
                                {
                                    this.Defogger();
                                    goto IL_2B4;
                                }
                                if (current == "edgedetect")
                                {
                                    if (!false)
                                    {
                                        this.EdgeDetecteffect();
                                        goto IL_2B4;
                                    }
                                    goto IL_1A0;
                                }
                                else
                                {
                                    flag = !(current == "emboss");
                                    bool expr_248 = arg_1BB_0 = flag;
                                    if (5 == 0)
                                    {
                                        continue;
                                    }
                                    if (!expr_248)
                                    {
                                        this.Embosseffect();
                                        goto IL_2B4;
                                    }
                                    if (current == "noeffect")
                                    {
                                        this.Noeffect();
                                        if (7 != 0)
                                        {
                                            goto IL_2B4;
                                        }
                                    }
                                    else if (!(current == "emboss"))
                                    {
                                        flag = !(current == "digimagic");
                                        goto IL_2A8;
                                    }
                                    this.Cartoonizeeffect();
                                    goto IL_2B4;
                                }
                            }
                        IL_2A8:
                            if (!flag)
                            {
                                this.DigiMagic();
                                goto IL_2B4;
                            }
                            goto IL_2B4;
                        }
                        this.GreyScaleeffect();
                        goto IL_2B4;
                    }
                IL_1A0:
                    this.InvertEffect();
                    goto IL_1A6;
                }
            }
            this.LstGridEffects.Clear();
            this.EnableSideButton();
            this.btnThumbnails_Click(new object(), new RoutedEventArgs());
        }

        private void CancelButtoncolorfilter_Click(object sender, RoutedEventArgs e)
        {
            base.UpdateLayout();
            if (3 != 0)
            {
                this.GrdsubCrop.Visibility = Visibility.Hidden;
                this.GrdsubEffects.Visibility = Visibility.Collapsed;
                do
                {
                    this.GrdsubColoreffects.Visibility = Visibility.Collapsed;
                    this.GrdsubColorFilters.Visibility = Visibility.Collapsed;
                }
                while (false);
                this.colour = "none";
                bool arg_82_0;
                bool arg_84_0 = arg_82_0 = (this.currentcolor == (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#00000000"));
                bool expr_85;
                do
                {
                    if (!false)
                    {
                        arg_84_0 = !arg_82_0;
                    }
                    bool flag = arg_84_0;
                    expr_85 = (arg_82_0 = (arg_84_0 = flag));
                }
                while (false || 5 == 0);
                if (!expr_85)
                {
                    this.Grdcolorfilter.Effect = null;
                    if (4 != 0)
                    {
                    }
                }
                else
                {
                    this.color = this.currentcolor;
                    this._colorfiltereff.FilterColor = this.color;
                    this.Grdcolorfilter.Effect = this._colorfiltereff;
                }
            }
            this.EnableSideButton();
        }

        private void CancelButtonGreenScreen_Click(object sender, RoutedEventArgs e)
        {
            if (5 != 0)
            {
                PopupButton.IsChecked = false;
                this.OkCancelMask.Visibility = Visibility.Collapsed;
                this.GrdChromaKeyNewScreen.Visibility = Visibility.Collapsed;
                UIElement expr_0C = this.MyInkCanvasParent;
                System.Windows.Media.Effects.Effect expr_11 = null;
                if (!false)
                {
                    expr_0C.Effect = expr_11;
                }
                this.attributeWidth = (this.attributeHeight = 10.0);
                this.GrdsubGreenScreen.Visibility = Visibility.Collapsed;
                this.dragCanvas.IsEnabled = false;
                this.greenEraser.Visibility = Visibility.Collapsed;
                this.squre.Visibility = Visibility.Hidden;
                this.mainImage.Cursor = Cursors.Arrow;
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this.GrdGreenScreenDefault.IsHitTestVisible = true;
                this.IsEraserActive = false;
                this.IsEraserDrawEllipseActive = false;
                this.IsEraserDrawRectangleActive = false;
                this.IsGreenCorrection = false;
                this.isChromaApplied = false;
                this._ZoomFactor = 1.0;
                this._maxZoomFactor = 4.0;
                if (this.zoomTransform == null)
                {
                    goto IL_1EC;
                }
                if (this.FlipMode == 0 && this.FlipModeY == 0)
                {
                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    this.zoomTransform.ScaleX = this._ZoomFactor;
                    this.zoomTransform.ScaleY = this._ZoomFactor;
                    goto IL_1EB;
                }
                this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
            }
            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
            this.zoomTransform.ScaleX = this._ZoomFactor;
            this.zoomTransform.ScaleY = this._ZoomFactor;
        IL_1EB:
        IL_1EC:
            if (this.MyInkCanvas.Children.Count > 1)
            {
                this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
            }
            if (this.MyInkCanvas.Strokes.Count > 0)
            {
                this.MyInkCanvas.Strokes.Clear();
            }
            this.GrdEffects.Visibility = Visibility.Collapsed;
            this.lstBackground.Visibility = Visibility.Collapsed;
            while (true)
            {
                this.Zomout(true);
                do
                {
                    VisualStateManager.GoToState(this.btnGreenScreen, "Unchecked", true);
                    this.MyInkCanvas.Visibility = Visibility.Visible;
                    this.rdbForgroundGreen.IsChecked = new bool?(true);
                    this.ChkBackground.IsChecked = new bool?(true);
                    this.ChkForground.IsChecked = new bool?(true);
                    this._ZoomFactor = 0.975;
                    this.ZoomInButton_Click1(sender, e);
                    this.IsZoomed = false;
                    if (!this.BackgroundSelectedValue.Equals(this.BackgroundDBValue) && !string.IsNullOrEmpty(this.BackgroundDBValue))
                    {
                        BitmapImage bitmapImage = new BitmapImage(new Uri(LoginUser.DigiFolderBackGroundPath + "\\8x10\\\\" + this.BackgroundDBValue));
                        this.canbackground.Background = new ImageBrush
                        {
                            ImageSource = bitmapImage
                        };
                        this.imageundoGrid.Background = new ImageBrush
                        {
                            ImageSource = bitmapImage
                        };
                        bitmapImage.Freeze();
                    }
                    if (this.imageundoGrid.Background != null)
                    {
                        this.mainImageundo.Opacity = 1.0;
                    }
                    if (!string.IsNullOrEmpty(this.BackgroundDBValue))
                    {
                        goto Block_10;
                    }
                    this.canbackground.Background = null;
                    this.imageundoGrid.Background = null;
                    this.mainImageundo.Source = null;
                    VisualStateManager.GoToState(this.btnGreenScreen, "Unchecked", true);
                }
                while (5 == 0);
            IL_405:
                this.EnableSideButton();
                this.btnPrintToGroup.IsEnabled = true;
                this.btnPlaceOrder.IsEnabled = true;
                if (!string.IsNullOrEmpty(this.BackgroundSelectedValue) && this.IsChromaChanged)
                {
                    PhotoBusiness photoBusiness = new PhotoBusiness();
                    photoBusiness.SaveIsGreenPhotos((long)this.PhotoId, false);
                }
                this.BackgroundSelectedValue = string.Empty;
                this.IsBlockEraseActive = false;
                this.IsInverseEraseActive = false;
                this.rdbBlockErase.IsChecked = new bool?(false);
                this.rdbInverseErase.IsChecked = new bool?(false);
                this.rdbErase.IsChecked = new bool?(false);
                this.rdbRevert.IsChecked = new bool?(false);
                this.tabCroma.IsSelected = true;
                this.tabCroma.Focus();
                this.btnThumbnails_Click(new object(), new RoutedEventArgs());
                this.btnPrintToGroup.Visibility = Visibility.Visible;
                if (!this.isPrintButtonsVisible)
                {
                    goto IL_526;
                }
                if (!false)
                {
                    break;
                }
                continue;
            Block_10:
                VisualStateManager.GoToState(this.btnGreenScreen, "Checked", true);
                goto IL_405;
            }
            this.btn6X8Print.Visibility = Visibility.Visible;
            this.btn8X10Print.Visibility = Visibility.Visible;
        IL_526:
            this.ChromaBorderPath = this.OriginalBorder;
            this.ApplyEffectsAgainAfterChroma();
            this.ShowGraphics();
        }

        private void CancelButtonredeye_Click(object sender, RoutedEventArgs e)
        {
            this.PopupButton.IsChecked = false;
            this.GrdsubRedEye.Visibility = Visibility.Hidden;
            this.GrdsubRedEye1.Visibility = Visibility.Hidden;
            this.GrdFirst.Visibility = Visibility.Visible;
            if (false)
            {
                goto IL_E0;
            }
            this.ellipse.Visibility = Visibility.Collapsed;
            if (false)
            {
                goto IL_101;
            }
            this.RedeyePreview.Visibility = Visibility.Collapsed;
        IL_3F:
            this.mainImage.Cursor = Cursors.Arrow;
            this.SetRedeye = false;
            this.dragCanvas.IsEnabled = false;
            bool arg_74_0;
            bool expr_6A = arg_74_0 = this.redeffectfirstApplied;
            bool flag;
            if (!false)
            {
                flag = expr_6A;
                arg_74_0 = flag;
            }
            if (!arg_74_0)
            {
                this.GrdRedEyeFirst.Effect = null;
            }
            if (!this.redeffectsecondApplied)
            {
                this.GrdRedEyeSecond.Effect = null;
            }
            if (!this.redeffectmultiple1Applied)
            {
                this.GrdRedEyeMultiple.Effect = null;
            }
            flag = this.redeffectmultiple2Applied;
            bool arg_121_0;
            bool expr_BE = arg_121_0 = flag;
            if (4 == 0)
            {
                goto IL_121;
            }
            if (!expr_BE)
            {
                if (false)
                {
                    goto IL_119;
                }
                if (false)
                {
                    goto IL_10D;
                }
                this.redEyeEffectMultiple.Radius1 = 0.0;
            }
        IL_E0:
            if (!this.redeffectmultiple3Applied)
            {
                this.redEyeEffectMultiple.Radius2 = 0.0;
            }
        IL_101:
            if (this.redeffectmultiple4Applied)
            {
                goto IL_11B;
            }
        IL_10D:
            this.GrdRedEyeMultiple1.Effect = null;
        IL_119:
        IL_11B:
            arg_121_0 = this.redeffectmultiple5Applied;
        IL_121:
            flag = arg_121_0;
            if (!false)
            {
                if (!flag)
                {
                    this.redEyeEffectMultiple1.Radius1 = 0.0;
                }
                if (!this.redeffectmultiple6Applied)
                {
                    this.redEyeEffectMultiple1.Radius2 = 0.0;
                }
                return;
            }
            goto IL_3F;
        }

        private void CanvasInkInkCanvas_MouseEnter(object sender, MouseEventArgs e)
        {
            TransformGroup transformGroup = this.MyInkCanvas.GetValue(UIElement.RenderTransformProperty) as TransformGroup;
            bool expr_27B;
            while (true)
            {
                int arg_162_0;
                bool arg_2DF_0 = ((transformGroup == null) ? (arg_162_0 = 1) : (arg_162_0 = ((!this.IsZoomed) ? 1 : 0))) != 0;
                if (6 == 0 || false)
                {
                    goto IL_161;
                }
                int arg_15F_0;
                if (!arg_2DF_0)
                {
                    if (transformGroup.Children.Count > 0)
                    {
                        foreach (Transform current in transformGroup.Children)
                        {
                            while (false || current is ScaleTransform)
                            {
                                MainWindow.inkCanvasEllipse.Width = (MainWindow.inkCanvasRectangle.Width = this.attribute.Width * ((ScaleTransform)current).Value.Determinant);
                                if (7 != 0)
                                {
                                    MainWindow.inkCanvasEllipse.Height = (MainWindow.inkCanvasRectangle.Height = this.attribute.Height * ((ScaleTransform)current).Value.Determinant);
                                    break;
                                }
                            }
                        }
                    }
                }
                else if (transformGroup != null)
                {
                    if (!false)
                    {
                        arg_15F_0 = transformGroup.Children.Count;
                        goto IL_15E;
                    }
                    goto IL_28B;
                }
            IL_223:
                MainWindow.inkCanvasEllipse.Fill = System.Windows.Media.Brushes.Red;
                MainWindow.inkCanvasEllipse.StrokeThickness = 2.0;
                MainWindow.inkCanvasEllipse.Stroke = System.Windows.Media.Brushes.Black;
                MainWindow.inkCanvasRectangle.Fill = System.Windows.Media.Brushes.Red;
                this.MyInkCanvas.UseCustomCursor = true;
                if (4 == 0)
                {
                    continue;
                }
                expr_27B = ((arg_15F_0 = (this.rectangleEraser ? 1 : 0)) != 0);
                if (!false)
                {
                    break;
                }
                goto IL_15E;
            IL_161:
                if (arg_162_0 != 0)
                {
                    TransformCollection.Enumerator enumerator = transformGroup.Children.GetEnumerator();
                    try
                    {
                        while (enumerator.MoveNext())
                        {
                            Transform current = enumerator.Current;
                            if (current is ScaleTransform)
                            {
                                MainWindow.inkCanvasEllipse.Width = (MainWindow.inkCanvasRectangle.Width = this.attribute.Width * ((ScaleTransform)current).ScaleX);
                                MainWindow.inkCanvasEllipse.Height = (MainWindow.inkCanvasRectangle.Height = this.attribute.Height * ((ScaleTransform)current).ScaleY);
                            }
                        }
                    }
                    finally
                    {
                        ((IDisposable)enumerator).Dispose();
                        while (!true)
                        {
                        }
                    }
                }
                goto IL_223;
            IL_15E:
                arg_162_0 = ((arg_15F_0 > 0) ? 1 : 0);
                goto IL_161;
            }
            if (expr_27B)
            {
                this.MyInkCanvas.Cursor = CursorHelper.CreateCursor(MainWindow.inkCanvasRectangle);
                return;
            }
        IL_28B:
            this.MyInkCanvas.Cursor = CursorHelper.CreateCursor(MainWindow.inkCanvasEllipse);
        }

        private static RenderTargetBitmap CaptureScreen(Visual target, double dpiX, double dpiY, bool Isrotate)
        {
            RenderTargetBitmap result;
            if (8 != 0)
            {
                DrawingVisual drawingVisual = new DrawingVisual();
                RenderTargetBitmap renderTargetBitmap = null;
                MemoryManagement.FlushMemory();
                try
                {
                    if (target == null)
                    {
                        result = null;
                    }
                    else
                    {
                        Rect descendantBounds;
                        double arg_84_0;
                        double arg_76_0;
                        int arg_101_0;
                        double arg_F1_0;
                        if (!false)
                        {
                            RenderOptions.SetBitmapScalingMode(target, BitmapScalingMode.HighQuality);
                            RenderOptions.SetEdgeMode(target, EdgeMode.Aliased);
                            descendantBounds = VisualTreeHelper.GetDescendantBounds(target);
                            if (!Isrotate)
                            {
                                double expr_CB = arg_76_0 = (arg_84_0 = descendantBounds.Width * CroppingAdorner.s_dpiX);
                                if (!false)
                                {
                                    arg_101_0 = (int)(expr_CB / 96.0);
                                    arg_F1_0 = descendantBounds.Height * CroppingAdorner.s_dpiY / 96.0;
                                    goto IL_F1;
                                }
                                goto IL_81;
                            }
                        }
                        arg_76_0 = descendantBounds.Height;
                    IL_71:
                        arg_84_0 = (arg_76_0 = arg_76_0 * CroppingAdorner.s_dpiY / 96.0);
                    IL_81:
                        if (6 == 0)
                        {
                            goto IL_71;
                        }
                        int expr_84 = arg_101_0 = (int)arg_84_0;
                        double expr_91 = arg_F1_0 = descendantBounds.Width * CroppingAdorner.s_dpiX;
                        if (!false)
                        {
                            renderTargetBitmap = new RenderTargetBitmap(expr_84, (int)(expr_91 / 96.0), CroppingAdorner.s_dpiY, CroppingAdorner.s_dpiX, PixelFormats.Default);
                            if (-1 != 0)
                            {
                                goto IL_108;
                            }
                            goto IL_1A3;
                        }
                    IL_F1:
                        renderTargetBitmap = new RenderTargetBitmap(arg_101_0, (int)arg_F1_0, CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, PixelFormats.Default);
                    IL_108:
                        using (DrawingContext drawingContext = drawingVisual.RenderOpen())
                        {
                            VisualBrush brush = new VisualBrush(target);
                            if (Isrotate)
                            {
                                drawingContext.DrawRectangle(brush, null, new Rect(default(System.Windows.Point), new System.Windows.Size(descendantBounds.Size.Height, descendantBounds.Size.Width)));
                            }
                            else
                            {
                                drawingContext.DrawRectangle(brush, null, new Rect(default(System.Windows.Point), descendantBounds.Size));
                            }
                        }
                        renderTargetBitmap.Render(drawingVisual);
                    IL_1A3:
                        result = renderTargetBitmap;
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    result = renderTargetBitmap;
                }
                finally
                {
                    drawingVisual = null;
                    target = null;
                    MemoryManagement.FlushMemory();
                    while (false)
                    {
                    }
                }
            }
            return result;
        }

        private RenderTargetBitmap CaptureScreenForCrop(Grid grdzoomOut, double dpiX, double dpiY, bool Isrotate)
        {
            RenderTargetBitmap result;
            do
            {
                if (!false)
                {
                }
                RenderTargetBitmap renderTargetBitmap = null;
                try
                {
                    RenderOptions.SetBitmapScalingMode(grdzoomOut, BitmapScalingMode.NearestNeighbor);
                    System.Windows.Size size;
                    while (true)
                    {
                        RenderOptions.SetEdgeMode(grdzoomOut, EdgeMode.Aliased);
                        size = new System.Windows.Size(grdzoomOut.ActualWidth, grdzoomOut.ActualHeight);
                        do
                        {
                            int arg_81_0 = (int)(size.Width * CroppingAdorner.s_dpiX / 96.0);
                            double arg_71_0;
                            double expr_63 = arg_71_0 = size.Height * CroppingAdorner.s_dpiY;
                            if (5 != 0)
                            {
                                arg_71_0 = expr_63 / 96.0;
                            }
                            renderTargetBitmap = new RenderTargetBitmap(arg_81_0, (int)arg_71_0, CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, PixelFormats.Default);
                        }
                        while (2 == 0);
                        RenderOptions.SetEdgeMode(grdzoomOut, EdgeMode.Aliased);
                        while (true)
                        {
                            RenderOptions.SetBitmapScalingMode(grdzoomOut, BitmapScalingMode.NearestNeighbor);
                            grdzoomOut.SnapsToDevicePixels = true;
                            grdzoomOut.RenderTransform = new ScaleTransform(1.0, 1.0, 0.5, 0.5);
                            grdzoomOut.Measure(size);
                            if (false)
                            {
                                break;
                            }
                            if (true)
                            {
                                goto Block_6;
                            }
                        }
                    }
                Block_6:
                    grdzoomOut.Arrange(new Rect(size));
                    renderTargetBitmap.Render(grdzoomOut);
                    grdzoomOut.RenderTransform = null;
                    result = renderTargetBitmap;
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    result = renderTargetBitmap;
                }
                finally
                {
                    MemoryManagement.FlushMemory();
                }
            }
            while (!true);
            return result;
        }

        private RenderTargetBitmap CaptureScreenForGreenScreen(Grid forWdht, double dpiX, double dpiY, bool Isrotate)
        {
            if (-1 != 0)
            {
            }
            RenderTargetBitmap renderTargetBitmap = null;
            RenderTargetBitmap result;
            try
            {
                RenderOptions.SetBitmapScalingMode(forWdht, BitmapScalingMode.HighQuality);
                RenderOptions.SetEdgeMode(forWdht, EdgeMode.Aliased);
                if (false)
                {
                    goto IL_13E;
                }
                System.Windows.Size size = new System.Windows.Size(forWdht.ActualWidth, forWdht.ActualHeight);
                bool arg_57_0 = this._ZoomFactor > 1.4;
                bool expr_57;
                do
                {
                    expr_57 = (arg_57_0 = !arg_57_0);
                }
                while (3 == 0);
                bool flag = expr_57;
                if (flag)
                {
                    flag = (this._ZoomFactor <= 0.1);
                    goto IL_13E;
                }
            IL_66:
                int arg_C7_0 = (int)(size.Width * CroppingAdorner.s_dpiY / 96.0 * (1.0 / this._ZoomFactor));
            IL_8F:
                renderTargetBitmap = new RenderTargetBitmap(arg_C7_0, (int)(size.Height * CroppingAdorner.s_dpiY / 96.0 * (1.0 / this._ZoomFactor)), CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, PixelFormats.Default);
                RenderOptions.SetEdgeMode(forWdht, EdgeMode.Aliased);
                forWdht.SnapsToDevicePixels = true;
                forWdht.RenderTransform = new ScaleTransform(1.0 / this._ZoomFactor, 1.0 / this._ZoomFactor, 0.5, 0.5);
                if (!false)
                {
                    goto IL_273;
                }
                goto IL_239;
            IL_13E:
                if (!flag)
                {
                    renderTargetBitmap = new RenderTargetBitmap((int)(size.Width * CroppingAdorner.s_dpiY / 96.0), (int)(size.Height * CroppingAdorner.s_dpiY / 96.0), CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, PixelFormats.Pbgra32);
                    RenderOptions.SetEdgeMode(forWdht, EdgeMode.Aliased);
                    forWdht.SnapsToDevicePixels = true;
                    if (!false)
                    {
                        forWdht.RenderTransform = new ScaleTransform(1.0, 1.0, 0.5, 0.5);
                        goto IL_272;
                    }
                    goto IL_297;
                }
                else
                {
                    int expr_1F6 = arg_C7_0 = (int)(size.Width * CroppingAdorner.s_dpiY / 96.0 * this._ZoomFactor);
                    if (7 == 0)
                    {
                        goto IL_8F;
                    }
                    renderTargetBitmap = new RenderTargetBitmap(expr_1F6, (int)(size.Height * CroppingAdorner.s_dpiY / 96.0 * this._ZoomFactor), CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, PixelFormats.Default);
                    RenderOptions.SetEdgeMode(forWdht, EdgeMode.Aliased);
                }
            IL_239:
                forWdht.SnapsToDevicePixels = true;
                forWdht.RenderTransform = new ScaleTransform(this._ZoomFactor, this._ZoomFactor, 0.5, 0.5);
                if (-1 == 0)
                {
                    goto IL_66;
                }
            IL_272:
            IL_273:
                forWdht.Measure(size);
                forWdht.Arrange(new Rect(size));
                renderTargetBitmap.Render(forWdht);
                forWdht.RenderTransform = null;
            IL_297:
                result = renderTargetBitmap;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                result = renderTargetBitmap;
            }
            finally
            {
            }
            return result;
        }

        private RenderTargetBitmap CaptureScreenForPNGImage(Grid forWdht, double dpiX, double dpiY, bool Isrotate)
        {
            if (-1 != 0)
            {
            }
            RenderTargetBitmap renderTargetBitmap = null;
            RenderTargetBitmap result;
            try
            {
                RenderOptions.SetBitmapScalingMode(forWdht, BitmapScalingMode.HighQuality);
                RenderOptions.SetEdgeMode(forWdht, EdgeMode.Aliased);
                if (false)
                {
                    goto IL_13E;
                }
                System.Windows.Size size = new System.Windows.Size(forWdht.Width, forWdht.Height);
                bool arg_57_0 = this._ZoomFactor > 1.4;
                bool expr_57;
                do
                {
                    expr_57 = (arg_57_0 = !arg_57_0);
                }
                while (3 == 0);
                bool flag = expr_57;
                if (flag)
                {
                    flag = (this._ZoomFactor <= 0.1);
                    goto IL_13E;
                }
            IL_66:
                int arg_C7_0 = (int)(size.Width * CroppingAdorner.s_dpiY / 96.0 * (1.0 / this._ZoomFactor));
            IL_8F:
                renderTargetBitmap = new RenderTargetBitmap(arg_C7_0, (int)(size.Height * CroppingAdorner.s_dpiY / 96.0 * (1.0 / this._ZoomFactor)), CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, PixelFormats.Default);
                RenderOptions.SetEdgeMode(forWdht, EdgeMode.Aliased);
                forWdht.SnapsToDevicePixels = true;
                forWdht.RenderTransform = new ScaleTransform(1.0 / this._ZoomFactor, 1.0 / this._ZoomFactor, 0.5, 0.5);
                if (!false)
                {
                    goto IL_273;
                }
                goto IL_239;
            IL_13E:
                if (!flag)
                {
                    renderTargetBitmap = new RenderTargetBitmap((int)(size.Width * CroppingAdorner.s_dpiY / 96.0), (int)(size.Height * CroppingAdorner.s_dpiY / 96.0), CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, PixelFormats.Pbgra32);
                    RenderOptions.SetEdgeMode(forWdht, EdgeMode.Aliased);
                    forWdht.SnapsToDevicePixels = true;
                    if (!false)
                    {
                        forWdht.RenderTransform = new ScaleTransform(1.0, 1.0, 0.5, 0.5);
                        goto IL_272;
                    }
                    goto IL_297;
                }
                else
                {
                    int expr_1F6 = arg_C7_0 = (int)(size.Width * CroppingAdorner.s_dpiY / 96.0 * this._ZoomFactor);
                    if (7 == 0)
                    {
                        goto IL_8F;
                    }
                    renderTargetBitmap = new RenderTargetBitmap(expr_1F6, (int)(size.Height * CroppingAdorner.s_dpiY / 96.0 * this._ZoomFactor), CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, PixelFormats.Default);
                    RenderOptions.SetEdgeMode(forWdht, EdgeMode.Aliased);
                }
            IL_239:
                forWdht.SnapsToDevicePixels = true;
                forWdht.RenderTransform = new ScaleTransform(this._ZoomFactor, this._ZoomFactor, 0.5, 0.5);
                if (-1 == 0)
                {
                    goto IL_66;
                }
            IL_272:
            IL_273:
                forWdht.Measure(size);
                forWdht.Arrange(new Rect(size));
                renderTargetBitmap.Render(forWdht);
                forWdht.RenderTransform = null;
            IL_297:
                result = renderTargetBitmap;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                result = renderTargetBitmap;
            }
            finally
            {
            }
            return result;
        }

        private void Cartoonize_Click(object sender, RoutedEventArgs e)
        {
            this.effectPopup();
            this.CartoonizeAct.Visibility = Visibility.Visible;
            this.Cartoonizeeffect();
            this.LstGridEffects.Add("cartoonize");
        }

        private void Cartoonizeeffect()
        {
            try
            {
                try
                {
                    if (this._cartoon == "0")
                    {
                        this._cartoon = "1";
                        Cartoonize cartoonize;
                        do
                        {
                            cartoonize = new Cartoonize();
                            cartoonize.Width = 150.0;
                            cartoonize.Height = 150.0;
                            if (-1 == 0)
                            {
                                goto IL_92;
                            }
                        }
                        while (false);
                        this.Grdcartoonize.Effect = cartoonize;
                    }
                    else
                    {
                        this._cartoon = "0";
                        this.Grdcartoonize.Effect = null;
                    }
                IL_92:;
                }
                catch (Exception)
                {
                }
                while (false)
                {
                }
            }
            finally
            {
                LogEffect objeffectOperation;
                do
                {
                    objeffectOperation = default(LogEffect);
                }
                while (2 == 0);
                if (!false)
                {
                    if (false)
                    {
                        goto IL_11A;
                    }
                    objeffectOperation.effvalue = Convert.ToDouble(this._cartoon);
                    objeffectOperation.optname = "cartoon";
                }
                this.EffectLogOperation(objeffectOperation);
            IL_11A:;
            }
        }

        private void ChangeCheckedColor(string newColor)
        {
            this.UncheckAllColorFilter();
            string text = newColor.ToString();
            Dictionary<string, int> Obj = null;
            if (text != null)
            {
                if (Obj == null)
                {
                    Obj = new Dictionary<string, int>(9)
            {
                {
                    "red",
                    0
                },
                {
                    "yellow",
                    1
                },
                {
                    "lightred",
                    2
                },
                {
                    "lime",
                    3
                },
                {
                    "magenta",
                    4
                },
                {
                    "blue",
                    5
                },
                {
                    "skyblue",
                    6
                },
                {
                    "green",
                    7
                },
                {
                    "orange",
                    8
                }
            };
                }
                int num;
                if (Obj.TryGetValue(text, out num))
                {
                    int arg_C1_0 = num;
                    while (true)
                    {
                        switch (arg_C1_0)
                        {
                            case 0:
                                goto IL_F5;
                            case 1:
                                goto IL_11E;
                            case 2:
                                goto IL_147;
                            case 3:
                                goto IL_170;
                            case 4:
                                goto IL_199;
                            case 5:
                                goto IL_1C2;
                            case 6:
                                goto IL_1E8;
                            case 7:
                                goto IL_20E;
                            case 8:
                                VisualStateManager.GoToState(this.btnOrange, "Checked", true);
                                arg_C1_0 = (VisualStateManager.GoToState(this.btnColorFilters, "Checked", true) ? 1 : 0);
                                if (!false)
                                {
                                    return;
                                }
                                continue;
                        }
                        break;
                    }
                    if (-1 != 0)
                    {
                        return;
                    }
                    goto IL_232;
                IL_F5:
                    VisualStateManager.GoToState(this.btnRed, "Checked", true);
                    VisualStateManager.GoToState(this.btnColorFilters, "Checked", true);
                    return;
                IL_11E:
                    VisualStateManager.GoToState(this.btnYellow, "Checked", true);
                    VisualStateManager.GoToState(this.btnColorFilters, "Checked", true);
                    return;
                IL_147:
                    VisualStateManager.GoToState(this.btnLightRed, "Checked", true);
                    VisualStateManager.GoToState(this.btnColorFilters, "Checked", true);
                    return;
                IL_170:
                    VisualStateManager.GoToState(this.btnLime, "Checked", true);
                    VisualStateManager.GoToState(this.btnColorFilters, "Checked", true);
                    return;
                IL_199:
                    VisualStateManager.GoToState(this.btnMagenta, "Checked", true);
                    VisualStateManager.GoToState(this.btnColorFilters, "Checked", true);
                    return;
                IL_1C2:
                    VisualStateManager.GoToState(this.btnBlue, "Checked", true);
                    VisualStateManager.GoToState(this.btnColorFilters, "Checked", true);
                    return;
                IL_1E8:
                    VisualStateManager.GoToState(this.btnSkblue, "Checked", true);
                    VisualStateManager.GoToState(this.btnColorFilters, "Checked", true);
                    return;
                IL_20E:
                    VisualStateManager.GoToState(this.btnGreen, "Checked", true);
                    VisualStateManager.GoToState(this.btnColorFilters, "Checked", true);
                IL_232:;
                }
            }
        }

        private void ChangeCheckedEffect()
        {
            if (this._GreyScale != "0")
            {
                VisualStateManager.GoToState(this.btnGreyScale, "Checked", true);
                VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
            }
            if (4 != 0)
            {
                bool arg_6F_0 = !(this._sepia != "0");
                bool expr_2C2;
                while (true)
                {
                    if (!arg_6F_0)
                    {
                        VisualStateManager.GoToState(this.btnSepia, "Checked", true);
                        VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                    }
                    bool arg_AA_0 = this._defoger != "0";
                    int arg_AA_1 = 0;
                    int expr_11E;
                    int expr_124;
                    do
                    {
                        if ((arg_AA_0 ? 1 : 0) != arg_AA_1)
                        {
                            VisualStateManager.GoToState(this.btnDefogger, "Checked", true);
                            VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                        }
                        if (this._underwater != "0")
                        {
                            VisualStateManager.GoToState(this.btnUnderWater, "Checked", true);
                            VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                        }
                        expr_11E = ((arg_AA_0 = (this._invert != "0")) ? 1 : 0);
                        expr_124 = (arg_AA_1 = 0);
                    }
                    while (expr_124 != 0);
                    bool flag = expr_11E == expr_124;
                    bool arg_12E_0 = flag;
                    while (true)
                    {
                        if (!arg_12E_0)
                        {
                            VisualStateManager.GoToState(this.btnInvert, "Checked", true);
                            VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                        }
                        if (this._emboss != "0")
                        {
                            VisualStateManager.GoToState(this.btnEmboss, "Checked", true);
                            VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                        }
                        if (this._granite != "0")
                        {
                            VisualStateManager.GoToState(this.btnEdgeDetect, "Checked", true);
                            VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                        }
                        if (this._cartoon != "0")
                        {
                            VisualStateManager.GoToState(this.Cartoonize, "Checked", true);
                            VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                        }
                        if (this._Sharepen != "##")
                        {
                            flag = (this.sharpen == 0.05 || this.checkDigimagic);
                            bool expr_241 = arg_6F_0 = flag;
                            if (5 == 0)
                            {
                                break;
                            }
                            if (!expr_241)
                            {
                                VisualStateManager.GoToState(this.btnSharpen, "Checked", true);
                                VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                            }
                        }
                        if (this._hue != "##")
                        {
                            VisualStateManager.GoToState(this.btnHue, "Checked", true);
                            VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                        }
                        flag = !(this._digimagic != "##");
                        expr_2C2 = (arg_12E_0 = flag);
                        if (-1 != 0)
                        {
                            goto Block_16;
                        }
                    }
                }
            Block_16:
                if (expr_2C2)
                {
                    return;
                }
            }
            if (this.checkDigimagic)
            {
                VisualStateManager.GoToState(this.btnDigiMagic, "Checked", true);
                VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
            }
        }

        private void checkbox_Click(object sender, RoutedEventArgs e)
        {
            bool arg_DD_0;
            bool arg_F5_0 = arg_DD_0 = base.IsInitialized;
            bool flag;
            bool expr_84;
            while (true)
            {
                bool arg_37_0;
                if (true)
                {
                    flag = arg_DD_0;
                    if (!flag)
                    {
                        break;
                    }
                    arg_37_0 = (sender == this.ignorepsiCheckbox);
                    goto IL_36;
                }
            IL_39:
                if (!false)
                {
                    flag = arg_F5_0;
                }
                bool arg_45_0 = flag;
                do
                {
                    if (!arg_45_0)
                    {
                        this.attribute.IgnorePressure = (this.ignorepsiCheckbox.IsChecked != true);
                    }
                    expr_84 = (arg_37_0 = (arg_45_0 = (arg_DD_0 = (arg_F5_0 = (sender != this.fitcurveCheckbox)))));
                    if (-1 == 0)
                    {
                        goto IL_36;
                    }
                }
                while (false);
                if (-1 != 0)
                {
                    goto Block_8;
                }
                continue;
            IL_36:
                arg_F5_0 = ((arg_37_0 ? 1 : 0) == 0);
                goto IL_39;
            }
            if (7 != 0)
            {
                return;
            }
            goto IL_C4;
        Block_8:
            flag = expr_84;
            if (false)
            {
                return;
            }
            if (!flag)
            {
                this.attribute.FitToCurve = (this.fitcurveCheckbox.IsChecked == true);
            }
        IL_C4:
            this.UpdateControlVisuals();
        }

        private void ChkBackground_Checked(object sender, RoutedEventArgs e)
        {
            bool? isChecked = this.rdbBackgroundGreen.IsChecked;
            if (!isChecked.GetValueOrDefault())
            {
                goto IL_27;
            }
            int arg_2A_0 = isChecked.HasValue ? 1 : 0;
        IL_28:
            while (arg_2A_0 != 0)
            {
                System.Windows.Media.Color arg_121_0 = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFFFFFFF");
                isChecked = this.ChkForground.IsChecked;
                int arg_71_0;
                if (isChecked.GetValueOrDefault())
                {
                    arg_71_0 = (arg_2A_0 = (isChecked.HasValue ? 1 : 0));
                    if (7 == 0)
                    {
                        continue;
                    }
                }
                else
                {
                    arg_71_0 = 0;
                }
                int arg_AA_0;
                bool expr_71 = (arg_AA_0 = ((arg_71_0 == 0) ? 1 : 0)) != 0;
                bool arg_B1_0;
                if (!false)
                {
                    bool flag = expr_71;
                    bool expr_77 = arg_B1_0 = flag;
                    if (5 != 0)
                    {
                        if (!expr_77)
                        {
                        }
                        goto IL_B6;
                    }
                }
                else
                {
                IL_A9:
                    bool arg_AC_0 = arg_AA_0 == 0;
                IL_AC:
                    bool flag = arg_AC_0;
                    if (false)
                    {
                        goto IL_CA;
                    }
                    arg_B1_0 = flag;
                }
                if (!arg_B1_0)
                {
                }
            IL_B6:
                this.canbackgroundold.Opacity = 1.0;
            IL_CA:
                this.canbackground.Opacity = 1.0;
                return;
            }
            if (!false)
            {
                isChecked = this.ChkForground.IsChecked;
                int arg_AA_0;
                bool arg_AC_0 = ((!isChecked.GetValueOrDefault()) ? (arg_AA_0 = 0) : (arg_AA_0 = (isChecked.HasValue ? 1 : 0))) != 0;

            }
        IL_27:
            arg_2A_0 = 0;
            // goto IL_28;
        }

        private void ChkBackground_Unchecked(object sender, RoutedEventArgs e)
        {
            bool? isChecked = this.ChkForground.IsChecked;
            while (true)
            {
                if (!isChecked.GetValueOrDefault())
                {
                    goto IL_27;
                }
                int arg_2D_0;
                int arg_8D_0 = arg_2D_0 = (isChecked.HasValue ? 1 : 0);
            IL_28:
                if (3 != 0)
                {
                    if (arg_2D_0 != 0)
                    {
                        if (!false)
                        {
                        }
                        this.MyInkCanvas.Visibility = Visibility.Visible;
                        this.canbackground.Opacity = 0.0;
                    }
                IL_66:
                    if (false)
                    {
                        goto IL_94;
                    }
                    isChecked = this.ChkForground.IsChecked;
                    if (!false)
                    {
                        arg_8D_0 = ((isChecked == false) ? 1 : 0);
                        goto IL_8C;
                    }
                    goto IL_66;
                }
                goto IL_8C;
            IL_B0:
                if (!false)
                {
                    break;
                }
                continue;
            IL_8C:
                if (arg_8D_0 == 0)
                {
                    goto IL_B0;
                }
            IL_94:
                this.canbackgroundold.Opacity = 0.0;
                if (!false)
                {
                    goto IL_B0;
                }
            IL_27:
                arg_8D_0 = (arg_2D_0 = 0);
                goto IL_28;
            }
        }

        private void ChkForground_Checked(object sender, RoutedEventArgs e)
        {
            if (false)
            {
                goto IL_11;
            }
        IL_04:
            if (6 == 0)
            {
                goto IL_28;
            }
            this.MyInkCanvas.Visibility = Visibility.Visible;
        IL_11:
            if (!false)
            {
                this.canbackgroundold.Opacity = 1.0;
            }
        IL_28:
            if (!false)
            {
                return;
            }
            goto IL_04;
        }

        private void ChkForground_Unchecked(object sender, RoutedEventArgs e)
        {
            bool flag;
            do
            {
                this.MyInkCanvas.Visibility = Visibility.Collapsed;
                if (8 == 0)
                {
                    goto IL_3A;
                }
                if (!false)
                {
                    bool? isChecked = this.ChkBackground.IsChecked;
                    int arg_2F_0;
                    bool arg_80_0 = (isChecked.GetValueOrDefault() ? (arg_2F_0 = 0) : (arg_2F_0 = (isChecked.HasValue ? 1 : 0))) != 0;
                    if (!false)
                    {
                        arg_80_0 = (arg_2F_0 == 0);
                    }
                    flag = arg_80_0;
                }
            }
            while (8 == 0);
            if (flag)
            {
                return;
            }
        IL_3A:
            this.canbackgroundold.Opacity = 0.0;
            if (!false)
            {
            }
        }

        private void ChkShowAll_Click(object sender, RoutedEventArgs e)
        {
            while (true)
            {
                bool flag = this.imageundoGrid.Background == null;
                if (-1 != 0)
                {
                    if (!flag)
                    {
                        this.imageundoGrid.Background.Opacity = 1.0;
                    }
                }
                while (true)
                {
                IL_3A:
                    if (!false)
                    {
                        this.MyInkCanvas.Visibility = Visibility.Visible;
                    }
                IL_48:
                    this.ChkForground.IsChecked = new bool?(true);
                    this.ChkBackground.IsChecked = new bool?(true);
                    if (5 == 0)
                    {
                        continue;
                    }
                    if (8 != 0)
                    {
                        break;
                    }
                    goto IL_48;
                }
                if (!false)
                {
                    break;
                }
                continue;
                //goto IL_3A;
            }
        }

        private void ClearResources()
        {
            this.btnPreviousimg.Click -= new RoutedEventHandler(this.btnPreviousNextimg_Click);
            this.btnrestoremainimg.Click -= new RoutedEventHandler(this.btnrestoremainimg_Click);
            this.btnRestoreGraphics.Click -= new RoutedEventHandler(this.btnRestoreGraphics_Click);
            this.btnAddgraphics.Click -= new RoutedEventHandler(this.btnAddgraphics_Click);
            this.CancelButton.Click -= new RoutedEventHandler(this.CancelButton_Click);
            this.btnundo.Click -= new RoutedEventHandler(this.btnundo_Click);
            if (!false)
            {
                this.btnantirotate.Click -= new RoutedEventHandler(this.btnantirotate_Click);
                this.btnPhotoID.Click -= new RoutedEventHandler(this.btnPhotoID_Click);
                this.btnModerate.Click -= new RoutedEventHandler(this.btnModerate_Click);
                this.btnrotate.Click -= new RoutedEventHandler(this.btnRotateclick_Click);
                this.btnLogout.Click -= new RoutedEventHandler(this.btnLogout_Click);
                this.btnSearchPhoto.Click -= new RoutedEventHandler(this.btnSearch_Click);
                this.btnflip.Click -= new RoutedEventHandler(this.btnflip_Click);
                base.Closed -= new EventHandler(this.Window_Closed);
                base.Loaded -= new RoutedEventHandler(this.Window_Loaded);
                base.Unloaded -= new RoutedEventHandler(this.Window_Unloaded);
                this.btnBringToFront.Click -= new RoutedEventHandler(this.BringToFront_Click);
                this.btnSendToBack.Click -= new RoutedEventHandler(this.SendToBack_Click);
                this.btnHome.Click -= new RoutedEventHandler(this.btnHome_Click);
                this.BrightnessGreen.LayoutUpdated -= new EventHandler(this.GrdBrightness_LayoutUpdated);
                this.btnCrop.Click -= new RoutedEventHandler(this.btnCrop_Click);
                this.OkButton.Click -= new RoutedEventHandler(this.OkButton_Click);
                this.btnenlargeplus.Click -= new RoutedEventHandler(this.btnenlargeplus_Click);
                this.btnenlargeminus.Click -= new RoutedEventHandler(this.btnenlargeminus_Click);
                this.btnselect.Click -= new RoutedEventHandler(this.btnselect_Click);
                if (false)
                {
                    goto IL_F39;
                }
                this.btnselect8By11.Click -= new RoutedEventHandler(this.btnselectEightByEleven_Click);
                this.btnSelectReverse.Click -= new RoutedEventHandler(this.btnSelectReverse_Click);
                this.btnSelectCrop4by6.Click -= new RoutedEventHandler(this.btnSelectCrop4by6_Click);
                this.btnSelectCrop5by7.Click -= new RoutedEventHandler(this.btnSelectCrop5by7_Click);
                this.btnselected.Click -= new RoutedEventHandler(this.btnSelectCrop3by3_Click);
                this.btnColorEffects.Click -= new RoutedEventHandler(this.btnColorEffects_Click);
                this.BrightnessPlus.Click -= new RoutedEventHandler(this.BrightnessPlus_Click);
                this.BrightnessMinus.Click -= new RoutedEventHandler(this.BrightnessMinus_Click);
                this.ContrastPlus.Click -= new RoutedEventHandler(this.ContrastPlus_Click);
                this.ContrastMinus.Click -= new RoutedEventHandler(this.ContrastMinus_Click);
                this.OkButtoncolor.Click -= new RoutedEventHandler(this.OkButtoncolor_Click);
                while (true)
                {
                    this.CancelButtoncolor.Click -= new RoutedEventHandler(this.CancelButtoncolor_Click);
                    this.btnRestoreBrightCont.Click -= new RoutedEventHandler(this.btnRestoreBrightCont_Click);
                    this.RedEye.Click -= new RoutedEventHandler(this.RemoveRedEye_Click);
                    this.RedEye1.Click -= new RoutedEventHandler(this.RemoveRedEyeinternal_Click);
                    this.mainImage.MouseMove -= new MouseEventHandler(this.mainImage_MouseMove_1);
                    this.ellipse.MouseLeftButtonDown -= new MouseButtonEventHandler(this.ellipse_MouseLeftButtonDown);
                    this.btnredeyeRestore.Click -= new RoutedEventHandler(this.btnredeyeRestore_Click);
                    this.btntoolsredeye.Click -= new RoutedEventHandler(this.btntoolsredeye_Click);
                    this.CancelButtonredeye.Click -= new RoutedEventHandler(this.CancelButtonredeye_Click);
                    this.OkButtonredeye.Click -= new RoutedEventHandler(this.OkButtonredeye_Click);
                    this.btnColorEffectsfilters.Click -= new RoutedEventHandler(this.btnColorEffectsfilters_Click);
                    this.CancelButtoncoloreffect.Click -= new RoutedEventHandler(this.CancelButtoncoloreffect_Click);
                    this.OkButtoncoloreffect.Click -= new RoutedEventHandler(this.OkButtoncoloreffect_Click);
                    this.btnSharpen.Click -= new RoutedEventHandler(this.btnSharpen_Click);
                    this.btnInvert.Click -= new RoutedEventHandler(this.btnInvert_Click);
                    this.btnGreyScale.Click -= new RoutedEventHandler(this.btnGreyScale_Click);
                    this.btnEdgeDetect.Click -= new RoutedEventHandler(this.btnEdgeDetect_Click);
                    this.btnEmboss.Click -= new RoutedEventHandler(this.btnEmboss_Click);
                    this.btnSepia.Click -= new RoutedEventHandler(this.btnSepia_Click);
                    this.btnDefogger.Click -= new RoutedEventHandler(this.btnDefogger_Click);
                    this.btnDigiMagic.Click -= new RoutedEventHandler(this.btnDigiMagic_Click);
                    this.btnUnderWater.Click -= new RoutedEventHandler(this.btnUnderWater_Click);
                    this.btnundocoloreffects.Click -= new RoutedEventHandler(this.btnundocoloreffects_Click);
                    this.btnRestore.Click -= new RoutedEventHandler(this.btnRestore_Click);
                    this.Cartoonize.Click -= new RoutedEventHandler(this.Cartoonize_Click);
                    this.btnHue.Click -= new RoutedEventHandler(this.btnHue_Click);
                    this.btnColorFilters.Click -= new RoutedEventHandler(this.btnColorFilters_Click);
                    this.btntoolscolorfilter.Click -= new RoutedEventHandler(this.btntoolscolorfilter_Click);
                    this.btnRed.Click -= new RoutedEventHandler(this.btnRed_Click);
                    this.btnGreen.Click -= new RoutedEventHandler(this.btnGreen_Click);
                    this.btnBlue.Click -= new RoutedEventHandler(this.btnBlue_Click);
                    this.btnMagenta.Click -= new RoutedEventHandler(this.btnMagenta_Click);
                    this.btnLime.Click -= new RoutedEventHandler(this.btnLime_Click);
                    while (true)
                    {
                    IL_68E:
                        this.btnOrange.Click -= new RoutedEventHandler(this.btnOrange_Click);
                        this.btnYellow.Click -= new RoutedEventHandler(this.btnYellow_Click);
                        this.btnSkblue.Click -= new RoutedEventHandler(this.btnSkblue_Click);
                        this.btnLightRed.Click -= new RoutedEventHandler(this.btnLightRed_Click);
                        this.btnRestorecolorfilters.Click -= new RoutedEventHandler(this.btnRestorecolorfilters_Click);
                        this.OkButtoncolorfilter.Click -= new RoutedEventHandler(this.OkButtoncolorfilter_Click);
                        this.CancelButtoncolorfilter.Click -= new RoutedEventHandler(this.CancelButtoncolorfilter_Click);
                        this.jrotate.AngleChanged -= new JRotate.JAngleChangedDelegate(this.angleAltitudeSelector1_AngleChanged);
                        if (false)
                        {
                            break;
                        }
                        this.txtContent.TextChanged -= new TextChangedEventHandler(this.txtContent_TextChanged);
                        while (true)
                        {
                            this.cmbFont.SelectionChanged -= new SelectionChangedEventHandler(this.cmbFont_SelectionChanged);
                            this.CmbColor.SelectionChanged -= new SelectionChangedEventHandler(this.CmbColor_SelectionChanged);
                            this.CmbFontSize.SelectionChanged -= new SelectionChangedEventHandler(this.CmbFontSize_SelectionChanged);
                            this.btndecreasecircle.Click -= new RoutedEventHandler(this.btndecreasecircle_Click);
                            this.btnincreasecircle.Click -= new RoutedEventHandler(this.btnincreasecircle_Click);
                            this.btnEraser.Click -= new RoutedEventHandler(this.btnEraser_Click);
                            this.btndecreasecirclegreen.Click -= new RoutedEventHandler(this.btnrectdecreasecircle_Click);
                            this.btnincreasecirclegreen.Click -= new RoutedEventHandler(this.btnrectincreasecircle_Click);
                            this.btnButton_Click_small.Click -= new RoutedEventHandler(this.Button_Click_small);
                            this.btnButton_Click_medium.Click -= new RoutedEventHandler(this.Button_Click_medium);
                            this.btnButton_Click_large.Click -= new RoutedEventHandler(this.Button_Click_large);
                            this.btnButton_Click_large1.Click -= new RoutedEventHandler(this.Button_Click_large);
                            this.btnButton_Click_small1.Click -= new RoutedEventHandler(this.Button_Click_small);
                            this.btnButton_Click_medium1.Click -= new RoutedEventHandler(this.Button_Click_medium);
                            this.btnButton_Click_verylarge.Click -= new RoutedEventHandler(this.Button_Click_verylarge);
                            this.btnStroke.Click -= new RoutedEventHandler(this.Button_Click_stroke);
                            this.btnSelect.Click -= new RoutedEventHandler(this.Button_Click_select);
                            this.btnDelete.Click -= new RoutedEventHandler(this.Button_Click_delete);
                            this.btnrotateGraphics.Click -= new RoutedEventHandler(this.btnrotateGraphics_Click);
                            this.btnRotateInButton.Click -= new RoutedEventHandler(this.RotateInButton_Click);
                            while (true)
                            {
                                this.btnAntiRotate.Click -= new RoutedEventHandler(this.AntiRotateButton_Click);
                                this.btnmovedown.Click -= new RoutedEventHandler(this.btnmovedown_Click);
                                if (false)
                                {
                                    goto IL_68E;
                                }
                                this.btnmoveup.Click -= new RoutedEventHandler(this.btnmoveup_Click);
                                this.btnmoveLeft.Click -= new RoutedEventHandler(this.btnmoveLeft_Click);
                                this.btnmoveRight.Click -= new RoutedEventHandler(this.btnmoveRight_Click);
                                this.btnSQBig.Click -= new RoutedEventHandler(this.btnSQBig_Click);
                                this.btnCirBig.Click -= new RoutedEventHandler(this.btnCirBig_Click);
                                this.btnrecteraseMedium.Click -= new RoutedEventHandler(this.btnrecteraseMedium_Click);
                                this.btncireraseMedium.Click -= new RoutedEventHandler(this.btncireraseMedium_Click);
                                this.btnrectsmall.Click -= new RoutedEventHandler(this.btnrectsmall_Click);
                                this.btnStartMove.Click -= new RoutedEventHandler(this.btnStartMove_Click);
                                this.btnViewGroup.Click -= new RoutedEventHandler(this.btnViewGroup_Click);
                                this.btnPrintToGroup.Click -= new RoutedEventHandler(this.btnPrintToGroup_Click);
                                this.btnPlaceOrder.Click -= new RoutedEventHandler(this.btnPlaceOrder_Click);
                                this.print6by8.Click -= new RoutedEventHandler(this.print6by8_Click);
                                this.print8by10.Click -= new RoutedEventHandler(this.print8by10_Click);
                                this.btnClose1.Click -= new RoutedEventHandler(this.btnClose1_Click);
                                this.btnGreenScreen.Click -= new RoutedEventHandler(this.btnGreenScreen_Click);
                                this.btnGreenScreenBackGround.Click -= new RoutedEventHandler(this.btnGreenScreenBackGround_Click);
                                this.btntoolsgreenscreen.Click -= new RoutedEventHandler(this.btntoolsgreenscreen_Click);
                                this.btnDefaultGreenScreen.Click -= new RoutedEventHandler(this.btnDefaultGreenScreen_Click);
                                this.OkButtonGreenScreen.Click -= new RoutedEventHandler(this.OkButtonGreenScreen_Click);
                                this.CancelButtonGreenScreen.Click -= new RoutedEventHandler(this.CancelButtonGreenScreen_Click);
                                this.btnFillPlus.Click -= new RoutedEventHandler(this.Button_Click_FillPlus);
                                this.btnFillMinus.Click -= new RoutedEventHandler(this.Button_Click_FillMinus);
                                this.btnTOIPlus.Click -= new RoutedEventHandler(this.Button_Click_TolPlus);
                                this.btnTOIMinus.Click -= new RoutedEventHandler(this.Button_Click_TolMinus);
                                do
                                {
                                    this.rdbRevert.Checked -= new RoutedEventHandler(this.Button_Click_Revert);
                                    this.rdbErase.Checked -= new RoutedEventHandler(this.Button_Click_Erase);
                                    this.btnrectsmall.Click -= new RoutedEventHandler(this.btnrectsmall150_Click);
                                    this.btnrectsmall100.Click -= new RoutedEventHandler(this.btnrectsmall100_Click);
                                    this.btnrectsmall75.Click -= new RoutedEventHandler(this.btnrectsmall75_Click);
                                    this.btnrectsmall50.Click -= new RoutedEventHandler(this.btnrectsmall50_Click);
                                    this.btnrectsmall25.Click -= new RoutedEventHandler(this.btnrectsmall25_Click);
                                }
                                while (false);
                                this.btnrectsmall15.Click -= new RoutedEventHandler(this.btnrectsmall15_Click);
                                this.btnrectsmall10.Click -= new RoutedEventHandler(this.btnrectsmall10_Click);
                                this.btnrectsmall5.Click -= new RoutedEventHandler(this.btnrectsmall5_Click);
                                this.btncirsmall.Click -= new RoutedEventHandler(this.btncirsmall150_Click);
                                this.btncirsmall100.Click -= new RoutedEventHandler(this.btncirsmall100_Click);
                                this.btncirsmall75.Click -= new RoutedEventHandler(this.btncirsmall75_Click);
                                this.btncirsmall50.Click -= new RoutedEventHandler(this.btncirsmall50_Click);
                                while (true)
                                {
                                    this.btncirsmall25.Click -= new RoutedEventHandler(this.btncirsmall25_Click);
                                    this.btncirsmall15.Click -= new RoutedEventHandler(this.btncirsmall15_Click);
                                    this.btncirsmall10.Click -= new RoutedEventHandler(this.btncirsmall10_Click);
                                    this.btncirsmall5.Click -= new RoutedEventHandler(this.btncirsmall5_Click);
                                    this.tabCroma.GotFocus -= new RoutedEventHandler(this.TabItem_GotFocus);
                                    this.tabCroma.LostFocus -= new RoutedEventHandler(this.TabItem_LostFocus);
                                    this.ChkForground.Checked -= new RoutedEventHandler(this.ChkForground_Checked);
                                    this.ChkForground.Unchecked -= new RoutedEventHandler(this.ChkForground_Unchecked);
                                    this.ChkBackground.Checked -= new RoutedEventHandler(this.ChkBackground_Checked);
                                    this.ChkBackground.Unchecked -= new RoutedEventHandler(this.ChkBackground_Unchecked);
                                    this.rdbForgroundGreen.Checked -= new RoutedEventHandler(this.rdbForgroundGreen_Checked);
                                    this.rdbBackgroundGreen.Checked -= new RoutedEventHandler(this.rdbBackgroundGreen_Checked);
                                    this.ChkShowAll.Click -= new RoutedEventHandler(this.ChkShowAll_Click);
                                    if (8 == 0)
                                    {
                                        break;
                                    }
                                    this.ChromaRed.Click -= new RoutedEventHandler(this.Red_Click);
                                    this.ChromaGreen.Click -= new RoutedEventHandler(this.Green_Click);
                                    this.ChromaBlue.Click -= new RoutedEventHandler(this.Blue_Click);
                                    this.ChromaGray.Click -= new RoutedEventHandler(this.Gray_Click);
                                    this.MyInkCanvas.KeyDown -= new KeyEventHandler(this.MyInkCanvas_KeyDown);
                                    if (6 != 0)
                                    {
                                        goto Block_7;
                                    }
                                }
                            }
                        Block_7:
                            this.MyInkCanvas.MouseEnter -= new MouseEventHandler(this.MyInkCanvas_MouseEnter);
                            if (true)
                            {
                                goto Block_8;
                            }
                        }
                    }
                }
            Block_8:
                this.btnExittoSearch.Click -= new RoutedEventHandler(this.btnExittoSearch_Click);
            }
            this.CmbProductType.SelectionChanged -= new SelectionChangedEventHandler(this.CmbProductType_SelectionChanged);
        IL_F39:
            this.btnRepeat.MouseWheel -= new MouseWheelEventHandler(this.RepeatButton_MouseWheel);
            this.canbackgroundold.MouseWheel -= new MouseWheelEventHandler(this.canbackgroundold_MouseWheel);
            this.btnRepeat.MouseWheel -= new MouseWheelEventHandler(this.RepeatButton_MouseWheel_1);
            this.btnRepeat.MouseWheel -= new MouseWheelEventHandler(this.RepeatButton_MouseWheel_2);
            this.jrotate.MouseWheel -= new MouseWheelEventHandler(this.jrotate_MouseWheel);
        }

        private void CmbColor_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            while (this.elementForContextMenu != null)
            {
                bool arg_2E_0 = this.elementForContextMenu is TextBox;
                bool expr_94;
                do
                {
                    bool flag = !arg_2E_0;
                    expr_94 = (arg_2E_0 = flag);
                }
                while (7 == 0);
                if (!expr_94)
                {
                    if (this.CmbColor.SelectedValue != null)
                    {
                        TextBox textBox = (TextBox)this.elementForContextMenu;
                        textBox.Foreground = (SolidColorBrush)this.CmbColor.SelectedValue;
                        this.txtContent.Foreground = (SolidColorBrush)this.CmbColor.SelectedValue;
                    }
                    if (false)
                    {
                        continue;
                    }
                }
                break;
            }
        }

        private void cmbFont_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            while (this.elementForContextMenu != null)
            {
                bool arg_2E_0 = this.elementForContextMenu is TextBox;
                bool expr_94;
                do
                {
                    bool flag = !arg_2E_0;
                    expr_94 = (arg_2E_0 = flag);
                }
                while (7 == 0);
                if (!expr_94)
                {
                    if (this.cmbFont.SelectedValue != null)
                    {
                        TextBox textBox = (TextBox)this.elementForContextMenu;
                        textBox.FontFamily = (System.Windows.Media.FontFamily)this.cmbFont.SelectedValue;
                        this.txtContent.FontFamily = (System.Windows.Media.FontFamily)this.cmbFont.SelectedValue;
                    }
                    if (false)
                    {
                        continue;
                    }
                }
                break;
            }
        }

        private void CmbFontSize_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            bool flag;
            if (!false)
            {
                if (4 == 0)
                {
                    goto IL_54;
                }
                flag = (this.elementForContextMenu == null);
                if (8 == 0)
                {
                    return;
                }
                if (flag)
                {
                    return;
                }
            }
            if (!(this.elementForContextMenu is TextBox))
            {
                return;
            }
            flag = (this.CmbFontSize.SelectedValue == null);
            if (4 != 0)
            {
                if (flag)
                {
                    return;
                }
            }
        IL_54:
            TextBox textBox = (TextBox)this.elementForContextMenu;
            if (5 != 0)
            {
                textBox.FontSize = Convert.ToDouble(this.CmbFontSize.SelectedValue.ToString());
                this.txtContent.FontSize = Convert.ToDouble(this.CmbFontSize.SelectedValue.ToString());
            }
        }

        private void CmbProductType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            bool flag = this.previouscounter != -1;
            while (true)
            {
                if (flag)
                {
                    goto IL_C3;
                }
                int num;
                if (5 != 0)
                {
                    num = 0;
                    goto IL_2D;
                }
                goto IL_DB;
                DependencyObject dependencyObject;
                while (true)
                {
                IL_6C:
                    if (!flag)
                    {
                        this.EffectsSender = this.FindVisualChild<Button>(dependencyObject, this.borderName);
                    }
                    flag = (this.EffectsSender == null);
                    if (flag)
                    {
                        break;
                    }
                    if (!false)
                    {
                        goto Block_8;
                    }
                }
                goto IL_A3;
            Block_8:
                this.lstFrame.SelectedIndex = num;
                goto IL_C2;
            IL_A8:
                flag = (num < this.lstFrame.Items.Count);
                if (!flag)
                {
                    goto IL_C2;
                }
                if (7 == 0)
                {
                    continue;
                }
                do
                {
                    DependencyObject dependencyObject2 = this.lstFrame.ItemContainerGenerator.ContainerFromIndex(num);
                    if (dependencyObject2 == null)
                    {
                        goto IL_A3;
                    }
                    dependencyObject = MainWindow.FindVisualChild1<Grid>(dependencyObject2);
                }
                while (false);
                if (4 != 0)
                {
                    flag = (dependencyObject == null);
                    //goto IL_6C;
                }
            IL_2D:
                goto IL_A8;
            IL_A3:
                num++;
                goto IL_A8;
            IL_DB:
                if (!false)
                {
                    break;
                }
            //goto IL_6C;
            IL_C3:
                this.previouscounter = -1;
                this.Effects_Click(this.EffectsSender, new RoutedEventArgs());
                goto IL_DB;
            IL_C2:
                goto IL_C3;
            }
        }


        public static T FindChild<T>(DependencyObject parent, string childName) where T : DependencyObject
        {
            int arg_119_0 = (parent != null) ? 1 : 0;
            T t;
            DependencyObject child;
            int childrenCount = 0;
            int arg_96_0 = 0;
            int num = 0;
            while (true)
            {

                if (arg_119_0 == 0)
                {
                    if (!false)
                    {
                        break;
                    }
                    goto IL_81;
                }
                else
                {
                    t = default(T);
                    childrenCount = VisualTreeHelper.GetChildrenCount(parent);
                    int expr_4A = arg_96_0 = 0;
                    if (expr_4A == 0)
                    {
                        num = expr_4A;
                        goto IL_FB;
                    }
                    goto IL_96;
                }
            IL_CC:
                if (false)
                {
                    continue;
                }
                bool arg_D6_0;
                if (!false)
                {
                    if (!arg_D6_0)
                    {
                        goto Block_10;
                    }
                    goto IL_F3;
                }
            IL_AA:
                int arg_AA_0;
                if (arg_AA_0 != 0)
                {
                    goto IL_E9;
                }
                FrameworkElement frameworkElement = child as FrameworkElement;
                if (frameworkElement != null)
                {
                    arg_D6_0 = ((arg_AA_0 = (arg_119_0 = ((!(frameworkElement.Name == childName)) ? 1 : 0))) != 0);
                    goto IL_CC;
                }
                goto IL_CB;
            IL_FB:
                int arg_F9_0;
                int expr_FB = arg_F9_0 = num;
                int arg_F9_1;
                int expr_FC = arg_F9_1 = childrenCount;
                if (false)
                {
                    goto IL_F9;
                }
                if (expr_FB >= expr_FC)
                {
                    goto IL_10B;
                }
                child = VisualTreeHelper.GetChild(parent, num);
                T t2 = child as T;
                if (t2 == null)
                {
                    goto IL_81;
                }
                bool flag = string.IsNullOrEmpty(childName);
                arg_AA_0 = (flag ? 1 : 0);
                goto IL_AA;
            IL_CB:
                arg_D6_0 = ((arg_AA_0 = (arg_119_0 = 1)) != 0);
                goto IL_CC;
            IL_96:
                if (arg_96_0 == 0)
                {
                    goto Block_4;
                }
                if (!false)
                {
                    goto IL_F3;
                }
                goto IL_CB;
            IL_81:
                t = MainWindow.FindChild<T>(child, childName);
                flag = (t == null);
                arg_96_0 = (flag ? 1 : 0);
                goto IL_96;
            IL_F3:
                if (false)
                {
                    goto IL_FB;
                }
                arg_F9_0 = num;
                arg_F9_1 = 1;
            IL_F9:
                num = arg_F9_0 + arg_F9_1;
                goto IL_FB;
            }
            T result = default(T);
            return result;
        Block_4:
            goto IL_10B;
        Block_10:
            t = (T)((object)child);
            goto IL_10B;
        IL_E9:
            t = (T)((object)child);
        IL_10B:
            result = t;
            return result;
        }

        public static childItem FindVisualChild1<childItem>(DependencyObject obj) where childItem : DependencyObject
        {
            int num = 0;
            childItem result;
            while (true)
            {
                int arg_83_0 = num;
                int arg_83_1 = VisualTreeHelper.GetChildrenCount(obj);
                int expr_75;
                int expr_77;
                while (true)
                {
                IL_83:
                    bool flag = arg_83_0 < arg_83_1;
                    bool arg_89_0 = flag;
                    while (true)
                    {
                    IL_89:
                        if (!arg_89_0)
                        {
                            result = default(childItem);
                            goto IL_9B;
                        }
                        goto IL_0D;
                    IL_23:
                        DependencyObject dependencyObject;
                        int arg_34_0;
                        arg_83_0 = (arg_34_0 = ((dependencyObject is childItem) ? 1 : 0));
                        int arg_31_0 = 0;
                        while (true)
                        {
                            int expr_31 = arg_83_1 = arg_31_0;
                            if (expr_31 != 0)
                            {
                                goto IL_83;
                            }
                            if (arg_34_0 != expr_31)
                            {
                                break;
                            }
                            childItem childItem1 = MainWindow.FindVisualChild1<childItem>(dependencyObject);
                            bool expr_5E = arg_89_0 = (childItem1 == null);
                            if (4 == 0)
                            {
                                goto IL_89;
                            }
                            if (!expr_5E)
                            {
                                goto Block_4;
                            }
                            expr_75 = (arg_34_0 = (arg_83_0 = num));
                            expr_77 = (arg_31_0 = 1);
                            if (expr_77 != 0)
                            {
                                goto Block_7;
                            }
                        }
                        result = (childItem)((object)dependencyObject);
                        goto IL_9B;
                    Block_4:
                        if (!false && -1 != 0)
                        {
                            childItem childItem1 = MainWindow.FindVisualChild1<childItem>(dependencyObject);
                            result = childItem1;
                            goto IL_9B;
                        }
                    IL_0D:
                        DependencyObject expr_B5 = VisualTreeHelper.GetChild(obj, num);
                        if (7 == 0)
                        {
                            goto IL_23;
                        }
                        dependencyObject = expr_B5;
                        goto IL_23;
                    IL_9B:
                        if (4 != 0)
                        {
                            return result;
                        }
                        goto IL_23;
                    }
                }
            Block_7:
                num = expr_75 + expr_77;
            }
            return result;
        }

        private Button FindVisualChild<item>(DependencyObject obj, string borderName) where item : DependencyObject
        {
            int expr_01 = 0;
            int i;
            if (-1 != 0)
            {
                i = expr_01;
            }
            Button result;
            while (i < VisualTreeHelper.GetChildrenCount(obj))
            {
                DependencyObject child = VisualTreeHelper.GetChild(obj, i);
                int arg_116_0;
                if (child == null)
                {
                    arg_116_0 = 1;
                    goto IL_46;
                }
                int arg_CD_0;
                int arg_3B_0;
                int arg_7F_0 = arg_3B_0 = (arg_CD_0 = (arg_116_0 = ((child is Button) ? 1 : 0)));
                int arg_3B_1;
                if (5 != 0)
                {
                    arg_3B_1 = 0;
                    goto IL_3B;
                }
                goto IL_7C;
            IL_CD:
                i = arg_CD_0;
                continue;
            IL_3D:
                if (7 != 0)
                {
                    goto IL_46;
                }
                goto IL_CD;
            IL_3B:
                arg_116_0 = (arg_CD_0 = ((arg_3B_0 == arg_3B_1) ? 1 : 0));
                goto IL_3D;
            IL_CA:
                arg_CD_0 = i + 1;
                goto IL_CD;
            IL_C9:
                goto IL_CA;
            IL_46:
                bool flag = arg_116_0 != 0;
                if (false)
                {
                    goto IL_CA;
                }
                Button button;
                if (!flag && !false)
                {
                    button = (Button)child;
                    arg_CD_0 = (arg_7F_0 = (arg_116_0 = ((string.Compare(button.CommandParameter.ToString(), borderName, true) != 0) ? 1 : 0)));
                }
                else
                {
                    Button button2 = this.FindVisualChild<item>(child, borderName);
                    bool arg_BD_0;
                    if (button2 != null)
                    {
                        int expr_A8 = arg_3B_0 = string.Compare(button2.CommandParameter.ToString(), borderName, true);
                        int expr_AE = arg_3B_1 = 0;
                        if (expr_AE != 0)
                        {
                            goto IL_3B;
                        }
                        arg_BD_0 = (expr_A8 != expr_AE);
                    }
                    else
                    {
                        arg_BD_0 = true;
                    }
                    if (!arg_BD_0)
                    {
                        result = button2;
                        return result;
                    }
                    goto IL_C9;
                }
            IL_7C:
                if (8 == 0)
                {
                    goto IL_3D;
                }
                if (arg_7F_0 != 0)
                {
                    goto IL_C9;
                }
                result = button;
                return result;
            }
            result = null;
            return result;
        }

        public static IEnumerable<T> FindVisualChildren<T>(DependencyObject depObj) where T : DependencyObject
        {

            //   MainWindow obj= <FindVisualChildren>d__;



            //////////////////////////////

            if (depObj != null)
            {
                int depObjCount = VisualTreeHelper.GetChildrenCount(depObj);
                for (int i = 0; i < depObjCount; i++)
                {
                    DependencyObject child = VisualTreeHelper.GetChild(depObj, i);
                    if (child != null && child is T)
                    {
                        yield return (T)child;
                    }

                    if (child is MainWindow)
                    {
                        MainWindow gb = child as MainWindow;
                        Object gpchild = gb.Content;
                        if (gpchild is T)
                        {
                            yield return (T)child;
                            child = gpchild as T;
                        }
                    }

                    foreach (T childOfChild in FindVisualChildren<T>(child))
                    {
                        yield return childOfChild;
                    }
                }
            }
        }

        public void CompileEffectChanged(VisualBrush compiledBitmapImage, int ProductType, int Height, int Width)
        {
            try
            {
                if (!false)
                {
                    if (8 == 0)
                    {
                        goto IL_158;
                    }
                    ClientView clientView = null;
                    IEnumerator enumerator = System.Windows.Application.Current.Windows.GetEnumerator();
                    bool flag;
                    try
                    {
                        while (true)
                        {
                            flag = enumerator.MoveNext();
                            if (8 != 0 && !flag)
                            {
                                break;
                            }
                            Window window = (Window)enumerator.Current;
                            flag = !(window.Title == "ClientView");
                            if (!flag)
                            {
                                clientView = (ClientView)window;
                            }
                        }
                    }
                    finally
                    {
                        IDisposable disposable = enumerator as IDisposable;
                        if (true)
                        {
                            flag = (disposable == null);
                            if (!flag)
                            {
                                disposable.Dispose();
                            }
                        }
                    }
                    bool arg_A4_0 = clientView == null;
                IL_A3:
                    flag = !arg_A4_0;
                    if (!flag)
                    {
                        clientView = new ClientView();
                        clientView.WindowStartupLocation = WindowStartupLocation.Manual;
                    }
                    clientView.GroupView = false;
                    clientView.DefaultView = false;
                    flag = (compiledBitmapImage == null);
                    if (flag)
                    {
                        this.GetMktImgInfo();
                        flag = (this.MktImgPath == "" || this.mktImgTime == 0);
                        goto IL_158;
                    }
                    //clientView.imgDefault.Visibility = Visibility.Collapsed;
                    //clientView.instructionVideo.Visibility = Visibility.Collapsed;
                    //clientView.instructionVideo.Pause();
                IL_FC:
                    //clientView.testR.Fill = null;
                    compiledBitmapImage.Stretch = Stretch.Uniform;
                    //clientView.testR.Fill = compiledBitmapImage;
                    clientView.Photoname = this.PhotoName;
                    goto IL_19E;
                IL_158:
                    //if (!flag)
                    //{
                    //    clientView.instructionVideo.Visibility = Visibility.Visible;
                    //    clientView.instructionVideo.Play();
                    //}
                    //else
                    //{
                    //    clientView.imgDefault.Visibility = Visibility.Visible;
                    //}
                   // clientView.testR.Fill = null;
                    clientView.DefaultView = true;
                IL_19D:
                IL_19E:
                  //  bool arg_1AD_0 = clientView.instructionVideo.Visibility == Visibility.Visible;
                    bool expr_1B1;
                    //do
                    //{
                    //    flag = !arg_1AD_0;
                    //    expr_1B1 = (arg_1AD_0 = flag);
                    //}
                    //while (-1 == 0);
                    //if (!expr_1B1)
                    //{
                    //    if (false)
                    //    {
                    //        goto IL_FC;
                    //    }
                    //   // clientView.instructionVideo.Play();
                    //}
                    //else
                    //{
                    //   // clientView.instructionVideo.Pause();
                    //}
                    System.Windows.Forms.Screen[] allScreens = System.Windows.Forms.Screen.AllScreens;
                    flag = (allScreens.Length <= 1);
                    if (!flag)
                    {
                        flag = !allScreens[0].Primary;
                        bool expr_1FE = arg_A4_0 = flag;
                        if (2 == 0)
                        {
                            goto IL_A3;
                        }
                        if (!expr_1FE)
                        {
                            System.Windows.Forms.Screen screen = System.Windows.Forms.Screen.AllScreens[1];
                            System.Drawing.Rectangle workingArea = screen.WorkingArea;
                            clientView.Top = (double)workingArea.Top;
                            clientView.Left = (double)workingArea.Left;
                            clientView.Show();
                        }
                        else
                        {
                            System.Drawing.Rectangle workingArea = allScreens[0].WorkingArea;
                            clientView.Top = (double)workingArea.Top;
                            clientView.Left = (double)workingArea.Left;
                            if (!true)
                            {
                                goto IL_19D;
                            }
                            clientView.Show();
                        }
                    }
                    else
                    {
                        clientView.Show();
                    }
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
        }

        public BitmapImage compilephoto(double dpi, bool PrintJob)
        {
            MemoryManagement.FlushMemory();
            TiffBitmapEncoder tiffBitmapEncoder = new TiffBitmapEncoder();
            BitmapImage bitmapImage = new BitmapImage();
            MemoryStream memoryStream = new MemoryStream();
            BitmapImage result;
            try
            {
                try
                {
                    Transform renderTransform = this.forWdht.RenderTransform;
                    int arg_8B_0;
                    int arg_85_0;
                    bool expr_3F = (arg_85_0 = (arg_8B_0 = ((renderTransform is RotateTransform) ? 1 : 0))) != 0;
                    RenderTargetBitmap renderTargetBitmap;
                    if (8 != 0)
                    {
                        if (expr_3F)
                        {
                            RotateTransform rotateTransform = (RotateTransform)renderTransform;
                            if (!false)
                            {
                                double arg_6A_0 = rotateTransform.Angle;
                                double arg_6A_1 = 270.0;
                                while (arg_6A_0 != arg_6A_1)
                                {
                                    double expr_6E = arg_6A_0 = rotateTransform.Angle;
                                    double expr_73 = arg_6A_1 = 90.0;
                                    if (5 != 0)
                                    {
                                        arg_8B_0 = (arg_85_0 = ((expr_6E == expr_73) ? 1 : 0));
                                        goto IL_81;
                                    }
                                }
                                arg_8B_0 = 0;
                                goto IL_8A;
                            }
                        }
                        renderTargetBitmap = MainWindow.CaptureScreen(this.forWdht, dpi, dpi, false);
                        goto IL_C9;
                    }
                IL_81:
                    if (7 != 0)
                    {
                        arg_8B_0 = ((arg_85_0 == 0) ? 1 : 0);
                    }
                IL_8A:
                    if (arg_8B_0 == 0)
                    {
                        renderTargetBitmap = MainWindow.CaptureScreen(this.forWdht, dpi, dpi, true);
                    }
                    else
                    {
                        renderTargetBitmap = MainWindow.CaptureScreen(this.forWdht, dpi, dpi, false);
                    }
                IL_C9:
                    renderTargetBitmap.Freeze();
                    tiffBitmapEncoder.Frames.Add(BitmapFrame.Create(renderTargetBitmap));
                    tiffBitmapEncoder.Save(memoryStream);
                    memoryStream.Position = 0L;
                    byte[] buffer = new byte[memoryStream.Length];
                    memoryStream.Read(buffer, 0, Convert.ToInt32(memoryStream.Length));
                    bitmapImage.BeginInit();
                    do
                    {
                        bitmapImage.StreamSource = memoryStream;
                    }
                    while (-1 == 0);
                    bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                    bitmapImage.EndInit();
                    bitmapImage.Freeze();
                    result = bitmapImage;
                    return result;
                }
                catch (Exception serviceException)
                {
                    if (!false)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                }
                if (!false)
                {
                }
            }
            finally
            {
                bitmapImage = null;
                MemoryManagement.FlushMemory();
            }
            result = bitmapImage;
            return result;
        }

        private void CompleteRestore()
        {
            PhotoBusiness photoBusiness = new PhotoBusiness();
            try
            {
                try
                {
                    this.EffectsSender = null;
                    UIElement expr_17 = this.CmbProductType;
                    Visibility expr_1C = Visibility.Collapsed;
                    if (2 != 0)
                    {
                        expr_17.Visibility = expr_1C;
                    }
                    photoBusiness.SaveIsGreenPhotos((long)this.PhotoId, false);
                    //string fileName = string.Concat(new string[]
                    //{
                    //    this.HotFolderPath,
                    //    "\\",
                    //    this.DateFolder,
                    //    "\\",
                    //    this.tempfilename
                    // });


                    //  fileName = fileName.Replace("\\EditedImages", "");  //jayendra
                    //   FileInfo fileInfo = new FileInfo(fileName);
                }
                catch
                {
                }
                PhotoInfo photoDetailsbyPhotoId;
                PhotoBusiness photoBuss = new PhotoBusiness();
                photoDetailsbyPhotoId = photoBusiness.GetPhotoDetailsbyPhotoId(this.PhotoId);
                BitmapImage imageFromPath = null;
                if (!photoDetailsbyPhotoId.IsCollageShow)
                {
                    imageFromPath = CommonUtility.GetImageFromPath(System.IO.Path.Combine(photoDetailsbyPhotoId.HotFolderPath, "Thumbnails_Big", this.tempfilename));
                }
                else
                {
                    int PId = Convert.ToInt32(photoDetailsbyPhotoId.DG_Photos_pkey);
                    photoDetailsbyPhotoId = photoBusiness.GetPhotoDetailsbyPhotoId(PId);
                    string PhotoFileName = photoDetailsbyPhotoId.DG_Photos_FileName;
                    imageFromPath = CommonUtility.GetImageFromPath(System.IO.Path.Combine(photoDetailsbyPhotoId.HotFolderPath, "Thumbnails_Big", PhotoFileName));
                }
                //  BitmapImage imageFromPath = CommonUtility.GetImageFromPath(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, this.tempfilename));
                this.widthimg.Source = imageFromPath;
                this.imgRotateCrop.Source = imageFromPath;
                this.mainImage.Source = imageFromPath;
                if (4 != 0)
                {
                    this.mainImageundo.Source = imageFromPath;
                    if (((BitmapImage)this.mainImage.Source).DpiX > 0.0)
                    {
                        CroppingAdorner.s_dpiX = ((BitmapImage)this.mainImage.Source).DpiX;
                        CroppingAdorner.s_dpiY = ((BitmapImage)this.mainImage.Source).DpiY;
                    }
                    else
                    {
                        CroppingAdorner.s_dpiX = 300.0;
                        CroppingAdorner.s_dpiY = 300.0;
                    }
                    photoBusiness.SaveIsCropedPhotos((long)this.PhotoId, null, "Restore");
                    try
                    {
                        if (File.Exists(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename)))
                        {
                            File.Delete(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename));
                        }
                    }
                    catch (Exception)
                    {
                    }
                    finally
                    {
                        MemoryManagement.FlushMemory();
                    }
                    this.RemoveAllGraphicsEffect();
                    this.UncheckGraphicsButton();
                    ContantValueForMainWindow.RedEyeSize = 0.0205;
                    this.RedeyePreview.Visibility = Visibility.Collapsed;
                    this.ellipse.Visibility = Visibility.Collapsed;
                    this.greenEraser.Visibility = Visibility.Collapsed;
                    this.squre.Visibility = Visibility.Hidden;
                    this.mainImage.Cursor = Cursors.Arrow;
                    this.GrdFirst.Visibility = Visibility.Visible;
                    this.redeyecircle.Visibility = Visibility.Collapsed;
                    this.redeyecirclegreen.Visibility = Visibility.Collapsed;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    this.IsGraphicsChange = true;
                    this.IsEffectChange = true;
                    this.RemoveAllGraphicsEffect();
                    this.EnableButtonForLayering();
                }
                this.RemoveAllShaderEffects();
                this.elementForContextMenu = null;
                this.hueshift = 0.5;
                this.sharpen = 0.5;
                this.cont = 1.0;
                this.bright = 0.0;
                if (-1 == 0)
                {
                    goto IL_4D0;
                }
                base.UpdateLayout();
                this.rotateangle = 0;
                this.FlipMode = 0;
                this.FlipModeY = 0;
                this.IsZoomed = false;
                this.redeffectfirstApplied = false;
                this.redeffectsecondApplied = false;
                this.redeffectmultiple1Applied = false;
                this.redeffectmultiple2Applied = false;
                this.redeffectmultiple3Applied = false;
                this.redeffectmultiple4Applied = false;
                this.redeffectmultiple5Applied = false;
                this.redeffectmultiple6Applied = false;
                this.redEyeEffect.Radius = ContantValueForMainWindow.RedEyeSize;
                this.redEyeEffect.RedeyeTrue = 0.0;
                this.redEyeEffect.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight + 0.4;
                this.redEyeEffectSecond.Radius = ContantValueForMainWindow.RedEyeSize;
                this.redEyeEffectSecond.RedeyeTrue = 0.0;
                this.redEyeEffectSecond.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight + 0.4;
                this.redEyeEffectMultiple.Radius = ContantValueForMainWindow.RedEyeSize + 0.1;
            IL_3EE:
                this.redEyeEffectMultiple.Radius1 = 0.0;
                this.redEyeEffectMultiple.Radius2 = 0.0;
                this.redEyeEffectMultiple.RedeyeTrue = 0.0;
                if (false)
                {
                    goto IL_6CE;
                }
                this.redEyeEffectMultiple.RedeyeTrue1 = 0.0;
                this.redEyeEffectMultiple.RedeyeTrue2 = 0.0;
                this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                this.redEyeEffectMultiple1.Radius = ContantValueForMainWindow.RedEyeSize;
                this.redEyeEffectMultiple1.Radius1 = 0.0;
                this.redEyeEffectMultiple1.Radius2 = 0.0;
                this.redEyeEffectMultiple1.RedeyeTrue = 0.0;
            IL_4D0:
                this.redEyeEffectMultiple1.RedeyeTrue1 = 0.0;
                this.redEyeEffectMultiple1.RedeyeTrue2 = 0.0;
                this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight + 0.4;
                this.SetRedeye = false;
                this.Noeffect();
                this.forWdht.RenderTransform = new RotateTransform();
                this.GrdFlip.LayoutTransform = new TransformGroup();
                if (false)
                {
                    goto IL_863;
                }
                this.GrdRotate.LayoutTransform = new TransformGroup();
                this.LoadPhotoAlbum();
                //this.ImageEffect = "<image brightness = '0' contrast = '1' Crop='##' colourvalue = '##' rotatewidth='##' rotateheight='##' rotate='##' flipMode='0' flipModeY='0' _centerx ='0' _centery='0'><effects sharpen='##' greyscale='0' digimagic='0' sepia='0' defog='0' underwater='0' emboss='0' invert = '0' granite='0' hue ='##' cartoon = '0' firstredeye= 'false' firstradius='.0105' firstcenterx='.5' firstcentery='.5' secondredeye= 'false' secondradius='.0105' secondcenterx='.5' secondcentery='.5' multipleredeye1='false' multipleredeye2='false' multipleredeye3='false' multipleredeye4='false' multipleredeye5='false' multipleredeye6='false' multipleradius1='.0105' multipleradius2='0' multipleradius3='0' multipleradius4='0.0125' multipleradius5='0' multipleradius6='0' multiplecenterx1='.5' multiplecentery1='.5' multiplecenterx2='0' multiplecentery2='0' multiplecenterx3='0' multiplecentery3='0' multiplecenterx4='.5' multiplecentery4='.5' multiplecenterx5='0' multiplecentery5='0' multiplecenterx6='0' multiplecentery6='0'></effects></image>";
                VisualStateManager.GoToState(this.btnColorEffects, "Unchecked", true);
                VisualStateManager.GoToState(this.btnrotate, "Unchecked", true);
                VisualStateManager.GoToState(this.btnantirotate, "Unchecked", true);
                VisualStateManager.GoToState(this.btnColorFilters, "Unchecked", true);
                VisualStateManager.GoToState(this.btnCrop, "Unchecked", true);
                VisualStateManager.GoToState(this.RedEye, "Unchecked", true);
                VisualStateManager.GoToState(this.btnGreenScreen, "Unchecked", true);
                this.UncheckGraphicsButton();
                this.UncheckEffectsButton();
                this.UncheckAllColorFilter();
                this.color = default(System.Windows.Media.Color);
                this.currentcolor = default(System.Windows.Media.Color);
                this.SerialLog.Clear();
                this.EffectLog.Clear();
                this.graphicsBorderApplied = false;
                this.graphicsCount = 0;
                this.graphicsTextBoxCount = 0;
                this.gumballTextCount = 0;
                this.jrotate.Angle = 0.0;
                this.lblzoomplus.Content = 100 + " % ";
                this.selectedborder = string.Empty;
                MainWindow.lightness = 0.18;
                MainWindow.saturation = 0.48;
                this._greenscreendefault3.HueMin = 0.1;
            IL_6CE:
                this._greenscreendefault3.HueMax = 0.4;
                this._greenscreendefault3.LightnessShift = MainWindow.lightness;
                if (!true)
                {
                    goto IL_3EE;
                }
                this._greenscreendefault3.SaturationShift = MainWindow.saturation;
                if (this.primaryColorName == "Red")
                {
                    this._colorscreendefault.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                    if (this.primaryColor == this.primaryColorDefault)
                    {
                        this._colorscreendefault.Tolerance = this.toleranceDefault;
                    }
                    else
                    {
                        this._colorscreendefault.Tolerance = 0.8f;
                    }
                }
                else if (this.primaryColorName == "Green")
                {
                    this._colorscreendefault.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                    if (this.primaryColor == this.primaryColorDefault)
                    {
                        this._colorscreendefault.Tolerance = this.toleranceDefault;
                    }
                    else
                    {
                        this._colorscreendefault.Tolerance = 0.8f;
                    }
                }
                else if (this.primaryColorName == "Blue")
                {
                    this._colorscreendefault.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                    if (this.primaryColor == this.primaryColorDefault)
                    {
                        this._colorscreendefault.Tolerance = this.toleranceDefault;
                    }
                    else
                    {
                        this._colorscreendefault.Tolerance = 1f;
                    }
                }
                else if (this.primaryColorName == "Gray")
                {
                    this._colorscreendefault.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                    if (this.primaryColor == this.primaryColorDefault)
                    {
                        this._colorscreendefault.Tolerance = this.toleranceDefault;
                    }
                    else
                    {
                        this._colorscreendefault.Tolerance = 0.2f;
                    }
                }
            IL_863:
                this.MyInkCanvasParent.Effect = null;
                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = new MatrixTransform());
                this.attributeWidth = (this.attributeHeight = 20.0);
                this.greenEraser.Visibility = Visibility.Collapsed;
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this.IsEraserActive = false;
                this.IsEraserDrawEllipseActive = false;
                this.IsEraserDrawRectangleActive = false;
                this.IsGreenCorrection = false;
                this.isChromaApplied = false;
                this._ZoomFactorGreen = 1.0;
                try
                {
                    photoBusiness.SaveIsGreenPhotos((long)this.PhotoId, false);
                }
                catch
                {
                }
                if (this.MyInkCanvas.Children.Count > 1)
                {
                    this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                }
                if (this.MyInkCanvas.Strokes.Count > 0)
                {
                    this.MyInkCanvas.Strokes.Clear();
                }
                this.Opacitymsk.Margin = new Thickness(0.0, 0.0, 0.0, 0.0);
                this.forWdht.Width = this.widthimg.Source.Width;
                this.forWdht.Height = this.widthimg.Source.Height;
                this.ZomoutNew(true);
                this.IsCropped = false;
                this.graphicsframeApplied = false;
                if (imageFromPath != null)
                {
                    imageFromPath.Freeze();
                }
                this.IsImageDirtyState = true;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
        }

        private void ContrastMinus_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                luminosityPopup();

                this.ContrastImg1.Source = new BitmapImage(new Uri("/images/munis_new_act.png", UriKind.Relative));
                this.ContrastImg2.Source = new BitmapImage(new Uri("/images/contrast_red_act.png", UriKind.Relative));
                this.ContrastImg3.Source = new BitmapImage(new Uri("/images/munis_new_act.png", UriKind.Relative));
                if (this.cont > 0.0)
                {
                    this.cont -= 0.05;
                    ContrastAdjustEffect expr_38 = this._brighteff;
                    double expr_3F = this.cont;
                    expr_38.Contrast = expr_3F;
                    this.GrdBrightness.Effect = this._brighteff;
                }
            }
            catch (Exception serviceException)
            {
                while (false)
                {
                }
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                while (false)
                {
                }
                MemoryManagement.FlushMemory();
            }
        }

        private void ContrastPlus_Click(object sender, RoutedEventArgs e)
        {
            do
            {
                try
                {
                    luminosityPopup();
                    this.ContrastImg1.Source = new BitmapImage(new Uri("/images/plus_new_act.png", UriKind.Relative));
                    this.ContrastImg2.Source = new BitmapImage(new Uri("/images/contrast_red_act.png", UriKind.Relative));
                    this.ContrastImg3.Source = new BitmapImage(new Uri("/images/munis_new_act.png", UriKind.Relative));
                    bool arg_79_0;
                    bool expr_12 = arg_79_0 = (this.cont == 0.0);
                    arg_79_0 = !expr_12;

                    if (!arg_79_0)
                    {
                        this.cont = 1.0;
                    }
                    do
                    {
                        this.cont += 0.055;
                        this._brighteff.Contrast = this.cont;
                        this.GrdBrightness.Effect = this._brighteff;
                    }
                    while (false);
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    do
                    {
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                    while (false);
                }
                finally
                {
                    while (true)
                    {
                        if (6 != 0)
                        {
                            MemoryManagement.FlushMemory();
                            if (!false)
                            {
                                break;
                            }
                        }
                    }
                }
            }
            while (false);
        }

        public BitmapImage ConvertToBitmap()
        {
            JpegBitmapEncoder jpegBitmapEncoder = new JpegBitmapEncoder();
            if (false)
            {
                goto IL_16D;
            }
            BitmapImage bitmapImage = new BitmapImage();
        IL_1B:
            MemoryStream memoryStream = new MemoryStream();
            System.Windows.Size renderSize = this.forWdht.RenderSize;
        IL_39:
            RenderTargetBitmap renderTargetBitmap = new RenderTargetBitmap((int)renderSize.Width, (int)this.forWdht.RenderSize.Height, 96.0, 96.0, PixelFormats.Pbgra32);
        IL_73:
            VisualBrush visualBrush = new VisualBrush(this.forWdht);
            DrawingVisual drawingVisual = new DrawingVisual();
            DrawingContext drawingContext = drawingVisual.RenderOpen();
            DrawingContext arg_DE_0 = drawingContext;
            System.Windows.Media.Brush arg_DE_1 = visualBrush;
            System.Windows.Media.Pen arg_DE_2 = null;
            System.Windows.Point arg_D9_0 = new System.Windows.Point(0.0, 0.0);
            double arg_D4_0 = this.forWdht.RenderSize.Width;
            renderSize = this.forWdht.RenderSize;
            arg_DE_0.DrawRectangle(arg_DE_1, arg_DE_2, new Rect(arg_D9_0, new System.Windows.Point(arg_D4_0, renderSize.Height)));
            if (!false)
            {
                drawingContext.Close();
                renderTargetBitmap.Render(drawingVisual);
                jpegBitmapEncoder.Frames.Add(BitmapFrame.Create(renderTargetBitmap));
                jpegBitmapEncoder.Save(memoryStream);
                memoryStream.Position = 0L;
                byte[] buffer = new byte[memoryStream.Length];
                do
                {
                    memoryStream.Read(buffer, 0, Convert.ToInt32(memoryStream.Length));
                    bitmapImage.BeginInit();
                    bitmapImage.StreamSource = memoryStream;
                }
                while (false);
                if (4 == 0)
                {
                    goto IL_39;
                }
                bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                if (false)
                {
                    goto IL_1B;
                }
                bitmapImage.EndInit();
            }
        IL_16D:
            if (4 != 0)
            {
                bitmapImage.Freeze();
                renderTargetBitmap.Freeze();
                return bitmapImage;
            }
            goto IL_73;
        }

        private void Crop()
        {
            try
            {
                try
                {
                    bool arg_50_0;
                    while (!false)
                    {
                        int arg_40_0;
                        bool expr_16 = (arg_40_0 = ((this._clp != null) ? 1 : 0)) != 0;
                        bool arg_188_0;
                        if (!false)
                        {
                            if (!expr_16)
                            {
                                if (this.rotateangle > 0)
                                {
                                    arg_188_0 = false;
                                    goto IL_45;
                                }
                                arg_40_0 = this.FlipMode;
                            }
                            else
                            {
                                VisualStateManager.GoToState(this.btnCrop, "Checked", true);
                                Rect clippingRectangle = this._clp.ClippingRectangle;
                                if (7 == 0)
                                {
                                    continue;
                                }
                                BitmapSource source = this._clp.BpsCrop();
                                this.widthimg.Source = source;
                                this.mainImageundo.Source = (this.mainImage.Source = source);
                                if (!false)
                                {
                                    this.imgRotateCrop.Source = source;
                                    break;
                                }
                                goto IL_1B8;
                            }
                        }
                        arg_188_0 = (arg_40_0 == 0);
                    IL_45:
                        bool flag = arg_188_0;
                        arg_50_0 = flag;
                    IL_50:
                        if (!arg_50_0)
                        {
                            this.IsCropped = true;
                        }
                        return;
                    }
                    this.imgRotateCrop.UpdateLayout();
                    this.forWdht.HorizontalAlignment = HorizontalAlignment.Center;
                    this.forWdht.VerticalAlignment = VerticalAlignment.Center;
                    this.GrdBrightness.VerticalAlignment = VerticalAlignment.Center;
                    this.GrdBrightness.HorizontalAlignment = HorizontalAlignment.Center;
                    this.RemoveCropFromCur();
                    this._felCur = null;
                    this.IsCropped = true;
                    this._clp = null;
                    //  arg_50_0 = AuditLog.AddUserLog(LoginUser.UserId, 4, "Crop " + this.txtMainImage.Text + " image.");
                    if (5 == 0)
                    {
                        // goto IL_50;
                    }
                    this.IsGraphicsChange = true;
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    if (!false)
                    {
                    }
                }
            IL_1B8:;
            }
            finally
            {
            }
        }

        private void decrementThickness_Click(object sender, RoutedEventArgs e)
        {
            if (base.IsInitialized)
            {
                bool arg_37_0 = this.attribute.Width < 0.1001;
                while (!arg_37_0)
                {
                    if (this.attribute.Width < 1.001)
                    {
                        this.attribute.Width -= 0.1;
                        this.attribute.Height -= 0.1;
                    }
                    else
                    {
                        bool flag = this.attribute.Width >= 10.001;
                        bool expr_C4 = arg_37_0 = flag;
                        if (false)
                        {
                            continue;
                        }
                        if (!expr_C4)
                        {
                            this.attribute.Width -= 0.5;
                            this.attribute.Height -= 0.5;
                        }
                        else
                        {
                            this.attribute.Width -= 1.0;
                            this.attribute.Height -= 1.0;
                        }
                    }
                    this.UpdateControlVisuals();
                    break;
                }
            }
        }

        private void Defogger()
        {
            try
            {
                try
                {
                    while (!(this._defoger == "0"))
                    {
                        if (!false)
                        {
                            this._defoger = "0";
                            this.GrdBrightness.Effect = null;
                            goto IL_11E;
                        }
                    }
                    this._defoger = "1";
                    this._brighteff.Brightness = -0.1;
                    if (8 != 0)
                    {
                    }
                    this._brighteff.Contrast = 1.09;
                    this.GrdBrightness.Effect = this._brighteff;
                    this.bright = -0.1;
                    this.cont = 1.09;
                }
                catch (Exception serviceException)
                {
                    do
                    {
                        if (!false)
                        {
                            string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                            ErrorHandler.ErrorHandler.LogFileWrite(message);
                        }
                        if (6 != 0)
                        {
                        }
                    }
                    while (false);
                }
            IL_11E:;
            }
            finally
            {
                LogEffect objeffectOperation;
                do
                {
                    objeffectOperation = default(LogEffect);
                    objeffectOperation.effvalue = Convert.ToDouble(this._defoger);
                }
                while (false);
                objeffectOperation.optname = "defog";
                this.EffectLogOperation(objeffectOperation);
            }
        }

        private void DelayedAction()
        {
            this.lstStrip.SelectedIndex = this.lstStrip.Items.IndexOf((from o in RobotImageLoader.robotImages
                                                                       where o.PhotoId == this.PhotoId
                                                                       select o).FirstOrDefault<LstMyItems>());
            bool arg_3F_0 = !this.IsLoad;
            bool expr_40;
            do
            {
                bool flag = arg_3F_0;
                expr_40 = (arg_3F_0 = flag);
            }
            while (false);
            if (!expr_40)
            {
                this.lstStrip.ScrollIntoView(this.lstStrip.SelectedItem);
                if (6 == 0)
                {
                    return;
                }
                this.IsLoad = false;
            }
            this.SetLastVisibleIndex();
        }

        [DllImport("gdi32.dll")]
        public static extern bool DeleteObject(IntPtr hObject);
        private void DigiMagic()
        {
            try
            {
                if (this._digimagic == "0")
                {
                    this._digimagic = "1";
                    ConfigBusiness configBusiness = new ConfigBusiness();
                    List<iMIXConfigurationInfo> newConfigValues = configBusiness.GetNewConfigValues(LoginUser.SubStoreId);
                    foreach (iMIXConfigurationInfo current in newConfigValues)
                    {
                        long iMIXConfigurationMasterId = current.IMIXConfigurationMasterId;
                        if (iMIXConfigurationMasterId > 20L)
                        {
                            goto IL_97;
                        }
                        if (iMIXConfigurationMasterId >= 18L)
                        {
                            switch ((int)(iMIXConfigurationMasterId - 18L))
                            {
                                case 0:
                                    this._brighteff.Brightness = Convert.ToDouble(current.ConfigurationValue);
                                    continue;
                                case 1:
                                    this._brighteff.Contrast = Convert.ToDouble(current.ConfigurationValue);
                                    continue;
                                case 2:
                                    this.sharpen = Convert.ToDouble(current.ConfigurationValue);
                                    continue;
                            }
                            goto IL_97;
                        }
                        continue;
                    IL_97:
                        if (iMIXConfigurationMasterId == 94L)
                        {
                            this.ColorCode = current.ConfigurationValue;
                        }
                    }
                    this.GrdBrightness.Effect = this._brighteff;
                    this.bright = this._brighteff.Brightness;
                    this.cont = this._brighteff.Contrast;
                    this._sharpeff.Strength = this.sharpen;
                    this._sharpeff.PixelWidth = 0.0015;
                    this._sharpeff.PixelHeight = 0.0015;
                    this.GrdSharpen.Effect = this._sharpeff;
                    this._Sharepen = this.sharpen.ToString();
                    this.checkDigimagic = true;
                    this.ImageEffect = string.Concat(new object[]
                {
                "<image brightness = '",
                this.bright.ToString(),
                "' contrast = '",
                this.cont.ToString(),
                "' Crop='##' colourvalue = '##' rotatewidth='##' rotateheight='##' rotate='##' flipMode='0' flipModeY='0' _centerx ='0' _centery='0'><effects sharpen='",
                this.sharpen,
                "' greyscale='0' digimagic='0' sepia='0' defog='0' underwater='0' emboss='0' invert = '0' granite='0' hue ='##' cartoon = '0' firstredeye= 'false' firstradius='.0105' firstcenterx='.5' firstcentery='.5' secondredeye= 'false' secondradius='.0105' secondcenterx='.5' secondcentery='.5' multipleredeye1='false' multipleredeye2='false' multipleredeye3='false' multipleredeye4='false' multipleredeye5='false' multipleredeye6='false' multipleradius1='.0105' multipleradius2='0' multipleradius3='0' multipleradius4='0.0125' multipleradius5='0' multipleradius6='0' multiplecenterx1='.5' multiplecentery1='.5' multiplecenterx2='0' multiplecentery2='0' multiplecenterx3='0' multiplecentery3='0' multiplecenterx4='.5' multiplecentery4='.5' multiplecenterx5='0' multiplecentery5='0' multiplecenterx6='0' multiplecentery6='0'></effects></image>"
                });
                }
                else
                {
                    this._digimagic = "0";
                    this.GrdBrightness.Effect = null;
                    this.GrdSharpen.Effect = null;
                    this.checkDigimagic = false;
                    this.ImageEffect = "<image brightness = '0' contrast = '1' Crop='##' colourvalue = '##' rotatewidth='##' rotateheight='##' rotate='##' flipMode='0' flipModeY='0' _centerx ='0' _centery='0'><effects sharpen='##' greyscale='0' digimagic='0' sepia='0' defog='0' underwater='0' emboss='0' invert = '0' granite='0' hue ='##' cartoon = '0' firstredeye= 'false' firstradius='.0105' firstcenterx='.5' firstcentery='.5' secondredeye= 'false' secondradius='.0105' secondcenterx='.5' secondcentery='.5' multipleredeye1='false' multipleredeye2='false' multipleredeye3='false' multipleredeye4='false' multipleredeye5='false' multipleredeye6='false' multipleradius1='.0105' multipleradius2='0' multipleradius3='0' multipleradius4='0.0125' multipleradius5='0' multipleradius6='0' multiplecenterx1='.5' multiplecentery1='.5' multiplecenterx2='0' multiplecentery2='0' multiplecenterx3='0' multiplecentery3='0' multiplecenterx4='.5' multiplecentery4='.5' multiplecenterx5='0' multiplecentery5='0' multiplecenterx6='0' multiplecentery6='0'></effects></image>";
                }
            IL_254:
                if (false)
                {
                    goto IL_254;
                }
            }
            catch (Exception)
            {
            }
            finally
            {
                this.EffectLogOperation(new LogEffect
                {
                    effvalue = Convert.ToDouble(this._digimagic),
                    optname = "spectramagic"
                });
            }
        }

        public void disableAllButtons()
        {
            while (true)
            {
                UIElement expr_06 = this.btnrotate;
                bool expr_0B = false;
                if (3 != 0)
                {
                    expr_06.IsEnabled = expr_0B;
                }
                this.btnantirotate.IsEnabled = false;
                UIElement expr_2B = this.btnflip;
                bool expr_30 = false;
                if (!false)
                {
                    expr_2B.IsEnabled = expr_30;
                }
                this.btnModerate.IsEnabled = false;
                this.btnCrop.IsEnabled = false;
                this.btnundo.IsEnabled = false;
                while (true)
                {
                    if (8 != 0)
                    {
                        this.btnAddgraphics.IsEnabled = false;
                        this.btnColorEffects.IsEnabled = false;
                        if (false)
                        {
                            goto IL_E8;
                        }
                        this.btnColorEffectsfilters.IsEnabled = false;
                    }
                    this.RedEye.IsEnabled = false;
                    if (5 == 0)
                    {
                        break;
                    }
                    this.btnColorFilters.IsEnabled = false;
                    if (!false)
                    {
                        if (2 == 0)
                        {
                            break;
                        }
                        this.btnchkpreview.IsEnabled = false;
                    }
                    this.btnrestoremainimg.IsEnabled = false;
                    if (!false)
                    {
                        goto Block_5;
                    }
                }
            }
        Block_5:
            this.btnHighPreview.IsEnabled = false;
        IL_E8:
            this.btnGreenScreen.IsEnabled = false;
        }

        public void DisableButtonForLayering()
        {
            while (true)
            {
                this.btnrotate.IsEnabled = false;
                while (!false)
                {
                    if (false)
                    {
                        goto IL_4D;
                    }
                    this.btnantirotate.IsEnabled = false;
                    if (6 == 0)
                    {
                        goto IL_4D;
                    }
                    this.btnflip.IsEnabled = false;
                    if (!false)
                    {
                        UIElement expr_30 = this.btnCrop;
                        bool expr_35 = false;
                        if (!false)
                        {
                            expr_30.IsEnabled = expr_35;
                        }
                        if (!false)
                        {
                            goto Block_4;
                        }
                        break;
                    }
                }
            }
        Block_4:
            // this.RedEye.IsEnabled = false;
            this.btnCrop.IsEnabled = true;
        IL_4D:;
            //   this.btnundo.IsEnabled = false;

        }

        private void DisableButtonForRedEye()
        {
            UIElement expr_06 = this.btnrotate;
            bool expr_0B = false;
            if (!false)
            {
                expr_06.IsEnabled = expr_0B;
            }
            if (4 == 0)
            {
                goto IL_D3;
            }
            this.btnantirotate.IsEnabled = false;
        IL_2B:
            if (7 == 0)
            {
                goto IL_8C;
            }
            this.btnflip.IsEnabled = false;
            this.btnModerate.IsEnabled = false;
            this.btnCrop.IsEnabled = false;
        IL_62:
            this.btnundo.IsEnabled = false;
            this.btnAddgraphics.IsEnabled = false;
            if (false)
            {
                goto IL_2B;
            }
            this.btnColorEffects.IsEnabled = false;
        IL_8C:
            this.btnColorEffectsfilters.IsEnabled = false;
            if (!false)
            {
            }
            this.btnColorFilters.IsEnabled = false;
            this.btnchkpreview.IsEnabled = false;
            this.btnrestoremainimg.IsEnabled = false;
            if (!false)
            {
            }
            this.btnHighPreview.IsEnabled = false;
        IL_D3:
            if (true)
            {
                this.btnGreenScreen.IsEnabled = false;
                return;
            }
            goto IL_62;
        }

        private void DisableSideButton()
        {
            while (true)
            {
                while (true)
                {
                    this.btnSearchPhoto.IsEnabled = false;
                    while (!false)
                    {
                        this.btnPhotoID.IsEnabled = false;
                        do
                        {
                            if (8 != 0)
                            {
                                this.btnchkpreview.IsEnabled = false;
                            }
                        }
                        while (3 == 0);
                        if (2 == 0)
                        {
                            break;
                        }
                        if (6 != 0)
                        {
                            goto Block_4;
                        }
                    }
                }
            }
        Block_4:
            this.btnHighPreview.IsEnabled = false;
        }

        private void DisposeImage(BitmapImage image)
        {
            while (image != null)
            {
                if (4 != 0)
                {
                    if (!false)
                    {
                        try
                        {
                            byte[] buffer = new byte[1];
                            MemoryStream expr_61 = new MemoryStream(buffer);
                            MemoryStream memoryStream;
                            if (!false)
                            {
                                memoryStream = expr_61;
                                // goto IL_2A;
                            }
                            try
                            {
                                do
                                {
                                IL_2A:
                                    do
                                    {
                                        image.StreamSource = memoryStream;
                                    }
                                    while (false);
                                }
                                while (5 == 0);
                            }
                            finally
                            {
                                while (memoryStream != null)
                                {
                                    if (!false)
                                    {
                                        ((IDisposable)memoryStream).Dispose();
                                        break;
                                    }
                                }
                            }
                        }
                        catch (Exception)
                        {
                        }
                    }
                    break;
                }
            }
        }

        private void down()
        {
            if (4 != 0)
            {
                this.y += 2.0;
                if (!false)
                {
                    Canvas.SetTop(this.dragCanvas, this.y);
                }
            }
        }

        private void EdgeDetecteffect()
        {
            try
            {
                try
                {
                    if (this._granite == "0")
                    {
                        this._granite = "1";
                        SketchGraniteEffect sketchGraniteEffect = new SketchGraniteEffect();
                        sketchGraniteEffect.BrushSize = 0.005;
                        this.GrdSketchGranite.Effect = sketchGraniteEffect;
                    }
                    else
                    {
                        if (!false)
                        {
                        }
                        this._granite = "0";
                        this.GrdSketchGranite.Effect = null;
                    }
                }
                catch (Exception serviceException)
                {
                    while (!false && !false)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                        if (-1 != 0)
                        {
                            break;
                        }
                    }
                }
                if (4 != 0)
                {
                }
            }
            finally
            {
                this.EffectLogOperation(new LogEffect
                {
                    effvalue = Convert.ToDouble(this._granite),
                    optname = "granite"
                });
            }
            while (!true)
            {
            }
        }

        private void EditImage(int photoId, string Name)
        {
            try
            {
                this.IsImageDirtyState = false;
                this.PhotoName = Name;
                this.PhotoId = photoId;
                this._brighteff.Brightness = this.dbBrit;
                this._brighteff.Contrast = this.dbContr;
                this.SetEffect();
                PhotoBusiness photoBusiness = new PhotoBusiness();
                PhotoInfo photoDetailsbyPhotoId = photoBusiness.GetPhotoDetailsbyPhotoId(photoId);
                this.semiOrderProfileId = photoDetailsbyPhotoId.SemiOrderProfileId;
                this.tempfilename = photoDetailsbyPhotoId.DG_Photos_FileName;
                this.HotFolderPath = photoDetailsbyPhotoId.HotFolderPath;
                this.CropFolderPath = System.IO.Path.Combine(photoDetailsbyPhotoId.HotFolderPath, "Croped");
                bool isGreenImageParam;
                bool crop;
                do
                {
                    this.BigThumnailFolderPath = System.IO.Path.Combine(photoDetailsbyPhotoId.HotFolderPath, "Thumbnails_Big");
                    this.ThumnailFolderPath = System.IO.Path.Combine(photoDetailsbyPhotoId.HotFolderPath, "Thumbnails");
                    if (photoDetailsbyPhotoId == null)
                    {
                        goto IL_23C;
                    }
                    if (!string.IsNullOrEmpty(photoDetailsbyPhotoId.DG_Photos_Effects))
                    {
                        this.ImageEffect = photoDetailsbyPhotoId.DG_Photos_Effects;
                    }
                    else
                    {
                        this.ImageEffect = string.Concat(new string[]
                {
                    "<image brightness = '",
                    this.dbBrit.ToString(),
                    "' contrast = '",
                    this.dbContr.ToString(),
                    "' Crop='##' colourvalue = '##' rotatewidth='##' rotateheight='##' rotate='##' flipMode='0' flipModeY='0' _centerx ='0' _centery='0'><effects sharpen='##'></effects></image>"
                });
                    }
                    isGreenImageParam = (photoDetailsbyPhotoId.DG_Photos_IsGreen.HasValue && photoDetailsbyPhotoId.DG_Photos_IsGreen.Value);
                    crop = (photoDetailsbyPhotoId.DG_Photos_IsCroped.HasValue && photoDetailsbyPhotoId.DG_Photos_IsCroped.Value);
                }
                while (!true);
                bool redeye = photoDetailsbyPhotoId.DG_Photos_IsRedEye.HasValue && photoDetailsbyPhotoId.DG_Photos_IsRedEye.Value;
                DateTime arg_1F1_0 = photoDetailsbyPhotoId.DG_Photos_CreatedOn;
                bool flag = 1 == 0;
                this.DateFolder = photoDetailsbyPhotoId.DG_Photos_CreatedOn.ToString("yyyyMMdd");
                this.Onload(redeye, crop, isGreenImageParam, photoDetailsbyPhotoId.DG_Photos_Layering, photoDetailsbyPhotoId.IsGumRideShow);
                this.btnThumbnails_Click(new object(), new RoutedEventArgs());
            IL_23C:;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void EffectLogOperation(LogEffect objeffectOperation)
        {
            try
            {
                this.EffectLog.Push(objeffectOperation);
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void Effects_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (sender != null)
                {
                    DependencyObject dependencyObject;
                    Button button = null; //(Button)sender;
                    PhotoSW.LstMyItems obj = null;
                    if (sender is Button)
                    {
                        button = (Button)sender;
                    }
                    else if (sender is ComboBoxItem)
                    {
                        button = new Button();
                        dependencyObject = (DependencyObject)sender;
                        this.lstStrip.Visibility = Visibility.Visible;
                        // var test=  ((System.Windows.Media.SolidColorBrush)((sender as ComboBoxItem).Content)).Color;
                    }
                    else if (sender is ListBoxItem)
                    {
                        button = new Button();

                        obj = ((PhotoSW.LstMyItems)((((System.Windows.Controls.ContentControl)((sender as ListBoxItem)))).Content));

                        this.BackgroundDBValue = obj.Name;
                        this.DefaultBackgroundImagePath = obj.FilePath;
                    }


                    this.EffectsSender = sender;
                    this.jrotate.Visibility = Visibility.Hidden;
                    this.IsGraphicsChange = true;

                    if (button.Tag == null && (this.IsDefaultBackgroundEnabled || this.isGreenImage))
                    {
                        if (this.IsDefaultBackgroundEnabled)
                        {
                            button.Tag = this.DefaultBackgroundImagePath;
                            button.CommandParameter = this.DefaultBackgroundImagePath.Split(new char[]
                                    {
                                        '\\'
                                    }).Last<string>();
                        }
                        else if (this.isGreenImage)
                        {
                            button.Tag = LoginUser.DigiFolderBackGroundPath + "\\8x10\\" + this.BackgroundDBValue;
                            button.CommandParameter = button.Tag.ToString().Split(new char[]
                                       {
                                           '\\'
                                       }).Last<string>();
                        }
                    }
                    if (button.CommandParameter == "" && this.IsDefaultBackgroundEnabled && button.Tag != "")
                    {
                        button.CommandParameter = this.DefaultBackgroundImagePath.Split(new char[]
                          {
                                          '\\'
                          }).Last<string>();

                    }
                    string[] tempFileName = button.Tag.ToString().Split(new char[]
                       {
                           '\\'
                       });
                    string text = LoginUser.DigiFolderFramePath + tempFileName[tempFileName.Count<string>() - 1];
                    LstMyItems lstMyItems;
                    bool flag3;
                    if (this.lstFrame.Visibility == Visibility.Visible)
                    {
                        if (!File.Exists(text))
                        {
                            return;
                        }
                        this.IsImageDirtyState = true;
                        this.ChromaBorderPath = text;
                        this.selectedborder = LoginUser.DigiFolderFramePath + "Thumbnails\\" + tempFileName[tempFileName.Count<string>() - 1];
                        Uri uriSource = new Uri(text);
                        dependencyObject = (DependencyObject)sender;
                        while (dependencyObject != null && !(dependencyObject is ListBoxItem))
                        {
                            dependencyObject = VisualTreeHelper.GetParent(dependencyObject);
                        }
                        List<UIElement> list = new List<UIElement>();
                        ListBoxItem listBoxItem = (ListBoxItem)dependencyObject;
                        listBoxItem.IsSelected = true;
                        int num;
                        BitmapImage bitmapImage;
                        BitmapImage bitmapImage2;
                        double num2;
                        if (this.previouscounter == this.lstFrame.SelectedIndex)
                        {
                            this.previouscounter = -1;
                            listBoxItem.IsSelected = false;
                            foreach (UIElement uIElement in this.frm.Children)
                            {
                                if (uIElement.Uid.StartsWith("frame"))
                                {
                                    while (2 == 0)
                                    {
                                    }
                                    list.Add(uIElement);
                                }
                            }
                            if (4 != 0)
                            {
                                foreach (UIElement uIElement in list)
                                {
                                    this.frm.Children.Remove(uIElement);
                                    this.selectedborder = string.Empty;
                                    this.graphicsframeApplied = false;
                                    VisualStateManager.GoToState(this.btnBorder, "Unchecked", true);
                                    this.forWdht.Height = this.GrdSize.ActualHeight;
                                    this.forWdht.Width = this.GrdSize.ActualWidth;
                                    this.forWdht.InvalidateArrange();
                                    this.forWdht.InvalidateMeasure();
                                    this.forWdht.InvalidateVisual();
                                    this.Zomout(true);
                                }
                                if (this._ZoomFactor != 0.95)
                                {
                                    goto IL_66C;
                                }
                                this._ZoomFactor = 1.0;
                                if (this.zoomTransform == null || this._ZoomFactor < 0.5)
                                {
                                    goto IL_66B;
                                }
                                if (this.FlipMode == 0 && this.FlipModeY == 0)
                                {
                                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                                    goto IL_599;
                                }
                                this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                                this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                                this.zoomTransform.ScaleX = this._ZoomFactor;
                                this.zoomTransform.ScaleY = this._ZoomFactor;
                                if (2 != 0)
                                {
                                    this.transformGroup = new TransformGroup();
                                    this.transformGroup.Children.Add(this.zoomTransform);
                                    this.transformGroup.Children.Add(this.translateTransform);
                                    this.transformGroup.Children.Add(this.rotateTransform);
                                    this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                                    this.IsGraphicsChange = true;
                                    goto IL_63F;
                                }
                                goto IL_1C39;
                            }
                        }
                        else
                        {
                            this.previouscounter = this.lstFrame.SelectedIndex;
                            foreach (UIElement uIElement in this.frm.Children)
                            {
                                if (uIElement.Uid.StartsWith("frame"))
                                {
                                    list.Add(uIElement);
                                }
                            }
                            foreach (UIElement uIElement in list)
                            {
                                this.frm.Children.Remove(uIElement);
                            }
                            num = Convert.ToInt32(this.CmbProductType.SelectedValue);
                            bitmapImage = new BitmapImage();
                            bitmapImage2 = new BitmapImage();
                            bitmapImage2.BeginInit();
                            bitmapImage2.UriSource = uriSource;
                            bitmapImage2.EndInit();
                            bitmapImage2.Freeze();
                            bitmapImage.BeginInit();
                            bitmapImage.UriSource = uriSource;
                            if (num == 1)
                            {
                                if (bitmapImage2.Height > bitmapImage2.Width)
                                {
                                    bitmapImage.DecodePixelHeight = 2400;
                                    bitmapImage.DecodePixelWidth = 1800;
                                    bitmapImage.EndInit();
                                    num2 = (double)bitmapImage.PixelWidth / (double)bitmapImage.PixelHeight;
                                }
                                else
                                {
                                    bitmapImage.DecodePixelHeight = 1800;
                                    bitmapImage.DecodePixelWidth = 2400;
                                    bitmapImage.EndInit();
                                    num2 = (double)bitmapImage.PixelHeight / (double)bitmapImage.PixelWidth;
                                }
                                if (this.widthimg.ActualHeight > this.widthimg.ActualWidth)
                                {
                                    this.forWdht.Width = this.widthimg.ActualHeight * num2;
                                    this.forWdht.Height = this.widthimg.ActualHeight;
                                }
                                else
                                {
                                    this.forWdht.Height = this.widthimg.ActualWidth * num2;
                                    this.forWdht.Width = this.widthimg.ActualWidth;
                                }
                                goto IL_DDA;
                            }
                            if (num != 2)
                            {
                                int arg_A01_0 = (num == 30) ? 1 : 0;
                                int arg_A01_1 = 0;
                                while (arg_A01_0 == arg_A01_1)
                                {
                                    int expr_B27 = arg_A01_0 = num;
                                    int expr_B2B = arg_A01_1 = 98;
                                    if (expr_B2B != 0)
                                    {
                                        if (expr_B27 == expr_B2B)
                                        {
                                            bitmapImage.DecodePixelHeight = 900;
                                            bitmapImage.DecodePixelWidth = 900;
                                            bitmapImage.EndInit();
                                            num2 = (double)bitmapImage.PixelWidth / (double)bitmapImage.PixelHeight;
                                            if (this.widthimg.ActualHeight > this.widthimg.ActualWidth)
                                            {
                                                this.forWdht.Width = this.widthimg.ActualHeight * num2;
                                                this.forWdht.Height = this.widthimg.ActualHeight;
                                            }
                                            else
                                            {
                                                this.forWdht.Height = this.widthimg.ActualWidth * num2;
                                                this.forWdht.Width = this.widthimg.ActualWidth;
                                            }
                                            goto IL_DDA;
                                        }
                                        if (num == 103)
                                        {
                                            if (bitmapImage2.Height > bitmapImage2.Width)
                                            {
                                                bitmapImage.DecodePixelHeight = 2800;
                                                bitmapImage.DecodePixelWidth = 2000;
                                                bitmapImage.EndInit();
                                                num2 = (double)bitmapImage.PixelWidth / (double)bitmapImage.PixelHeight;
                                            }
                                            else
                                            {
                                                bitmapImage.DecodePixelHeight = 2000;
                                                bitmapImage.DecodePixelWidth = 2800;
                                                bitmapImage.EndInit();
                                                num2 = (double)bitmapImage.PixelHeight / (double)bitmapImage.PixelWidth;
                                            }
                                            if (this.widthimg.ActualHeight > this.widthimg.ActualWidth)
                                            {
                                                this.forWdht.Width = this.widthimg.ActualHeight * num2;
                                                this.forWdht.Height = this.widthimg.ActualHeight;
                                            }
                                            else
                                            {
                                                this.forWdht.Height = this.widthimg.ActualWidth * num2;
                                                this.forWdht.Width = this.widthimg.ActualWidth;
                                            }
                                            goto IL_DDA;
                                        }
                                        if (bitmapImage.Height > bitmapImage.Width)
                                        {
                                            num2 = bitmapImage.Width / bitmapImage.Height;
                                        }
                                        else
                                        {
                                            num2 = bitmapImage.Height / bitmapImage.Width;
                                        }
                                        if (this.forWdht.Height > this.forWdht.Width)
                                        {
                                            this.forWdht.Width = this.forWdht.Height * num2;
                                        }
                                        else
                                        {
                                            this.forWdht.Height = this.forWdht.Width * num2;
                                        }
                                        bitmapImage.EndInit();
                                        goto IL_DDA;
                                    }
                                }
                                if (bitmapImage2.Height > bitmapImage2.Width)
                                {
                                    bitmapImage.DecodePixelHeight = 2700;
                                    bitmapImage.DecodePixelWidth = 1800;
                                    bitmapImage.EndInit();
                                    num2 = (double)bitmapImage.PixelWidth / (double)bitmapImage.PixelHeight;
                                }
                                else
                                {
                                    bitmapImage.DecodePixelHeight = 1800;
                                    bitmapImage.DecodePixelWidth = 2700;
                                    bitmapImage.EndInit();
                                    num2 = (double)bitmapImage.PixelHeight / (double)bitmapImage.PixelWidth;
                                }
                                if (this.widthimg.ActualHeight > this.widthimg.ActualWidth)
                                {
                                    this.forWdht.Width = this.widthimg.ActualHeight * num2;
                                    this.forWdht.Height = this.widthimg.ActualHeight;
                                }
                                else
                                {
                                    this.forWdht.Height = this.widthimg.ActualWidth * num2;
                                    this.forWdht.Width = this.widthimg.ActualWidth;
                                }
                                goto IL_DDA;
                            }
                            if (bitmapImage2.Height <= bitmapImage2.Width)
                            {
                                bitmapImage.DecodePixelHeight = 2400;
                                bitmapImage.DecodePixelWidth = 3000;
                                bitmapImage.EndInit();
                                num2 = (double)bitmapImage.PixelHeight / (double)bitmapImage.PixelWidth;
                                goto IL_96B;
                            }
                        }
                        bitmapImage.DecodePixelHeight = 3000;
                        bitmapImage.DecodePixelWidth = 2400;
                        bitmapImage.EndInit();
                        num2 = (double)bitmapImage.PixelWidth / (double)bitmapImage.PixelHeight;
                    IL_96B:
                        if (this.widthimg.ActualHeight > this.widthimg.ActualWidth)
                        {
                            this.forWdht.Width = this.widthimg.ActualHeight * num2;
                            this.forWdht.Height = this.widthimg.ActualHeight;
                        }
                        else
                        {
                            this.forWdht.Height = this.widthimg.ActualWidth * num2;
                            this.forWdht.Width = this.widthimg.ActualWidth;
                        }
                    IL_DDA:
                        this.specproductType = Convert.ToString(num);
                        OpaqueClickableImage opaqueClickableImage = new OpaqueClickableImage();
                        opaqueClickableImage.Uid = "frame";
                        opaqueClickableImage.Source = bitmapImage;
                        opaqueClickableImage.Stretch = Stretch.Fill;
                        opaqueClickableImage.IsHitTestVisible = false;
                        opaqueClickableImage.Loaded += new RoutedEventHandler(this.objCurrent_Loaded);
                        this.frm.Children.Add(opaqueClickableImage);
                        this.frm.Width = this.forWdht.Width;
                        this.frm.Height = this.forWdht.Height;
                        this.forWdht.InvalidateArrange();
                        this.forWdht.InvalidateMeasure();
                        this.forWdht.InvalidateVisual();
                        this.Zomout(true);
                        if (this._ZoomFactor == 1.0)
                        {
                            this._ZoomFactor = 0.95;
                            if (this.zoomTransform != null && this._ZoomFactor >= 0.5)
                            {
                                if (this.FlipMode != 0 || this.FlipModeY != 0)
                                {
                                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                                    this.transformGroup = new TransformGroup();
                                    this.transformGroup.Children.Add(this.zoomTransform);
                                    this.transformGroup.Children.Add(this.translateTransform);
                                    this.transformGroup.Children.Add(this.rotateTransform);
                                    this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                                    this.IsGraphicsChange = true;
                                }
                                else
                                {
                                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                                    this.zoomTransform.ScaleX = this._ZoomFactor;
                                    this.zoomTransform.ScaleY = this._ZoomFactor;
                                    this.transformGroup = new TransformGroup();
                                    this.transformGroup.Children.Add(this.zoomTransform);
                                    this.transformGroup.Children.Add(this.translateTransform);
                                    this.transformGroup.Children.Add(this.rotateTransform);
                                    this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                                    this.IsGraphicsChange = true;
                                }
                                this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
                            }
                        }
                        bitmapImage2.Freeze();
                        bitmapImage.Freeze();
                        VisualStateManager.GoToState(this.btnBorder, "Checked", true);
                        VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                        this.graphicsframeApplied = true;
                        goto IL_1C8E;
                    }
                    else
                    {
                        if (this.lstGraphics.Visibility == Visibility.Visible)
                        {
                            this.IsImageDirtyState = true;
                            Button button2 = new Button();
                            button2.HorizontalAlignment = HorizontalAlignment.Center;
                            button2.VerticalAlignment = VerticalAlignment.Center;
                            Style style = (Style)base.FindResource("ButtonStyleGraphic");
                            button2.Style = style;
                            System.Windows.Controls.Image image = new System.Windows.Controls.Image();
                            BitmapImage bitmapImage = new BitmapImage(new Uri(button.Tag.ToString()));
                            image.Name = "A" + Guid.NewGuid().ToString().Split(new char[]
                    {
                        '-'
                    })[0].ToString();
                            button2.Name = "btn" + Guid.NewGuid().ToString().Split(new char[]
                    {
                        '-'
                    })[0].ToString();
                            button2.Uid = "uid" + Guid.NewGuid().ToString().Split(new char[]
                    {
                        '-'
                    })[0].ToString();
                            image.Source = bitmapImage;
                            button2.Tag = "1";
                            TransformGroup transformGroup = this.GrdZomout.LayoutTransform as TransformGroup;
                            double num3 = 0.0;
                            double num4 = 0.0;
                            TransformCollection children = transformGroup.Children;
                            foreach (Transform current in children)
                            {
                                ScaleTransform scaleTransform = current as ScaleTransform;
                                if (scaleTransform != null)
                                {
                                    num3 = scaleTransform.ScaleX;
                                    num4 = scaleTransform.ScaleY;
                                    break;
                                }
                            }
                            if (num3 != 0.0)
                            {
                                if (num3 < 1.0)
                                {
                                    button2.Width = 90.0 / num3;
                                    button2.Height = 90.0 / num4;
                                }
                                else
                                {
                                    button2.Width = 90.0 * num3;
                                    button2.Height = 90.0 * num4;
                                }
                            }
                            else
                            {
                                button2.Width = 90.0;
                                button2.Height = 90.0;
                            }
                            button2.Click += new RoutedEventHandler(this.btngrph_Click);
                            button2.Content = image;
                            this.dragCanvas.Children.Add(button2);
                            Canvas.SetLeft(button2, this.GrdBrightness.ActualWidth / 2.0);
                            Canvas.SetTop(button2, this.GrdBrightness.ActualHeight / 2.0);
                            image.MouseLeftButtonUp += new MouseButtonEventHandler(this.SelectObject);
                            button2.MouseLeftButtonUp += new MouseButtonEventHandler(this.SelectObject);
                            button2.GotFocus += new RoutedEventHandler(this.btngrph_GotFocus);
                            button2.Focus();
                            Panel.SetZIndex(button2, 4);
                            VisualStateManager.GoToState(this.btngraphics, "Checked", true);
                            VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                            this.graphicsCount++;
                            bitmapImage.Freeze();
                            goto IL_1C8E;
                        }
                        // DependencyObject dependencyObject;
                        if (this.lstBackground.Visibility == Visibility.Visible)
                        {
                            dependencyObject = (DependencyObject)sender;
                            BitmapImage bitmapImage3;
                            if (3 != 0)
                            {
                                while (dependencyObject != null && !(dependencyObject is ListBoxItem))
                                {
                                    dependencyObject = VisualTreeHelper.GetParent(dependencyObject);
                                }
                                List<UIElement> list = new List<UIElement>();
                                ListBoxItem listBoxItem = (ListBoxItem)dependencyObject;
                                bool flag = true;
                                bool flag2;
                                if (this.graphicsBorderApplied)
                                {
                                    this.imageundoGrid.Background = null;
                                    this.graphicsBorderApplied = false;
                                    VisualStateManager.GoToState(this.btnBackground, "Unchecked", true);
                                    this.ProducttypeforGS = 0;
                                    flag2 = !(this.selectedbackground == string.Concat(new string[]
                                    {
                                        LoginUser.DigiFolderBackGroundPath,
                                        "\\",
                                        this.BGfolderPathspecproductType,
                                        "\\",
                                        button.CommandParameter.ToString()
                                    }));
                                    if (false)
                                    {
                                        goto IL_599;
                                    }
                                    if (!flag2)
                                    {
                                        if (!this.isChromaApplied)
                                        {
                                            flag = false;
                                        }
                                    }
                                    else
                                    {
                                        flag = true;
                                    }
                                    if (listBoxItem != null)
                                    {
                                        listBoxItem.IsSelected = false;
                                    }
                                }
                                if (!flag)
                                {
                                    goto IL_194F;
                                }
                                this.selectedbackground = System.IO.Path.Combine(LoginUser.DigiFolderBackGroundPath, this.BGfolderPathspecproductType, tempFileName[tempFileName.Count<string>() - 1]);
                                this.BackgroundSelectedValue = tempFileName[tempFileName.Count<string>() - 1];
                                if (string.IsNullOrEmpty(this.BackgroundSelectedValue) && string.IsNullOrWhiteSpace(this.BackgroundSelectedValue))
                                {
                                    this.canbackgroundParent.Visibility = Visibility.Visible;
                                    this.canbackground.Visibility = Visibility.Visible;
                                    this.imageundoGrid.Visibility = Visibility.Visible;

                                    return;
                                }
                                if (listBoxItem != null)
                                {
                                    listBoxItem.IsSelected = true;
                                }
                                this.canbackgroundParent.Visibility = Visibility.Visible;
                                this.canbackground.Visibility = Visibility.Visible;
                                this.imageundoGrid.Visibility = Visibility.Visible;
                                Uri uriSource = new Uri(System.IO.Path.Combine(LoginUser.DigiFolderBackGroundPath, this.BGfolderPathspecproductType, button.CommandParameter.ToString()));
                                BackgroundBusiness backgroundBusiness = new BackgroundBusiness();
                                this.ProducttypeforGS = backgroundBusiness.GetProductTypeforBackgorund(button.CommandParameter.ToString());
                                bitmapImage3 = new BitmapImage(uriSource);
                                this.imageundoGrid.Background = new ImageBrush
                                {
                                    ImageSource = bitmapImage3
                                };
                                VisualStateManager.GoToState(this.btnBackground, "Checked", true);
                                VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                                this.graphicsBorderApplied = true;
                                this.IsImageDirtyState = true;
                                flag2 = (this.GrdsubGreenScreen.Visibility != Visibility.Visible);
                                if (false)
                                {
                                    goto IL_1BE2;
                                }
                                if (!flag2)
                                {
                                    this.btnDefaultGreenScreen_Click(sender, e);
                                }
                                if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                                {
                                    if (this.canbackgroundold.Background != null)
                                    {
                                        this.canbackgroundold.Background.Opacity = 0.0;
                                    }
                                }
                                else if (this.canbackgroundold.Background != null)
                                {
                                    this.canbackgroundold.Background.Opacity = 1.0;
                                }
                                if (this.frm.Children.Count != 0)
                                {
                                    goto IL_1946;
                                }
                                double num2;
                                if (bitmapImage3.Height > bitmapImage3.Width)
                                {
                                    num2 = bitmapImage3.Width / bitmapImage3.Height;
                                }
                                else
                                {
                                    num2 = bitmapImage3.Height / bitmapImage3.Width;
                                }

                                if (this.forWdht.Height > this.forWdht.Width)
                                {
                                    if (num2 > 1)
                                    {
                                        this.forWdht.Width = this.forWdht.Height * num2;
                                    }
                                    else
                                    {
                                        if(this.forWdht.Height > 1000)
                                        {
                                            this.forWdht.Width = this.forWdht.Height;
                                        }
                                        else
                                        {
                                            this.forWdht.Width = 1400;
                                        }
                                        
                                    }

                                }
                                else
                                {
                                    this.forWdht.Height = this.forWdht.Width * num2;
                               }

                            }
                            this.forWdht.InvalidateArrange();
                            this.forWdht.InvalidateMeasure();
                            this.forWdht.InvalidateVisual();
                            this.imageundoGrid.Height = this.forWdht.Height;
                            this.imageundoGrid.Width = this.forWdht.Width;
                           
                            this.imageundoGrid.InvalidateArrange();
                            this.imageundoGrid.InvalidateMeasure();
                        IL_1905:
                            this.imageundoGrid.InvalidateVisual();
                            this.Zomout(true);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)

                            {
                                this.ZoomInButton_Click1(sender, e);
                                this.ZoomOutButton_Click1(sender, e);
                            }
                        IL_1946:
                            bitmapImage3.Freeze();
                        IL_194F:
                            //ICacheRepository factory = DataCacheFactory.GetFactory<ICacheRepository>(typeof(BackgroundCache).FullName);
                            //ICacheRepository factory2 = DataCacheFactory.GetFactory<ICacheRepository>(typeof(BorderCaches).FullName);
                            //ICacheRepository factory3 = DataCacheFactory.GetFactory<ICacheRepository>(typeof(SceneCache).FullName);
                            //List<BackGroundInfo> source = (List<BackGroundInfo>)factory.GetData();
                            //List<BorderInfo> source2 = (List<BorderInfo>)factory2.GetData();
                            //List<SceneInfo> list2 = (List<SceneInfo>)factory3.GetData();
                            List<BackGroundInfo> source = new List<BackGroundInfo>(); //(List<BackGroundInfo>)factory.GetData();
                            List<BorderInfo> source2 = new List<BorderInfo>();//(List<BorderInfo>)factory2.GetData();
                            List<SceneInfo> list2 = new List<SceneInfo>(); //(List<SceneInfo>)factory3.GetData();

                            BackGroundInfo backGroundInfo = source.Where(delegate (BackGroundInfo x)
                            {
                                bool arg_2E_0;
                                while (true)
                                {
                                    bool arg_5B_0 = arg_2E_0 = (x.DG_BackGround_Image_Name.ToLower() == tempFileName[tempFileName.Count<string>() - 1].ToLower());
                                    while (true)
                                    {
                                        if (!false)
                                        {
                                            bool flag4 = arg_5B_0;
                                            if (!false)
                                            {
                                            }
                                            if (false)
                                            {
                                                break;
                                            }
                                            arg_5B_0 = (arg_2E_0 = flag4);
                                        }
                                        if (7 != 0)
                                        {
                                            return arg_2E_0;
                                        }
                                    }
                                }
                                return arg_2E_0;
                            }).FirstOrDefault<BackGroundInfo>();
                            int bgId = 0;
                            if (backGroundInfo != null)
                            {
                                bgId = backGroundInfo.DG_Background_pkey;
                                if (string.IsNullOrWhiteSpace(this.specproductType))
                                {
                                    if (false)
                                    {
                                        goto IL_1905;
                                    }
                                    this.ProductTypeId = 2;
                                }
                                else
                                {
                                    this.ProductTypeId = Convert.ToInt32(this.specproductType);
                                }
                            }
                            list2 = list2.Where(delegate (SceneInfo x)
                            {
                                int arg_27_0;
                                bool flag4;
                                if (4 != 0)
                                {
                                    bool arg_3F_0;
                                    if (x.BackGroundId != bgId)
                                    {
                                        arg_3F_0 = ((arg_27_0 = 0) != 0);
                                        goto IL_1A;
                                    }
                                    arg_3F_0 = ((arg_27_0 = (x.IsActive ? 1 : 0)) != 0);
                                IL_14:
                                    if (false)
                                    {
                                        return arg_27_0 != 0;
                                    }
                                IL_1A:
                                    if (3 == 0)
                                    {
                                        goto IL_14;
                                    }
                                    if (6 == 0)
                                    {
                                        return arg_27_0 != 0;
                                    }
                                    flag4 = arg_3F_0;
                                }
                                arg_27_0 = (flag4 ? 1 : 0);
                                return arg_27_0 != 0;
                            }).ToList<SceneInfo>();
                            if (this.IsSceneApply)
                            {
                                this.RemoveBorder(this.borderfilename, this.selectedbordername, this.ProductTypeId, sender);
                            }
                            if (list2 != null && list2.Count > 0)
                            {
                                string text2 = string.Empty;
                                SceneInfo sceneDetails = list2.FirstOrDefault<SceneInfo>();
                                BorderInfo borderInfo = (from x in source2
                                                         where x.DG_Borders_pkey == sceneDetails.BorderId
                                                         select x).FirstOrDefault<BorderInfo>();
                                if (borderInfo != null)
                                {
                                    text2 = (borderInfo.DG_Border ?? string.Empty);
                                    this.borderfilename = LoginUser.DigiFolderFramePath + "\\" + text2;
                                    this.selectedbordername = LoginUser.DigiFolderFramePath + "\\Thumbnails\\" + text2;
                                }
                                else
                                {
                                    this.ChromaBorderPath = string.Empty;
                                }
                                if (this.lstFrame.Visibility != Visibility.Visible && !string.IsNullOrEmpty(text2))
                                {
                                    this.ApplyBorder(this.borderfilename, this.selectedbordername, this.ProductTypeId, sender);
                                    this.IsSceneApply = true;
                                }
                            }
                            else
                            {
                                this.IsSceneApply = false;
                            }
                        }
                        else
                        {
                            if (this.lstStrip.Visibility == Visibility.Visible)
                            {
                                dependencyObject = (DependencyObject)sender;
                                goto IL_1BDF;
                            }
                            goto IL_1C8E;
                        }
                    IL_1B83:
                        bool arg_1B97_0 = !this.islstBackgroundVisible;
                        bool expr_1B99;
                        do
                        {
                            bool flag2 = arg_1B97_0;
                            expr_1B99 = (arg_1B97_0 = flag2);
                        }
                        while (false);
                        if (!expr_1B99)
                        {
                            this.islstBackgroundVisible = false;
                        }
                        goto IL_1C8E;
                    IL_1BDF:
                        bool arg_1BF2_0;
                        if (dependencyObject == null)
                        {
                            arg_1BF2_0 = false;
                            goto IL_1BF1;
                        }
                    IL_1BE2:
                        arg_1BF2_0 = !(dependencyObject is ListBoxItem);
                    IL_1BF1:
                        if (!arg_1BF2_0)
                        {
                            List<UIElement> list = new List<UIElement>();
                            ListBoxItem listBoxItem = (ListBoxItem)dependencyObject;
                            listBoxItem.IsSelected = true;
                            lstMyItems = (LstMyItems)this.lstStrip.SelectedItem;
                            flag3 = false;
                            if (this.IsGumBall != this.gumshowDb)
                            {
                                goto IL_1C39;
                            }
                            goto IL_1C3E;
                        }
                        else
                        {
                            dependencyObject = VisualTreeHelper.GetParent(dependencyObject);
                            if (!false)
                            {
                                goto IL_1BDF;
                            }
                            goto IL_1B83;
                        }
                    }
                IL_599:
                    this.zoomTransform.ScaleX = this._ZoomFactor;
                    if (4 == 0)
                    {
                        goto IL_66B;
                    }
                    this.zoomTransform.ScaleY = this._ZoomFactor;
                    this.transformGroup = new TransformGroup();
                    this.transformGroup.Children.Add(this.zoomTransform);
                    this.transformGroup.Children.Add(this.translateTransform);
                    this.transformGroup.Children.Add(this.rotateTransform);
                    this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                    this.IsGraphicsChange = true;
                IL_63F:
                    this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
                IL_66B:
                IL_66C:
                    return;
                IL_1C39:
                    flag3 = true;
                IL_1C3E:
                    if (this.IsImageDirtyState || flag3)
                    {
                        this.SaveOnImageChange();
                    }
                    try
                    {
                        if (!lstMyItems.FilePath.Contains("Locked.png"))
                        {
                            this.EditImage(lstMyItems.PhotoId, lstMyItems.Name);
                        }
                    }
                    catch
                    {

                    }
                IL_1C8E:;
                }

            }
            catch (Exception ex)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(ex);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                MessageBox.Show(ex.Message.ToString(), "PhotoSW", MessageBoxButton.OK);
            }
            finally
            {
                DragCanvas.SetCanBeDragged(this.mainImage, false);
                DragCanvas.SetCanBeDragged(this.GrdBrightness, true);
                DragCanvas.SetCanBeDragged(this.Opacitymsk, true);
                this.dragCanvas.IsEnabled = true;
                this.dragCanvas.AllowDragging = true;
                MemoryManagement.FlushMemory();
            }
        }

        private void Clone_Click(object sender, RoutedEventArgs e)
        {
            bool exe_CL = this.GrdSPSEdition.Visibility == Visibility.Visible;
            if (exe_CL)
            {
                this.canbackgroundParent.Visibility = Visibility.Visible;
                this.canbackground.Visibility = Visibility.Visible;
                this.imageundoGrid.Visibility = Visibility.Visible;
            }
        }
        private void ellipse_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            while (true)
            {
                if (8 != 0)
                {
                    bool flag = !this.move;
                    if (!false)
                    {
                        if (!flag)
                        {
                            this.move = false;
                        }
                        else
                        {
                            if (false)
                            {
                                continue;
                            }
                            this.move = true;
                        }
                    }
                }
            IL_2C:
                if (!false)
                {
                    break;
                }
                continue;
                goto IL_2C;
            }
        }

        private void Bloomeffect()
        {
            try
            {
                while (true)
                {
                    while (true)
                    {
                        if (this._bloom == "0")
                        {

                            BloomEffect bloomEffect;
                            if (!false)
                            {
                                this._bloom = "1";
                                bloomEffect = new BloomEffect();
                                bloomEffect.BaseIntensity = 2.0;
                                bloomEffect.BaseSaturation = 2.0;
                                bloomEffect.BloomIntensity = 0.8;
                                bloomEffect.BloomSaturation = 0.8;
                                this.GrdEmboss.Effect = bloomEffect;
                            }
                            if (3 == 0)
                            {
                                break;
                            }

                        }
                        else
                        {
                            this._bloom = "0";
                            if (!false)
                            {
                                this.GrdEmboss.Effect = null;
                            }
                            if (false)
                            {
                                break;
                            }
                        }
                        if (!false)
                        {
                            goto Block_6;
                        }
                    }
                }
            Block_6:;
            }
            catch (Exception serviceException)
            {
                do
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (2 == 0);
            }
            finally
            {
                this.EffectLogOperation(new LogEffect
                {
                    effvalue = Convert.ToDouble(this._bloom),
                    optname = "bloom"
                });
            }
        }


        private void Embosseffect()
        {
            try
            {
                while (true)
                {
                    while (true)
                    {
                        if (this._emboss == "0")
                        {
                            EmbossedEffect embossedEffect;
                            if (!false)
                            {
                                this._emboss = "1";
                                embossedEffect = new EmbossedEffect();
                            }
                            if (3 == 0)
                            {
                                break;
                            }
                            embossedEffect.Amount = 0.7;
                            embossedEffect.Width = 0.002;
                            this.GrdEmboss.Effect = embossedEffect;

                        }
                        else
                        {
                            this._emboss = "0";
                            if (!false)
                            {
                                // this.GrdEmboss.Effect = null;
                            }
                            if (false)
                            {
                                break;
                            }
                        }
                        if (!false)
                        {
                            goto Block_6;
                        }
                    }
                }
            Block_6:;
            }
            catch (Exception serviceException)
            {
                do
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (2 == 0);
            }
            finally
            {
                this.EffectLogOperation(new LogEffect
                {
                    effvalue = Convert.ToDouble(this._emboss),
                    optname = "emboss"
                });
            }
        }

        public void EnableButtonForLayering()
        {
            while (true)
            {
                this.btnrotate.IsEnabled = true;
                while (!false)
                {
                    if (false)
                    {
                        goto IL_4D;
                    }
                    this.btnantirotate.IsEnabled = true;
                    if (6 == 0)
                    {
                        goto IL_4D;
                    }
                    this.btnflip.IsEnabled = true;
                    if (!false)
                    {
                        UIElement expr_30 = this.btnCrop;
                        bool expr_35 = true;
                        if (!false)
                        {
                            expr_30.IsEnabled = expr_35;
                        }
                        if (!false)
                        {
                            goto Block_4;
                        }
                        break;
                    }
                }
            }
        Block_4:
            this.RedEye.IsEnabled = true;
        IL_4D:
            this.btnundo.IsEnabled = true;
        }

        private void EnableButtonForRedEye()
        {
            UIElement expr_06 = this.btnrotate;
            bool expr_0B = true;
            if (!false)
            {
                expr_06.IsEnabled = expr_0B;
            }
            if (4 == 0)
            {
                goto IL_D3;
            }
            this.btnantirotate.IsEnabled = true;
        IL_2B:
            if (7 == 0)
            {
                goto IL_8C;
            }
            this.btnflip.IsEnabled = true;
            this.btnModerate.IsEnabled = true;
            this.btnCrop.IsEnabled = true;
        IL_62:
            this.btnundo.IsEnabled = true;
            this.btnAddgraphics.IsEnabled = true;
            if (false)
            {
                goto IL_2B;
            }
            this.btnColorEffects.IsEnabled = true;
        IL_8C:
            this.btnColorEffectsfilters.IsEnabled = true;
            if (!false)
            {
            }
            this.btnColorFilters.IsEnabled = true;
            this.btnchkpreview.IsEnabled = true;
            this.btnrestoremainimg.IsEnabled = true;
            if (!false)
            {
            }
            this.btnHighPreview.IsEnabled = true;
        IL_D3:
            if (true)
            {
                this.btnGreenScreen.IsEnabled = true;
                return;
            }
            goto IL_62;
        }

        public void EnabledAllButtons()
        {
            while (true)
            {
                UIElement expr_06 = this.btnrotate;
                bool expr_0B = true;
                if (3 != 0)
                {
                    expr_06.IsEnabled = expr_0B;
                }
                this.btnantirotate.IsEnabled = true;
                UIElement expr_2B = this.btnflip;
                bool expr_30 = true;
                if (!false)
                {
                    expr_2B.IsEnabled = expr_30;
                }
                this.btnModerate.IsEnabled = true;
                this.btnCrop.IsEnabled = true;
                this.btnundo.IsEnabled = true;
                while (true)
                {
                    if (8 != 0)
                    {
                        this.btnAddgraphics.IsEnabled = true;
                        this.btnColorEffects.IsEnabled = true;
                        if (false)
                        {
                            goto IL_E8;
                        }
                        this.btnColorEffectsfilters.IsEnabled = true;
                    }
                    this.RedEye.IsEnabled = true;
                    if (5 == 0)
                    {
                        break;
                    }
                    this.btnColorFilters.IsEnabled = true;
                    if (!false)
                    {
                        if (2 == 0)
                        {
                            break;
                        }
                        this.btnchkpreview.IsEnabled = true;
                    }
                    this.btnrestoremainimg.IsEnabled = true;
                    if (!false)
                    {
                        goto Block_5;
                    }
                }
            }
        Block_5:
            this.btnHighPreview.IsEnabled = true;
        IL_E8:
            this.btnGreenScreen.IsEnabled = true;
        }

        private void EnableSideButton()
        {
            while (true)
            {
                while (true)
                {
                    this.btnSearchPhoto.IsEnabled = true;
                    while (!false)
                    {
                        this.btnPhotoID.IsEnabled = true;
                        do
                        {
                            if (8 != 0)
                            {
                                this.btnchkpreview.IsEnabled = true;
                            }
                        }
                        while (3 == 0);
                        if (2 == 0)
                        {
                            break;
                        }
                        if (6 != 0)
                        {
                            goto Block_4;
                        }
                    }
                }
            }
        Block_4:
            this.btnHighPreview.IsEnabled = true;
        }

        private void EraserRectangleFill(double width, double height)
        {
            this.removebackGround();
            this.squre.Visibility = Visibility.Hidden;
            // this.mainImage.Cursor = Cursors.Arrow;
            double arg_18A_0;
            double arg_18A_1;
            StylusShape eraserShape;
            if (!this.rectangleEraser)
            {
                this.dragCanvas.AllowDragging = false;
                if (!base.IsInitialized)
                {
                    return;
                }
                if (false)
                {
                    // goto IL_1F9;
                }
                if (this._ZoomFactorGreen >= 1.0)
                {
                    this.attribute.Width = width;
                    this.attribute.Height = height;
                }
                else
                {
                    this.attribute.Width = width;
                    if (false)
                    {
                        goto IL_12F;
                    }
                    this.attribute.Height = height;
                }
                this.attributeWidth = width;
                this.attributeHeight = height;
                if (8 == 0)
                {
                    return;
                }
                this.MyInkCanvas.DefaultDrawingAttributes = this.attribute;
                this.rectangularRadio.IsChecked = new bool?(true);
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
            IL_104:
                double expr_10A = arg_18A_0 = this.attribute.Width;
                double expr_115 = arg_18A_1 = this.attribute.Height;

                eraserShape = new RectangleStylusShape(expr_10A, expr_115);

                this.MyInkCanvas.EraserShape = eraserShape;
            IL_12F:
                this.IsEraserDrawRectangleActive = false;
                this.IsEraserDrawEllipseActive = false;
                this.IsGreenCorrection = false;
                this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
                if (5 != 0)
                {
                    return;
                }
                goto IL_104;
            }
        }
        private void EraserBrush(double width, double height)
        {
            this.removebackGround();
            this.squre.Visibility = Visibility.Hidden;
            this.mainImage.Cursor = Cursors.Arrow;

            double arg_18A_0;
            double arg_18A_1;
            StylusShape eraserShape;
            if (this.rectangleEraser)
            {
                this.dragCanvas.AllowDragging = false;
                if (!base.IsInitialized)
                {
                    return;
                }
                if (false)
                {
                    goto IL_1F9;
                }
                if (this._ZoomFactorGreen >= 1.0)
                {
                    this.attribute.Width = width;
                    this.attribute.Height = height;
                }
                else
                {
                    this.attribute.Width = width;
                    if (false)
                    {
                        goto IL_12F;
                    }
                    this.attribute.Height = height;
                }
                this.attributeWidth = width;
                this.attributeHeight = height;
                if (8 == 0)
                {
                    return;
                }
                this.MyInkCanvas.DefaultDrawingAttributes = this.attribute;
                this.rectangularRadio.IsChecked = new bool?(true);
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
            IL_104:
                double expr_10A = arg_18A_0 = this.attribute.Width;
                double expr_115 = arg_18A_1 = this.attribute.Height;
                if (false)
                {
                    goto IL_18A;
                }
                //eraserShape = new RectangleStylusShape(expr_10A, expr_115);
                eraserShape = new RectangleStylusShape(expr_10A, expr_115, 45);
                this.MyInkCanvas.EraserShape = eraserShape;
            IL_12F:
                this.IsEraserDrawRectangleActive = false;
                this.IsEraserDrawEllipseActive = false;
                this.IsGreenCorrection = false;
                this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
                if (5 != 0)
                {
                    return;
                }
                goto IL_104;
            }
            else
            {
                this.dragCanvas.AllowDragging = false;
                bool arg_174_0;
                bool expr_16A = arg_174_0 = base.IsInitialized;
                if (!false)
                {
                    bool flag = expr_16A;
                    arg_174_0 = flag;
                }
                if (!arg_174_0)
                {
                    return;
                }
                arg_18A_0 = this._ZoomFactorGreen;
                arg_18A_1 = 1.0;
            }
        IL_18A:
            if (arg_18A_0 >= arg_18A_1)
            {
                this.attribute.Width = width;
                this.attribute.Height = height;
            }
            else if (8 != 0)
            {
                this.attribute.Width = width;
                this.attribute.Height = height;
            }
            this.attributeWidth = width;
            this.attributeHeight = height;
            //  this.ellipticalRadio.IsChecked = new bool?(true);
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
        IL_1F9:
            eraserShape = new EllipseStylusShape(this.attribute.Width, this.attribute.Height);
            this.MyInkCanvas.EraserShape = eraserShape;
            this.IsEraserDrawRectangleActive = false;
            this.IsEraserDrawEllipseActive = false;
            this.IsGreenCorrection = false;

            this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
        }

        private void EraserBrushUndo(double width, double height)
        {
            StylusShape eraserShape;
            do
            {
                this.dragCanvas.AllowDragging = false;
                this.removebackGround();
                bool expr_28 = !this.rectangleEraser;
                bool flag;
                if (-1 != 0)
                {
                    flag = expr_28;
                }
                if (flag)
                {
                    goto IL_9C;
                }
                if (!true)
                {
                    goto IL_9D;
                }
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
                if (!false)
                {
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.EraseByPoint;
                    if (-1 == 0)
                    {
                        goto IL_CC;
                    }
                    eraserShape = new RectangleStylusShape(width, height);
                    this.MyInkCanvas.EraserShape = eraserShape;
                }
                this.IsEraserDrawRectangleActive = false;
            }
            while (false);
            this.IsEraserDrawEllipseActive = false;
            this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
            if (!false)
            {
                return;
            }
            goto IL_D3;
        IL_9C:
        IL_9D:
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.EraseByPoint;
            eraserShape = new EllipseStylusShape(width, height);
            this.MyInkCanvas.EraserShape = eraserShape;
        IL_CB:
        IL_CC:
            this.IsEraserDrawRectangleActive = false;
        IL_D3:
            this.IsEraserDrawEllipseActive = false;
            this.MyInkCanvas.EditingModeInverted = InkCanvasEditingMode.EraseByPoint;
            if (6 == 0)
            {
                goto IL_CB;
            }
        }

        private void EraseRectangleBrush()
        {
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.EraseByPoint;
            double arg_DE_0;
            double arg_93_0;
            double arg_78_0;
            double expr_30 = arg_78_0 = (arg_93_0 = (arg_DE_0 = this.StartingPoint.X - this.EndingPoint.X));
            if (2 == 0)
            {
                goto IL_85;
            }
            double num = Math.Abs(expr_30);
        IL_3E:
            double expr_58 = arg_78_0 = (arg_DE_0 = this.StartingPoint.Y - this.EndingPoint.Y);
            if (false)
            {
                goto IL_D2;
            }
            double num2 = Math.Abs(expr_58);
            arg_78_0 = this.StartingPoint.X;
            double arg_77_0 = num;
        IL_6E:
            double num3 = arg_78_0 + arg_77_0 / 2.0;
            arg_93_0 = (arg_78_0 = (arg_DE_0 = this.StartingPoint.Y));
        IL_85:
            double arg_DE_1;
            double expr_85 = arg_77_0 = (arg_DE_1 = num2);
            if (!true)
            {
                goto IL_DB;
            }
            double num4 = arg_93_0 + expr_85 / 2.0;
        IL_95:
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.EraseByPoint;
            StylusPointCollection stylusPointCollection = new StylusPointCollection();
            StylusPoint item = new StylusPoint
            {
                X = num3,
                Y = num4
            };
            stylusPointCollection.Add(item);
            arg_DE_0 = (arg_78_0 = num);
        IL_D2:
            arg_DE_1 = (arg_77_0 = 0.0);
        IL_DB:
            if (6 != 0)
            {
                if (arg_DE_0 > arg_DE_1 && num2 > 0.0)
                {
                    DrawingAttributes drawingAttributes = new DrawingAttributes();
                    drawingAttributes.Width = num * 4.0;
                    drawingAttributes.Height = num2 * 4.0;
                    bool arg_13D_0 = !(this.primaryColorName == "Red");
                    while (arg_13D_0)
                    {
                        if (this.primaryColorName == "Green")
                        {
                            drawingAttributes.Color = System.Windows.Media.Color.FromArgb(255, 0, 255, 0);
                        }
                        else if (this.primaryColorName == "Blue")
                        {
                            drawingAttributes.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                        }
                        else
                        {
                            bool expr_1D2 = arg_13D_0 = (this.primaryColorName == "Gray");
                            if (2 == 0)
                            {
                                continue;
                            }
                            if (expr_1D2)
                            {
                                drawingAttributes.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                            }
                        }
                    IL_1FE:
                        if (3 == 0)
                        {
                            goto IL_95;
                        }
                        drawingAttributes.StylusTip = StylusTip.Rectangle;
                        this.MyInkCanvas.Strokes.Add(new Stroke(stylusPointCollection)
                        {
                            DrawingAttributes = drawingAttributes
                        });
                        this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                        if (!false)
                        {
                            return;
                        }
                        goto IL_3E;
                    }
                    drawingAttributes.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                    //goto IL_1FE;
                }
                return;
            }
            goto IL_6E;
        }

        private void Mirror(int mode)
        {
            int arg_0D_0 = mode;
            while (true)
            {
                bool flag;
                if (2 != 0)
                {
                    flag = (arg_0D_0 == -1);
                    if (!flag)
                    {
                        this.rotateangle = mode;
                    }
                    int mirrorMode = this.MirrorMode;
                    try
                    {
                        flag = (this.MirrorModeY != 0);
                        if (flag)
                        {
                            flag = (this.MirrorMode != 0);
                            goto IL_13F;
                        }
                        flag = (this.MirrorMode != 0);
                        if (flag)
                        {
                            this.zoomTransform.CenterX = 0.5;
                            this.zoomTransform.CenterY = 0.5;
                            this.zoomTransform.ScaleX = 1.0;
                            this.MirrorMode = 0;
                            goto IL_12D;
                        }

                        this.zoomTransform.CenterX = 0.5;
                        this.zoomTransform.CenterY = 0.5;
                    IL_AD:
                        this.zoomTransform.ScaleX = -1.0;
                        this.MirrorMode = 1;
                    IL_12D:
                        goto IL_18B;
                    IL_13F:
                        if (!flag)
                        {
                            this.zoomTransform.ScaleY = -1.0;
                            this.MirrorMode = 1;
                        }
                        else
                        {
                            if (!true)
                            {
                                goto IL_AD;
                            }
                            this.zoomTransform.ScaleY = 1.0;
                            this.MirrorMode = 0;
                        }
                    IL_186:
                        if (false)
                        {
                            goto IL_13F;
                        }
                    IL_18B:
                        if (-1 == 0)
                        {
                            goto IL_186;
                        }
                        this.transformGroup = new TransformGroup();
                        this.transformGroup.Children.Add(this.zoomTransform);

                        this.GrdMirror.LayoutTransform = this.transformGroup;
                    }
                    catch (Exception serviceException)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                    finally
                    {
                        this.LogOperation(new LogObject
                        {
                            value = (float)MirrorMode,
                            opName = "Mirror"
                        });
                    }
                    goto IL_23F;
                }
                goto IL_2A9;
            IL_256:
                bool expr_256 = (arg_0D_0 = (flag ? 1 : 0)) != 0;
                if (7 == 0)
                {
                    continue;
                }
                if (expr_256)
                {
                    this.IsGraphicsChange = false;
                    VisualStateManager.GoToState(this.btnMirror, "Unchecked", true);
                    goto IL_2A9;
                }
                if (7 != 0)
                {
                    break;
                }
            IL_23F:
                flag = (this.MirrorMode == 0 && this.MirrorModeY == 0);
                goto IL_256;
            IL_2A9:
                if (!false)
                {
                    goto Block_9;
                }
                goto IL_256;
            }
            this.IsEffectChange = true;
            do
            {
                VisualStateManager.GoToState(this.btnMirror, "Checked", true);
                this.RedEye.IsEnabled = false;
            }
            while (!true);
            return;
        Block_9:
            this.RedEye.IsEnabled = true;
        }

        private void FillProductCombo()
        {
            Dictionary<string, string> dictionary = new Dictionary<string, string>();
            try
            {
                ProductBusiness productBusiness = new ProductBusiness();
                List<ProductTypeInfo> productType = productBusiness.GetProductType();
                do
                {
                    foreach (ProductTypeInfo current in productType)
                    {
                        if (!false)
                        {
                            dictionary.Add(current.DG_Orders_ProductType_Name, current.DG_Orders_ProductType_pkey.ToString());
                        }
                    }
                    this.CmbProductType.ItemsSource = dictionary;
                }
                while (false);
                this.CmbProductType.SelectedIndex = 0;
            }
            catch (Exception serviceException)
            {
                if (false)
                {
                    goto IL_114;
                }
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
            IL_10D:
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            IL_114:
                if (false)
                {
                    goto IL_10D;
                }
            }
            do
            {
                if (2 != 0)
                {
                }
            }
            while (3 == 0);
        }




        private void Flip(int mode)
        {
            int arg_0D_0 = mode;
            while (true)
            {
                bool flag;
                if (2 != 0)
                {
                    flag = (arg_0D_0 == -1);
                    if (!flag)
                    {
                        this.rotateangle = mode;
                    }
                    int flipMode = this.FlipMode;
                    try
                    {
                        flag = (this.FlipModeY != 0);
                        if (flag)
                        {
                            flag = (this.FlipMode != 0);
                            goto IL_13F;
                        }
                        flag = (this.FlipMode != 0);
                        if (flag)
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = 1.0;
                            this.FlipMode = 0;
                            goto IL_12D;
                        }
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    IL_AD:
                        this.zoomTransform.ScaleX = -1.0;
                        this.FlipMode = 1;
                    IL_12D:
                        goto IL_18B;
                    IL_13F:
                        if (!flag)
                        {
                            this.zoomTransform.ScaleY = -1.0;
                            this.FlipMode = 1;
                        }
                        else
                        {
                            if (!true)
                            {
                                goto IL_AD;
                            }
                            this.zoomTransform.ScaleY = 1.0;
                            this.FlipMode = 0;
                        }
                    IL_186:
                        if (false)
                        {
                            goto IL_13F;
                        }
                    IL_18B:
                        if (-1 == 0)
                        {
                            goto IL_186;
                        }
                        this.transformGroup = new TransformGroup();
                        this.transformGroup.Children.Add(this.zoomTransform);
                        this.transformGroup.Children.Add(this.translateTransform);
                        this.transformGroup.Children.Add(this.rotateTransform);
                        this.GrdFlip.LayoutTransform = this.zoomTransform;
                    }
                    catch (Exception serviceException)
                    {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                    finally
                    {
                        this.LogOperation(new LogObject
                        {
                            value = (float)flipMode,
                            opName = "flip"
                        });
                    }
                    goto IL_23F;
                }
                goto IL_2A9;
            IL_256:
                bool expr_256 = (arg_0D_0 = (flag ? 1 : 0)) != 0;
                if (7 == 0)
                {
                    continue;
                }
                if (expr_256)
                {
                    this.IsGraphicsChange = false;
                    VisualStateManager.GoToState(this.btnflip, "Unchecked", true);
                    goto IL_2A9;
                }
                if (7 != 0)
                {
                    break;
                }
            IL_23F:
                flag = (this.FlipMode == 0 && this.FlipModeY == 0);
                goto IL_256;
            IL_2A9:
                if (!false)
                {
                    goto Block_9;
                }
                goto IL_256;
            }
            this.IsEffectChange = true;
            do
            {
                VisualStateManager.GoToState(this.btnflip, "Checked", true);
                this.RedEye.IsEnabled = false;
            }
            while (!true);
            return;
        Block_9:
            this.RedEye.IsEnabled = true;
        }

        private void FlipLoad()
        {
            if (2 != 0)
            {
                try
                {
                    int arg_146_0;
                    int expr_0D = arg_146_0 = this.FlipModeY;
                    if (8 != 0)
                    {
                        bool arg_39_0;
                        bool expr_16 = arg_39_0 = (expr_0D == 0);
                        if (!false)
                        {
                            if (!expr_16)
                            {
                                goto IL_83;
                            }
                            arg_39_0 = (this.FlipMode == 1);
                        }
                        arg_146_0 = ((!arg_39_0) ? 1 : 0);
                    }
                    if (arg_146_0 != 0)
                    {
                        goto IL_64;
                    }
                    this.zoomTransform.ScaleX = -1.0;
                IL_62:
                    goto IL_82;
                IL_64:
                    if (!false)
                    {
                        this.zoomTransform.ScaleX = 1.0;
                    }
                IL_82:
                IL_83:
                    this.zoomTransform.CenterX = Convert.ToDouble(this._centerX);
                    this.zoomTransform.CenterY = Convert.ToDouble(this._centerY);
                    this.transformGroup = new TransformGroup();
                    this.transformGroup.Children.Add(this.zoomTransform);
                    if (2 == 0)
                    {
                        goto IL_62;
                    }
                    this.transformGroup.Children.Add(this.translateTransform);
                    if (false)
                    {
                        goto IL_64;
                    }
                    this.transformGroup.Children.Add(this.rotateTransform);
                    this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                if (this.FlipMode == 0 && this.FlipModeY == 0)
                {
                    VisualStateManager.GoToState(this.btnflip, "Unchecked", true);
                    return;
                }
            }
            VisualStateManager.GoToState(this.btnflip, "Checked", true);
        }

        private void GetBackImageSettings()
        {
            try
            {
                List<long> objList = new List<long>();

                objList.Add(34L);
                objList.Add(35L);
                objList.Add(39L);
                objList.Add(75L);
                ConfigBusiness configBusiness = new ConfigBusiness();
                List<iMIXConfigurationInfo> list = (from o in configBusiness.GetNewConfigValues(LoginUser.SubStoreId)
                                                    where objList.Contains(o.IMIXConfigurationMasterId)
                                                    select o).ToList<iMIXConfigurationInfo>();
                if (list != null || list.Count > 0)
                {
                    int i = 0;
                    while (i < list.Count)
                    {
                        long iMIXConfigurationMasterId = list[i].IMIXConfigurationMasterId;
                        if (iMIXConfigurationMasterId > 35L)
                        {
                            goto IL_E3;
                        }
                        if (iMIXConfigurationMasterId >= 34L)
                        {
                            switch ((int)(iMIXConfigurationMasterId - 34L))
                            {
                                case 0:
                                    this.IsDefaultBackgroundEnabled = (!string.IsNullOrEmpty(list[i].ConfigurationValue) == true ? true : false);
                                    goto IL_1A4;
                                case 1:
                                    this.DefaultBackgroundImagePath = ((list[i].ConfigurationValue != null) ? list[i].ConfigurationValue : "10");
                                    goto IL_1A4;
                            }
                            goto IL_E3;
                        }
                    IL_1A4:
                        i++;
                        continue;
                    IL_E3:
                        if (iMIXConfigurationMasterId == 39L)
                        {
                            this.CmbProductType.SelectedValue = ((!string.IsNullOrEmpty(list[i].ConfigurationValue)) ? Convert.ToString(list[i].ConfigurationValue) : "1");
                            goto IL_1A4;
                        }
                        if (iMIXConfigurationMasterId != 75L)
                        {
                            goto IL_1A4;
                        }
                        this.isSingleScreenPreview = (!(string.IsNullOrEmpty(list[i].ConfigurationValue) == true ? true : false));
                        goto IL_1A4;
                    }
                }
                if (this.isSingleScreenPreview)
                {
                    this.txtpreview.Text = "Preview & Flip";
                }
                else
                {
                    this.txtpreview.Text = "Preview ";
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        public void GetBriConData()
        {
            List<long> objConfigMasterIds = new List<long>();
            List<iMIXConfigurationInfo> list;
            if (!false)
            {
                objConfigMasterIds.Add(21L);
                objConfigMasterIds.Add(22L);
                ConfigBusiness configBusiness = new ConfigBusiness();
                list = (from o in configBusiness.GetNewConfigValues(LoginUser.SubStoreId)
                        where objConfigMasterIds.Contains(o.IMIXConfigurationMasterId)
                        select o).ToList<iMIXConfigurationInfo>();
            }
            bool arg_6F_0 = list == null;
            bool expr_77;
            do
            {
                bool flag = arg_6F_0;
                if (-1 == 0)
                {
                    return;
                }
                expr_77 = (arg_6F_0 = flag);
            }
            while (!true);
            if (!expr_77)
            {
                using (List<iMIXConfigurationInfo>.Enumerator enumerator = list.GetEnumerator())
                {
                    while (true)
                    {
                        while (enumerator.MoveNext())
                        {
                            iMIXConfigurationInfo current = enumerator.Current;
                            long arg_9F_0 = current.IMIXConfigurationMasterId;
                            long num;
                            long expr_A1;
                            do
                            {
                                num = arg_9F_0;
                                expr_A1 = (arg_9F_0 = num);
                            }
                            while (4 == 0);
                            if (expr_A1 <= 22L)
                            {
                                if (num >= 21L)
                                {
                                    switch ((int)(num - 21L))
                                    {
                                        case 0:
                                            this._brighteff.Contrast = (string.IsNullOrEmpty(current.ConfigurationValue) ? 0.0 : Convert.ToDouble(current.ConfigurationValue));
                                            break;
                                        case 1:
                                            if (!false)
                                            {
                                                this._brighteff.Brightness = (string.IsNullOrEmpty(current.ConfigurationValue) ? 0.0 : Convert.ToDouble(current.ConfigurationValue));
                                                if (!false)
                                                {
                                                    if (false)
                                                    {
                                                        goto IL_14F;
                                                    }
                                                }
                                            }
                                            break;
                                    }
                                }
                            }
                        }
                        break;
                    }
                IL_14F:;
                }
                this.GrdBrightness.Effect = this._brighteff;
            }
        }

        private Rect GetCropRectangle(decimal constraintRatio)
        {
            Rect result = default(Rect);
            try
            {
                double num;
                double num3;
                double width;
                double arg_515_0;
                double arg_515_1;
                bool flag;
                while (true)
                {
                IL_0A:
                    double expr_769 = this.GrdCrop.ActualWidth;
                    if (3 == 0)
                    {
                    }
                    double expr_77F = this.GrdCrop.ActualHeight;
                    if (8 != 0)
                    {
                        num = expr_77F;
                    }
                    double num2 = this.GrdCrop.ActualWidth / this.GrdCrop.ActualHeight;
                    if (constraintRatio == 0.8m)
                    {
                        goto Block_3;
                    }
                    if (constraintRatio == 0.75m)
                    {
                        goto Block_7;
                    }
                    if (constraintRatio == 0.66m)
                    {
                        break;
                    }
                    if (constraintRatio == 1.0m)
                    {
                        goto Block_13;
                    }
                    if (constraintRatio == 1.5m)
                    {
                        num3 = num / 2.0;
                        width = 1.5 * num3;
                        double expr_38C = arg_515_0 = 0.0;
                        double expr_395 = arg_515_1 = 0.0;
                        if (-1 == 0)
                        {
                            goto IL_515;
                        }
                        result = new Rect(expr_38C, expr_395, width, num3);
                    }
                    else
                    {
                        flag = !(constraintRatio == 1.25m);
                        if (!flag)
                        {
                            goto Block_21;
                        }
                        if (4 != 0)
                        {
                            flag = !(constraintRatio == 1.33m);
                        }
                        if (!false)
                        {
                            goto Block_26;
                        }
                    }
                    while (result.X + result.Width <= this.GrdCrop.ActualWidth && result.Y + result.Height <= this.GrdCrop.ActualHeight)
                    {
                        if (false)
                        {
                            goto IL_0A;
                        }
                        result.Scale(1.01, 1.01);
                    }
                    goto Block_20;
                }
                while (true)
                {
                    num3 = num / 2.0;
                    width = 0.66666666666666663 * num3;
                    result = new Rect(0.0, 0.0, width, num3);
                    while (5 != 0)
                    {
                        if (result.X + result.Width > this.GrdCrop.ActualWidth || result.Y + result.Height > this.GrdCrop.ActualHeight)
                        {
                            goto Block_12;
                        }
                        result.Scale(1.01, 1.01);
                    }
                }
            Block_12:
                goto IL_75D;
            Block_3:
                num3 = num / 2.0;
                width = 0.8 * num3;
                result = new Rect(0.0, 0.0, width, num3);
                double arg_13E_0;
                while (true)
                {
                    double expr_D6 = arg_13E_0 = result.X + result.Width;
                    if (5 == 0)
                    {
                        goto IL_135;
                    }
                    if (expr_D6 > this.GrdCrop.ActualWidth || result.Y + result.Height > this.GrdCrop.ActualHeight)
                    {
                        break;
                    }
                    result.Scale(1.01, 1.01);
                }
                goto IL_75D;
            Block_7:
                arg_13E_0 = num;
            IL_135:
                num3 = arg_13E_0 / 2.0;
                double arg_14C_0 = 0.75;
                double arg_14C_1 = num3;
            IL_14C:
                width = arg_14C_0 * arg_14C_1;
                result = new Rect(0.0, 0.0, width, num3);
                while (result.X + result.Width <= this.GrdCrop.ActualWidth && result.Y + result.Height <= this.GrdCrop.ActualHeight)
                {
                    result.Scale(1.01, 1.01);
                }
                goto IL_75D;
            Block_13:
                num3 = num / 2.0;
                width = 1.0 * num3;
                result = new Rect(0.0, 0.0, width, num3);
                while (result.X + result.Width <= this.GrdCrop.ActualWidth && result.Y + result.Height <= this.GrdCrop.ActualHeight)
                {
                    result.Scale(1.01, 1.01);
                }
            Block_20:
                goto IL_75D;
            Block_21:
                num3 = num / 2.0;
                width = 1.25 * num3;
                result = new Rect(0.0, 0.0, width, num3);
                while (true)
                {
                    double expr_49E = arg_14C_0 = result.X + result.Width;
                    double expr_4A5 = arg_14C_1 = this.GrdCrop.ActualWidth;
                    if (-1 == 0)
                    {
                        goto IL_14C;
                    }
                    if (expr_49E > expr_4A5 || result.Y + result.Height > this.GrdCrop.ActualHeight)
                    {
                        break;
                    }
                    result.Scale(1.01, 1.01);
                }
                goto IL_75D;
            Block_26:
                if (!flag)
                {
                    arg_515_0 = num;
                    arg_515_1 = 2.0;
                }
                else
                {
                    if (constraintRatio == 0.714m)
                    {
                        num3 = num / 2.0;
                        width = 0.7142857142857143 * num3;
                        result = new Rect(0.0, 0.0, width, num3);
                        while (true)
                        {
                            bool arg_663_0 = result.X + result.Width <= this.GrdCrop.ActualWidth && result.Y + result.Height <= this.GrdCrop.ActualHeight;
                            bool expr_665;
                            do
                            {
                                flag = arg_663_0;
                                expr_665 = (arg_663_0 = flag);
                            }
                            while (false);
                            if (!expr_665)
                            {
                                break;
                            }
                            result.Scale(1.01, 1.01);
                        }
                        goto IL_75D;
                    }
                    if (constraintRatio == 1.4m)
                    {
                        num3 = num / 2.0;
                        width = 1.4 * num3;
                        result = new Rect(0.0, 0.0, width, num3);
                        while (result.X + result.Width <= this.GrdCrop.ActualWidth && result.Y + result.Height <= this.GrdCrop.ActualHeight)
                        {
                            result.Scale(1.01, 1.01);
                        }
                        goto IL_75D;
                    }
                    result = new Rect(0.0, 0.0, this.GrdCrop.ActualWidth, this.GrdCrop.ActualHeight);
                    goto IL_75D;
                }
            IL_515:
                num3 = arg_515_0 / arg_515_1;
                double arg_523_0 = 1.3333333333333333;
                double expr_523;
                do
                {
                    expr_523 = (arg_523_0 *= num3);
                }
                while (false);
                width = expr_523;
                result = new Rect(0.0, 0.0, width, num3);
                while (result.X + result.Width <= this.GrdCrop.ActualWidth && result.Y + result.Height <= this.GrdCrop.ActualHeight)
                {
                    result.Scale(1.01, 1.01);
                }
            IL_75D:;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                result = new Rect(0.0, 0.0, this.GrdCrop.ActualWidth, this.GrdCrop.ActualHeight);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
            return result;
        }

        private void GetMktImgInfo()
        {
            try
            {
                MainWindow expr_12C = new MainWindow();
                MainWindow obj;
                if (!false)
                {
                    obj = expr_12C;
                }
                var objList = new List<long>();
                objList.Add(24L);
                objList.Add(25L);
                ConfigBusiness configBusiness = new ConfigBusiness();
                List<iMIXConfigurationInfo> list = (from o in configBusiness.GetNewConfigValues(LoginUser.SubStoreId)
                                                    where objList.Contains(o.IMIXConfigurationMasterId)
                                                    select o).ToList<iMIXConfigurationInfo>();
                bool arg_88_0;
                int arg_84_0;
                if (list == null)
                {
                    bool expr_75 = (arg_84_0 = ((arg_88_0 = (list.Count > 0)) ? 1 : 0)) != 0;
                    if (!false)
                    {
                        arg_88_0 = ((arg_84_0 = ((!expr_75) ? 1 : 0)) != 0);
                    }
                    if (false)
                    {
                        goto IL_88;
                    }
                }
                else
                {
                    arg_84_0 = 0;
                }
                bool flag = arg_84_0 != 0;
                arg_88_0 = flag;
            IL_88:
                if (arg_88_0)
                {
                    goto IL_123;
                }
            IL_8D:
                int i = 0;
                while (i < list.Count)
                {
                    long iMIXConfigurationMasterId = list[i].IMIXConfigurationMasterId;
                    if (iMIXConfigurationMasterId <= 25L)
                    {
                        if (iMIXConfigurationMasterId >= 24L)
                        {
                            switch ((int)(iMIXConfigurationMasterId - 24L))
                            {
                                case 0:
                                    this.MktImgPath = list[i].ConfigurationValue;
                                    break;
                                case 1:
                                    this.mktImgTime = ((list[i].ConfigurationValue != null) ? Convert.ToInt32(list[i].ConfigurationValue) : 10) * 1000;
                                    break;
                            }
                        }
                    }
                IL_10B:
                    i++;
                    continue;
                    goto IL_10B;
                }
            IL_123:
                if (7 == 0)
                {
                    goto IL_8D;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }
        //long maxPhotoId;
        public void GetNewMaxId(out long maxPhotoId)
        {
            while (!false)
            {
                long num = 0L;
                if (6 == 0)
                {
                    break;
                }
                PhotoBusiness photoBusiness = new PhotoBusiness();
                while (4 != 0)
                {
                    string arg_55_0;
                    if (!RobotImageLoader.GetShowAllSubstorePhotos())
                    {
                        arg_55_0 = LoginUser.DefaultSubstores;
                    }
                    else
                    {
                        if (false)
                        {
                            continue;
                        }
                        arg_55_0 = string.Empty;
                    }
                    string substoreId = arg_55_0;
                    if (!false)
                    {
                        photoBusiness.GetMaxId(substoreId, out num, RobotImageLoader.MediaTypes);
                    }
                    maxPhotoId = num;
                    return;
                }
            }
        }

        private void getredeyezoom(System.Windows.Point redpoint)
        {
            try
            {
                double num;
                double num2;
                if (3 != 0)
                {
                    num = redpoint.X;
                    num2 = redpoint.Y;
                    this.ellipse.Margin = new Thickness(num, num2, 0.0, 0.0);
                }
                if (!false)
                {
                    Int32Rect sourceRect = new Int32Rect((int)((num - this.mainImage.ActualWidth * this.redEyeEffect.Radius) * CroppingAdorner.s_dpiX / 96.0), (int)((num2 - this.mainImage.ActualWidth * this.redEyeEffect.Radius) * CroppingAdorner.s_dpiY / 96.0), (int)(2.0 * this.mainImage.ActualWidth * this.redEyeEffect.Radius * CroppingAdorner.s_dpiX / 96.0), (int)(2.0 * this.mainImage.ActualWidth * this.redEyeEffect.Radius * CroppingAdorner.s_dpiX / 96.0));
                    do
                    {
                        BitmapSource source = new CroppedBitmap((BitmapSource)this.mainImage.Source, sourceRect);
                        this.ForRedeye.Source = source;
                    }
                    while (6 == 0);
                }
            }
            catch (Exception var_4_184)
            {

            }
            if (!false)
            {

            }
        }

        public static void GetTimeForLoadingEnd(string name, ref Stopwatch sp)
        {
            if (!false)
            {
                sp.Stop();
            }
            do
            {
                if (!false)
                {
                }
                if (false)
                {
                    break;
                }
                Console.WriteLine("Loading time for " + name + " is " + sp.ElapsedMilliseconds.ToString());
            }
            while (-1 == 0);
        }

        public static void GetTimeForLoadingStart(ref Stopwatch sp)
        {
            sp.Reset();
            sp.Start();
        }

        private void Gray_Click(object sender, RoutedEventArgs e)
        {
            if (-1 != 0 && 8 != 0 && true)
            {
                if (7 == 0)
                {
                    return;
                }
                this.primaryColor = "#808080";
                this.primaryColorName = "Gray";
            }
            this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
        }

        private void GrdBrightness_LayoutUpdated(object sender, EventArgs e)
        {
            int arg_89_0;
            int arg_77_0;
            bool expr_11 = (arg_77_0 = (arg_89_0 = ((this.MyInkCanvas.EditingMode == InkCanvasEditingMode.Ink) ? 1 : 0))) != 0;
            double obj;
            double obj2;
            if (4 != 0)
            {
                if (7 != 0)
                {
                    bool flag = !expr_11;
                    bool expr_F2 = (arg_89_0 = (flag ? 1 : 0)) != 0;
                    if (!true)
                    {
                        goto IL_88;
                    }
                    if (!expr_F2)
                    {
                        goto IL_D8;
                    }
                    obj = (double)this.Opacitymsk.GetValue(Canvas.TopProperty);
                    obj2 = (double)this.Opacitymsk.GetValue(Canvas.LeftProperty);
                    arg_89_0 = (arg_77_0 = (this.canvasTop.Equals(obj) ? 1 : 0));
                }
                if (6 != 0)
                {
                    if (arg_77_0 != 0)
                    {
                        arg_89_0 = (this.canvasLeft.Equals(obj2) ? 1 : 0);
                    }
                    else
                    {
                        arg_89_0 = 0;
                    }
                }
            }
        IL_88:
            if (arg_89_0 != 0)
            {
                goto IL_D8;
            }
            this.canvasTop = obj;
        IL_95:
            this.canvasLeft = obj2;
        IL_9C:
            this.canbackgroundParent.SetValue(Canvas.TopProperty, this.canvasTop);
            this.canbackgroundParent.SetValue(Canvas.LeftProperty, this.canvasLeft);
            if (3 == 0)
            {
                goto IL_95;
            }
        IL_D8:
            if (3 != 0)
            {
                return;
            }
            goto IL_9C;
        }

        private void GrdEffects_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (this.GrdEffects.Visibility == Visibility.Collapsed)
            {
                this.IsbtnBackgroundWithoutChroma = false;
                this.IsBtnBackgroundClicked = false;
            }
        }

        private void Green_Click(object sender, RoutedEventArgs e)
        {
            if (-1 != 0 && 8 != 0 && true)
            {
                if (7 == 0)
                {
                    return;
                }
                this.primaryColor = "#00FF00";
                this.primaryColorName = "Green";
            }
            this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
        }

        private void GreyScaleeffect()
        {
            try
            {
                try
                {
                    if (this._GreyScale == "0")
                    {
                        this._GreyScale = "1";
                        GreyScaleEffect greyScaleEffect;
                        do
                        {
                            greyScaleEffect = new GreyScaleEffect();
                            greyScaleEffect.Desaturation = 1.0;
                            greyScaleEffect.Toned = 0.0;
                            if (-1 == 0)
                            {
                                goto IL_92;
                            }
                        }
                        while (false);
                        this.GrdGreyScale.Effect = greyScaleEffect;
                    }
                    else
                    {
                        this._GreyScale = "0";
                        this.GrdGreyScale.Effect = null;
                    }
                IL_92:;
                }
                catch (Exception)
                {
                }
                while (false)
                {
                }
            }
            finally
            {
                LogEffect objeffectOperation;
                do
                {
                    objeffectOperation = default(LogEffect);
                }
                while (2 == 0);
                if (!false)
                {
                    if (false)
                    {
                        goto IL_11A;
                    }
                    objeffectOperation.effvalue = Convert.ToDouble(this._GreyScale);
                    objeffectOperation.optname = "greyscale";
                }
                this.EffectLogOperation(objeffectOperation);
            IL_11A:;
            }
        }

        private void HideGraphics()
        {
            IEnumerator enumerator;
            IDisposable disposable;
            if (-1 != 0)
            {
                enumerator = this.dragCanvas.Children.GetEnumerator();
                //goto IL_21;
                try
                {
                    while (true)
                    {
                    IL_21:
                        while (enumerator.MoveNext())
                        {
                            UIElement uIElement = (UIElement)enumerator.Current;
                            if (uIElement is Grid)
                            {
                                if (2 != 0)
                                {
                                }
                            }
                            else
                            {
                                bool flag = !(uIElement is Ellipse);
                                bool arg_68_0 = flag;
                                while (arg_68_0)
                                {
                                    if (uIElement is System.Drawing.Rectangle)
                                    {
                                        break;
                                    }
                                    if (false)
                                    {
                                        break;
                                    }
                                    bool expr_8C = arg_68_0 = (uIElement is System.IO.Path);
                                    if (4 != 0)
                                    {
                                        if (expr_8C)
                                        {
                                            if (7 != 0)
                                            {
                                            }
                                        }
                                        else
                                        {
                                            uIElement.Visibility = Visibility.Hidden;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        break;
                    }
                }
                finally
                {
                    disposable = (enumerator as IDisposable);
                    bool arg_EB_0;
                    bool expr_E4 = arg_EB_0 = (disposable == null);
                    if (3 != 0)
                    {
                        bool flag = expr_E4;
                        arg_EB_0 = flag;
                    }
                    if (!arg_EB_0)
                    {
                        disposable.Dispose();
                    }
                }
            }
            enumerator = this.spGumball.Children.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    UIElement uIElement = (UIElement)enumerator.Current;
                    if (uIElement is TextBox)
                    {
                        uIElement.Visibility = Visibility.Hidden;
                    }
                }
            }
            finally
            {
                if (6 != 0)
                {
                    disposable = (enumerator as IDisposable);
                }
                if (disposable != null)
                {
                    disposable.Dispose();
                }
            }
        }

        private void ImgLoader()
        {
            ListBoxItem listBoxItem = null;
            List<LstMyItems>.Enumerator enumerator = this.Frames.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    LstMyItems current = enumerator.Current;
                    this.lstFrame.Items.Add(current);
                    if (this.selectedborder != string.Empty)
                    {
                        while (current.FilePath == this.selectedborder)
                        {
                            if (7 != 0)
                            {
                                this.lstFrame.SelectedItem = current;
                                this.lstFrame.ScrollIntoView(this.lstFrame.SelectedItem);
                                break;
                            }
                        }
                    }
                }
            }
            finally
            {
                if (!false)
                {
                    ((IDisposable)enumerator).Dispose();
                }
            }
            if (listBoxItem != null)
            {
                listBoxItem = (ListBoxItem)this.lstFrame.ItemContainerGenerator.ContainerFromItem(this.lstFrame.SelectedItem);
                listBoxItem.Focus();
            }
        }

        private void incrementThickness_Click(object sender, RoutedEventArgs e)
        {
            while (base.IsInitialized)
            {
                if (!false)
                {
                    bool arg_3D_0 = this.attribute.Width < 1.0;
                    int arg_3D_1 = 0;
                    bool flag;
                    bool arg_B4_0;
                    int expr_AE;
                    while (true)
                    {
                        flag = ((arg_3D_0 ? 1 : 0) == arg_3D_1);
                        if (!true)
                        {
                            break;
                        }
                        bool expr_170 = arg_3D_0 = (arg_B4_0 = flag);
                        if (!false)
                        {
                            if (!expr_170)
                            {
                                goto Block_4;
                            }
                            arg_B4_0 = (arg_3D_0 = (this.attribute.Width < 10.0));
                        }
                        expr_AE = (arg_3D_1 = 0);
                        if (expr_AE == 0)
                        {
                            goto Block_5;
                        }
                    }
                IL_91:
                    goto IL_136;
                IL_B7:
                    if (!flag)
                    {
                        this.attribute.Width += 0.5;
                        this.attribute.Height += 0.5;
                        goto IL_136;
                    }
                    goto IL_F7;
                Block_5:
                    flag = ((arg_B4_0 ? 1 : 0) == expr_AE);
                    goto IL_B7;
                Block_4:
                    this.attribute.Width += 0.1;
                    this.attribute.Height += 0.1;
                    if (7 != 0)
                    {
                        goto IL_91;
                    }
                    goto IL_B7;
                }
            IL_F7:
                this.attribute.Width += 1.0;
                this.attribute.Height += 1.0;
                if (false)
                {
                    continue;
                }
            IL_136:
                this.UpdateControlVisuals();
                return;
            }
        }

        private void InitDragSelectionRect(System.Windows.Point pt1, System.Windows.Point pt2)
        {
            if (false)
            {
                goto IL_0F;
            }
        IL_04:
            if (6 == 0)
            {
                goto IL_1E;
            }
            this.UpdateDragSelectionRect(pt1, pt2);
        IL_0F:
            if (!false)
            {
                this.dragSelectionBorder.Visibility = Visibility.Visible;
            }
        IL_1E:
            if (!false)
            {
                return;
            }
            goto IL_04;
        }

        private void InitializeAllVariable()
        {
            while (true)
            {
                while (true)
                {
                    if (7 != 0)
                    {
                        this.graphicsTextBoxCount = 0;
                        this.gumballTextCount = 0;
                        this.graphicsBorderApplied = false;
                        this.graphicsCount = 0;
                        if (!true)
                        {
                            break;
                        }
                        this.graphicsframeApplied = false;
                        if (4 == 0)
                        {
                            break;
                        }
                        this._ZoomFactor = 1.0;
                        this.jrotate.Angle = 0.0;
                        if (!false)
                        {
                            VisualStateManager.GoToState(this.btnAddgraphics, "Unchecked", true);
                            goto IL_89;
                        }
                        break;
                    }
                IL_9B:
                    VisualStateManager.GoToState(this.btnGraphicsText, "Unchecked", true);
                    if (!false)
                    {
                        VisualStateManager.GoToState(this.btnBorder, "Unchecked", true);
                        VisualStateManager.GoToState(this.btnBackground, "Unchecked", true);
                        if (!false)
                        {
                            return;
                        }
                        break;
                    }
                IL_89:
                    VisualStateManager.GoToState(this.btngraphics, "Unchecked", true);
                    goto IL_9B;
                }
            }
        }

        //[DebuggerNonUserCode, GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
        //public void InitializeComponent()
        //{
        //    // This item is obfuscated and can not be translated.
        //}

        private void InvertEffect()
        {
            try
            {
                if (!false)
                {
                    bool expr_14 = !(this._invert == "0");
                    bool flag;
                    if (!false)
                    {
                        flag = expr_14;
                    }
                    if (!flag)
                    {
                        InvertColorEffect effect = new InvertColorEffect();
                        this.GrdInvert.Effect = effect;
                        this._invert = "1";
                    }
                    else
                    {
                        this._invert = "0";
                        this.GrdInvert.Effect = null;
                    }
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                if (!false)
                {
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                if (2 != 0)
                {
                }
            }
            finally
            {
                do
                {
                    LogEffect objeffectOperation;
                    if (7 != 0)
                    {
                        if (!false)
                        {
                            objeffectOperation = default(LogEffect);
                        }
                        objeffectOperation.effvalue = Convert.ToDouble(this._invert);
                        objeffectOperation.optname = "invert";
                    }
                    this.EffectLogOperation(objeffectOperation);
                }
                while (false);
            }
        }


        protected bool IsGreenScreenPrintingEnabled(int Location, int SemiOrderProfileId)
        {
            if (!true)
            {
                goto IL_93;
            }
            if (!LoginUser.IsSemiOrder.Value)
            {
                goto IL_9E;
            }
            SemiOrderSettings semiOrderSettings = LoginUser.ListSemiOrderSettingsSubStoreWise.Where(delegate (SemiOrderSettings x)
            {
                int? dG_LocationId = x.PS_LocationId;
                int location = Location;
                int expr_5A;
                while (true)
                {
                IL_1B:
                    int arg_34_0 = (dG_LocationId == location) ? 1 : 0;
                    while (true)
                    {
                        while (true)
                        {
                            int arg_54_0;
                            if (arg_34_0 != 0)
                            {
                                if (false)
                                {
                                    goto IL_1B;
                                }
                                arg_54_0 = (arg_34_0 = ((x.PS_SemiOrder_Settings_Pkey == this._semiOrderProfileId) ? 1 : 0));
                            }
                            else
                            {
                                arg_54_0 = (arg_34_0 = 0);
                            }
                        IL_50:
                            if (false)
                            {
                                break;
                            }
                            bool flag = arg_54_0 != 0;
                            if (5 != 0)
                            {
                            }
                            expr_5A = (arg_34_0 = (arg_54_0 = (flag ? 1 : 0)));
                            if (!false)
                            {
                                if (6 != 0)
                                {
                                    return expr_5A != 0;
                                }
                                break;
                            }
                            goto IL_50;
                        }
                    }
                }
                return expr_5A != 0;
            }).FirstOrDefault<SemiOrderSettings>();
            if (8 == 0)
            {
                goto IL_93;
            }
            if (semiOrderSettings == null)
            {
                goto IL_9B;
            }
        IL_79:
            if (!semiOrderSettings.PS_SemiOrder_Environment.Value)
            {
                goto IL_9B;
            }
        IL_93:
            bool result;
            if (6 != 0)
            {
                result = true;
                return result;
            }
            goto IL_9E;
        IL_9B:
            result = false;
            return result;
        IL_9E:
            if (false)
            {
                goto IL_79;
            }
            result = false;
            return result;
        }

        private static bool IsTextAllowed(string text)
        {
            bool arg_29_0;
            bool flag;
            while (true)
            {
                while (!false)
                {
                    Regex expr_2A = new Regex("[^0-9.-]+");
                    Regex regex;
                    if (4 != 0)
                    {
                        regex = expr_2A;
                    }
                    while (true)
                    {
                        bool expr_16 = arg_29_0 = !regex.IsMatch(text);
                        if (-1 == 0)
                        {
                            return arg_29_0;
                        }
                        if (5 != 0)
                        {
                            flag = expr_16;
                        }
                        if (false)
                        {
                            break;
                        }
                        if (2 != 0)
                        {
                            goto Block_3;
                        }
                    }
                }
            }
        Block_3:
            arg_29_0 = flag;
            return arg_29_0;

        }

        private void ItemContainerGenerator_StatusChanged(object sender, EventArgs e)
        {
            bool arg_10_0 = this.lstStrip.ItemContainerGenerator.Status == GeneratorStatus.ContainersGenerated;
            bool arg_1F_0;
            while (true)
            {
                bool arg_50_0;
                arg_1F_0 = (arg_10_0 = (arg_50_0 = !arg_10_0));
                while (!false)
                {
                    if (!false)
                    {
                        bool flag = arg_50_0;
                        arg_1F_0 = (arg_10_0 = (arg_50_0 = flag));
                    }
                    if (!false)
                    {
                        goto Block_3;
                    }
                }
            }
        Block_3:
            if (arg_1F_0)
            {
                goto IL_3B;
            }
        IL_22:
            if (!false)
            {
                base.Dispatcher.BeginInvoke(DispatcherPriority.Input, new Action(this.DelayedAction));
            }
        IL_3B:
            if (2 != 0)
            {
                return;
            }
            goto IL_22;
        }

        private void jangleAltitudeSelector1_AngleChanged()
        {
            if (!this.IsComingOnLoad)
            {
                this.IsImageDirtyState = true;
            }
            this.IsComingOnLoad = false;
            while (true)
            {
                this.IsGraphicsChange = true;
                if (this.elementForContextMenu == null)
                {
                    goto IL_307;
                }
                if (this.IsSelectedMainImage)
                {
                    break;
                }
                if (!false)
                {
                    goto Block_3;
                }
            }
        IL_65:
            RotateTransform rotateTransform = new RotateTransform();
        IL_6C:
            rotateTransform.CenterX = 0.0;
            rotateTransform.CenterY = 0.0;
            rotateTransform.Angle = this.jrotate.Angle;
            this.canbackgroundRotate.RenderTransformOrigin = (this.GrdBrightness.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5));
            this.canbackgroundRotate.RenderTransform = (this.GrdBrightness.RenderTransform = rotateTransform);
            goto IL_301;
        Block_3:
            if (this.elementForContextMenu is TextBox)
            {
                TextBox textBox = (TextBox)this.elementForContextMenu;
                rotateTransform = new RotateTransform();
                rotateTransform.CenterX = 0.0;
                rotateTransform.CenterY = 0.0;
                rotateTransform.Angle = this.jrotate.Angle;
                textBox.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                textBox.RenderTransform = rotateTransform;
            }
            bool flag = !(this.elementForContextMenu is Button);
            if (!true)
            {
                goto IL_340;
            }
            if (!flag)
            {
                Button button = (Button)this.elementForContextMenu;
                TransformGroup transformGroup = new TransformGroup();
                TransformGroup transformGroup2 = this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup;
                if (transformGroup2 != null)
                {
                    if (transformGroup2.Children.Count > 0)
                    {
                        flag = !(transformGroup2.Children[0] is ScaleTransform);
                        if (false)
                        {
                            goto IL_6C;
                        }
                        if (!flag)
                        {
                            transformGroup.Children.Add(transformGroup2.Children[0]);
                        }
                        if (transformGroup2.Children.Count > 1)
                        {
                            if (transformGroup2.Children[1] is ScaleTransform)
                            {
                                transformGroup.Children.Add(transformGroup2.Children[1]);
                            }
                        }
                    }
                }
                RotateTransform rotateTransform2 = new RotateTransform();
                button.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                rotateTransform2.CenterX = 0.0;
                rotateTransform2.CenterY = 0.0;
                rotateTransform2.Angle = this.jrotate.Angle;
                transformGroup.Children.Add(rotateTransform2);
                button.RenderTransform = transformGroup;
                if (false)
                {
                    goto IL_65;
                }
            }
        IL_301:
            return;
        IL_307:
            rotateTransform = new RotateTransform();
            rotateTransform.CenterX = 0.0;
            rotateTransform.CenterY = 0.0;
            rotateTransform.Angle = this.jrotate.Angle;
        IL_340:
            this.canbackgroundRotate.RenderTransformOrigin = (this.GrdBrightness.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5));
            this.canbackgroundRotate.RenderTransform = (this.GrdBrightness.RenderTransform = rotateTransform);
        }

        private void jrotate_MouseWheel(object sender, MouseWheelEventArgs e)
        {
            while (true)
            {
            IL_00:
                bool arg_C5_0;
                if (!false)
                {
                    arg_C5_0 = (this.jrotate.Visibility != Visibility.Visible || this.spRotatepanel.Visibility != Visibility.Visible);
                    goto IL_30;
                }
                goto IL_9E;
            IL_3D:
                while (true)
                {
                IL_3E:
                    bool expr_D7 = arg_C5_0 = this.jrotate.IsMouseOver;
                    if (4 != 0)
                    {
                        bool arg_E1_0 = !expr_D7;
                        while (!arg_E1_0)
                        {
                            this.IsSelectedMainImage = true;
                            bool expr_6D = arg_E1_0 = (e.Delta <= 0);
                            if (!false)
                            {
                                bool flag = expr_6D;
                                if (4 == 0)
                                {
                                    goto IL_00;
                                }
                                if (flag)
                                {
                                    goto IL_90;
                                }
                                this.RotateInButton_Click(sender, new RoutedEventArgs());
                                if (!false)
                                {
                                    goto Block_7;
                                }
                                goto IL_3E;
                            }
                        }
                        return;
                    }
                    goto IL_30;
                }
            IL_90:
                this.AntiRotateButton_Click(sender, new RoutedEventArgs());
            Block_7:
                goto IL_9F;
            IL_30:
                if (!arg_C5_0)
                {
                    goto IL_3D;
                }
                break;
            IL_9F:
                if (4 != 0)
                {
                    break;
                }
                goto IL_3D;
            IL_9E:
                goto IL_9F;
            }
        }

        private void left()
        {
            if (4 != 0)
            {
                this.x -= 2.0;
                if (!false)
                {
                    Canvas.SetLeft(this.dragCanvas, this.x);
                }
            }
        }
        private void lstFrame_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }
        public void LoadBackground()
        {
            string str = LoginUser.DigiFolderBackGroundPath + "Thumbnails\\";
            this.lstBackground.Items.Clear();
            while (-1 == 0)
            {
            }
            BackgroundBusiness backgroundBusiness;
            if (6 != 0)
            {
                backgroundBusiness = new BackgroundBusiness();
            }
            if (5 != 0)
            {
                foreach (BackGroundInfo current in backgroundBusiness.GetBackgoundDetailsALL())
                {
                    LstMyItems lstMyItems;
                    if (5 != 0)
                    {
                        bool? dG_Background_IsActive = current.DG_Background_IsActive;
                        while (true)
                        {
                            bool arg_8D_0;
                            if (dG_Background_IsActive.HasValue)
                            {
                                dG_Background_IsActive = current.DG_Background_IsActive;
                                arg_8D_0 = !dG_Background_IsActive.Value;
                            }
                            else
                            {
                                arg_8D_0 = true;
                            }
                            if (arg_8D_0)
                            {
                                goto IL_125;
                            }
                            while (true)
                            {
                                Uri uri = new Uri(str + current.DG_BackGround_Image_Name);
                                lstMyItems = new LstMyItems();
                                if (!File.Exists(uri.ToString()))
                                {
                                    goto IL_DE;
                                }
                                BitmapImage bmpImage = new BitmapImage(uri);
                                lstMyItems.BmpImage = bmpImage;
                                if (5 == 0)
                                {
                                    break;
                                }
                                if (!false)
                                {
                                    goto IL_DE;
                                }
                            }
                        }
                    IL_DE:
                        lstMyItems.Name = current.DG_BackGround_Image_Name;
                        goto IL_EC;
                    }
                    goto IL_FA;
                IL_125:
                    continue;
                IL_FA:
                    if (-1 != 0)
                    {
                        lstMyItems.FilePath = str + current.DG_BackGround_Image_Name;
                        this.lstBackground.Items.Add(lstMyItems);
                        continue;
                    }
                IL_EC:
                    lstMyItems.Photoname1 = current.DG_BackGround_Image_Display_Name;
                    goto IL_FA;
                }
            }
        }

        private void LoadBackgroundInGrid(BitmapImage objCurrent)
        {
            this.canbackgroundParent.Visibility = Visibility.Visible;
            this.canbackground.Visibility = Visibility.Visible;
            this.imageundoGrid.Visibility = Visibility.Visible;
            this.imageundoGrid.Background = new ImageBrush
            {
                ImageSource = objCurrent
            };
            VisualStateManager.GoToState(this.btnBackground, "Checked", true);
            VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
            if (6 != 0)
            {
                this.graphicsBorderApplied = true;
                double num;
                while (true)
                {
                    bool flag = this.GrdsubGreenScreen.Visibility != Visibility.Visible;

                    int expr_185;
                    int expr_188;
                    while (true)
                    {
                    IL_9A:
                        if (!flag)
                        {
                            if (this.canbackgroundold.Background != null)
                            {
                                this.canbackgroundold.Background.Opacity = 0.0;
                            }
                        }
                        else if (this.canbackgroundold.Background != null)
                        {
                            this.canbackgroundold.Background.Opacity = 1.0;
                        }
                        int arg_110_0 = this.frm.Children.Count;
                        int arg_110_1 = 0;
                        while (true)
                        {
                            bool arg_113_0 = arg_110_0 == arg_110_1;
                            bool expr_13F;
                            do
                            {
                                flag = !arg_113_0;
                                if (flag)
                                {
                                    goto IL_254;
                                }
                                if (false)
                                {
                                    goto IL_9A;
                                }
                                flag = (objCurrent.Height <= objCurrent.Width);
                                expr_13F = (arg_113_0 = flag);
                            }
                            while (false);
                            if (!expr_13F)
                            {
                                num = objCurrent.Width / objCurrent.Height;
                                if (4 == 0)
                                {
                                    goto IL_1F9;
                                }
                            }
                            else
                            {
                                num = objCurrent.Height / objCurrent.Width;
                            }
                            expr_185 = (arg_110_0 = ((this.forWdht.Height > this.forWdht.Width) ? 1 : 0));
                            expr_188 = (arg_110_1 = 0);
                            if (expr_188 == 0)
                            {
                                goto Block_10;
                            }
                        }
                    }
                Block_10:
                    if (expr_185 == expr_188)
                    {
                        break;
                    }
                    if (2 != 0)
                    {
                        goto Block_12;
                    }
                }
                while (true)
                {
                    this.forWdht.Height = this.forWdht.Width * num;
                    if (6 != 0)
                    {
                        goto IL_1D5;
                    }
                }
            Block_12:
                this.forWdht.Width = this.forWdht.Height * num;
            IL_1D5:
                this.forWdht.InvalidateArrange();
                this.forWdht.InvalidateMeasure();
                this.forWdht.InvalidateVisual();
            IL_1F9:
                this.imageundoGrid.Height = this.forWdht.Height;
                this.imageundoGrid.Width = this.forWdht.Width;
                this.imageundoGrid.InvalidateArrange();
                this.imageundoGrid.InvalidateMeasure();
                this.imageundoGrid.InvalidateVisual();
                this.Zomout(true);
            }
        IL_254:
            objCurrent.Freeze();
        }

        private void LoadFeatures()
        {
            if (1 != 0)
            {
                if (3 == 0)
                {
                    return;
                }
                this.LoadFrames();
                if (0 == 0)
                {
                }
                this.LoadGraphics();
            }
            if (0 == 0)
            {
                this.LoadBackground();
            }
        }

        public void LoadFrames()
        {
            string str;
            do
            {
                str = LoginUser.DigiFolderFramePath + "Thumbnails\\";
            }
            while (-1 == 0);
            this.Frames.Clear();
            BorderBusiness borderBusiness = new BorderBusiness();
            IEnumerable<BorderInfo> enumerable = from t in borderBusiness.GetBorderDetails()
                                                 where t.DG_IsActive
                                                 select t;
            IEnumerator<BorderInfo> enumerator = enumerable.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    BorderInfo current = enumerator.Current;
                    LstMyItems lstMyItems = new LstMyItems();
                    lstMyItems.FilePath = str + current.DG_Border;
                    lstMyItems.Name = current.DG_Border;
                    lstMyItems.Photoname1 = current.DG_Border;
                    this.Frames.Add(lstMyItems);
                }
            }
            finally
            {
                bool arg_CF_0 = enumerator == null;
                bool expr_D1;
                do
                {
                    bool flag = arg_CF_0;
                    expr_D1 = (arg_CF_0 = flag);
                }
                while (false);
                if (!expr_D1)
                {
                    if (!false)
                    {
                        enumerator.Dispose();
                    }
                }
            }
        }

        private void LoadFromDB()
        {
            try
            {
                VisualStateManager.GoToState(this.btnAddgraphics, "Unchecked", true);
                this.graphicsTextBoxCount = 0;
                this.gumballTextCount = 0;
                this.graphicsBorderApplied = false;
                this.graphicsCount = 0;
                this.graphicsframeApplied = false;
                VisualStateManager.GoToState(this.btngraphics, "Unchecked", true);
                bool expr_DF;
                while (true)
                {
                    VisualStateManager.GoToState(this.btnGraphicsText, "Unchecked", true);
                    VisualStateManager.GoToState(this.btnBorder, "Unchecked", true);
                    VisualStateManager.GoToState(this.btnBackground, "Unchecked", true);
                    bool flag = this.GraphicEffect == null || this.GraphicEffect.Equals("test", StringComparison.CurrentCultureIgnoreCase);
                    bool arg_BA_0 = flag;
                    while (!arg_BA_0)
                    {
                        this.ReloadAllGraphicsEffect();
                        this.LoadXaml(this.GraphicEffect);
                        expr_DF = (arg_BA_0 = this.GraphicEffect.Contains("border"));
                        if (5 != 0)
                        {
                            goto Block_5;
                        }
                    }
                    PhotoBusiness photoBusiness = new PhotoBusiness();
                    if (photoBusiness.GetModeratePhotos((long)this.PhotoId))
                    {
                        goto IL_1AA;
                    }
                    if (false)
                    {
                        goto IL_13D;
                    }
                    if (!false)
                    {
                        goto Block_15;
                    }
                }
            Block_5:
                if (!expr_DF)
                {
                    this.borderName = null;
                }
                if (this.dragCanvas.Children.Count > 4)
                {
                    goto IL_16B;
                }
                double arg_167_0;
                double arg_128_0;
                double expr_106 = arg_128_0 = (arg_167_0 = this._ZoomFactor);
                if (false)
                {
                    goto IL_15B;
                }
                if (expr_106 < 0.5)
                {
                    goto IL_12A;
                }
                arg_128_0 = this._ZoomFactor;
            IL_11F:
                if (arg_128_0 != 1.0)
                {
                    goto IL_16B;
                }
            IL_12A:
                if (this.frm.Children.Count >= 1)
                {
                    goto IL_16B;
                }
            IL_13D:
                if (this.canbackground.Children.Count > 1)
                {
                    goto IL_16B;
                }
                arg_167_0 = (arg_128_0 = this.jrotate.Angle);
            IL_15B:
                bool arg_16D_0;
                if (4 != 0)
                {
                    arg_16D_0 = (arg_167_0 == 0.0);
                    goto IL_16C;
                }
                goto IL_11F;
            IL_16B:
                arg_16D_0 = false;
            IL_16C:
                if (!arg_16D_0)
                {
                    //  this.DisableButtonForLayering(); comment by jayendra 
                }
            IL_178:
                goto IL_1DD;
            Block_15:
                if (5 == 0)
                {
                    goto IL_178;
                }
                this.EnableButtonForLayering();
            IL_1AA:
                this.ReloadAllGraphicsEffect();
                this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
            IL_1DD:
                this.btnAddgraphics.UpdateLayout();
                this.btnAddgraphics.InvalidateArrange();
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);

            }
            finally
            {
                while (false)
                {
                }
            }
        }

        public void LoadGraphics()
        {
            string str;
            if (2 != 0)
            {
                str = LoginUser.DigiFolderGraphicsPath;// +"\\";
                if (false)
                {
                    return;
                }
                this.lstGraphics.Items.Clear();
                if (!false)
                {
                }
            }
            GraphicsBusiness graphicsBusiness = new GraphicsBusiness();
            IEnumerator<GraphicsInfo> enumerator = graphicsBusiness.GetGraphicsDetails().GetEnumerator();
            //IEnumerator<GraphicsInfo> enumerator = graphicsBusiness.GetGraphicsDetails().Where(delegate(GraphicsInfo t)
            //{
            //    bool? dG_Graphics_IsActive = t.DG_Graphics_IsActive;
            //    int arg_42_0;
            //    if (!dG_Graphics_IsActive.GetValueOrDefault())
            //    {
            //        arg_42_0 = 0;
            //        goto IL_16;
            //    }
            //    arg_42_0 = (dG_Graphics_IsActive.HasValue ? 1 : 0);
            //IL_10:
            //    if (!false)
            //    {
            //    }
            //IL_16:
            //    bool expr_45;
            //    do
            //    {
            //        bool flag2 = arg_42_0 != 0;
            //        if (!false)
            //        {
            //        }
            //        expr_45 = ((arg_42_0 = (flag2 ? 1 : 0)) != 0);
            //    }
            //    while (8 == 0);
            //    if (!false)
            //    {
            //        return expr_45;
            //    }
            //    goto IL_10;
            //}).GetEnumerator();
            try
            {
                while (true)
                {
                    bool arg_11A_0;
                    bool expr_10E = arg_11A_0 = enumerator.MoveNext();
                    if (2 != 0)
                    {
                        bool flag = expr_10E;
                        arg_11A_0 = flag;
                    }
                    if (!arg_11A_0)
                    {
                        break;
                    }
                    GraphicsInfo current = enumerator.Current;
                    Uri uri = new Uri(str + current.DG_Graphics_Name);
                    LstMyItems lstMyItems = new LstMyItems();
                    bool arg_B2_0;
                    bool expr_A9 = arg_B2_0 = !File.Exists(uri.ToString());
                    if (5 != 0)
                    {
                        bool flag = expr_A9;
                        arg_B2_0 = flag;
                    }
                    if (!arg_B2_0)
                    {
                        BitmapImage bmpImage = new BitmapImage(uri);
                        lstMyItems.BmpImage = bmpImage;
                    }
                    lstMyItems.Name = current.DG_Graphics_Name;
                    lstMyItems.Photoname1 = current.DG_Graphics_Displayname;
                    lstMyItems.FilePath = str + current.DG_Graphics_Name;
                    this.lstGraphics.Items.Add(lstMyItems);
                }
            }
            finally
            {
                bool flag = enumerator == null;
                if (!false)
                {
                    if (!flag)
                    {
                        enumerator.Dispose();
                    }
                }
            }
        }

        private void loadImagestoList()
        {
            this.lstFrame.Items.Clear();
            this.ImgLoader();
        }

        private void LoadNextImages()
        {
            try
            {
                bool flag = !(RobotImageLoader.SearchCriteria == "TimeWithQrcode");
                int arg_130_0;
                if (!flag)
                {
                    bool arg_182_0;
                    if (RobotImageLoader.robotImages != null)
                    {
                        bool expr_36 = (arg_130_0 = ((RobotImageLoader.robotImages.Count > 0) ? 1 : 0)) != 0;
                        if (3 == 0)
                        {
                            goto IL_130;
                        }
                        arg_182_0 = !expr_36;
                    }
                    else
                    {
                        if (3 == 0)
                        {
                            goto IL_14E;
                        }
                        arg_182_0 = true;
                    }
                    if (!false)
                    {
                        flag = arg_182_0;
                    }
                    if (flag)
                    {
                        goto IL_AF;
                    }
                    this.searchDetails.StartIndex = (long)RobotImageLoader.robotImages.Max((LstMyItems o) => o.PhotoId);
                    this.searchDetails.NewRecord = 0;
                }
                else
                {
                    flag = (!(RobotImageLoader.SearchCriteria == "PhotoId") || !(RobotImageLoader.RFID != "0"));
                    if (5 == 0)
                    {
                        goto IL_AD;
                    }
                    if (flag)
                    {
                        goto IL_14E;
                    }
                    bool arg_102_0;
                    if (RobotImageLoader.robotImages != null)
                    {
                        if (false)
                        {
                            goto IL_13C;
                        }
                        arg_102_0 = (RobotImageLoader.robotImages.Count <= 0);
                    }
                    else
                    {
                        arg_102_0 = true;
                    }
                    if (!arg_102_0)
                    {
                        arg_130_0 = RobotImageLoader.robotImages.Max((LstMyItems o) => o.PhotoId);
                        goto IL_130;
                    }
                    goto IL_14A;
                }
            IL_A0:
                this.MovePage(this.searchDetails);
            IL_AD:
            IL_AF:
                goto IL_156;
            IL_130:
                RobotImageLoader.StartIndexRFID = (long)arg_130_0;
                RobotImageLoader.NewRecord = 0;
            IL_13C:
                this.MovePagePhotoId(this.searchDetails);
            IL_149:
            IL_14A:
                goto IL_156;
            IL_14E:
                this.PrevRec();
            IL_156:
                if (false)
                {
                    goto IL_149;
                }
                if (false)
                {
                    goto IL_A0;
                }
            }
            finally
            {
                MemoryManagement.FlushMemory();
                while (2 == 0)
                {
                }
            }
        }

        private void LoadNextImageSet(bool IsMoreImages1)
        {
            this.IsImageDirtyState = false;
            this.LoadNextImages();
            bool arg_B7_0;
            bool expr_1D = arg_B7_0 = this.IsMoreImages;
            if (!false)
            {
                arg_B7_0 = !expr_1D;
            }
            if (!arg_B7_0)
            {
                while (true)
                {
                    while (true)
                    {
                        this.BindStrip();
                        int arg_60_0;
                        int expr_4B = arg_60_0 = this.lstStrip.Items.Count;
                        if (!false)
                        {
                            bool flag = expr_4B <= this.NoOfDisplayItem;
                            arg_60_0 = (flag ? 1 : 0);
                        }
                        if (arg_60_0 != 0)
                        {
                            goto IL_85;
                        }
                        this.lstStrip.ScrollIntoView(this.lstStrip.Items[0]);
                        if (5 != 0)
                        {
                            if (!false)
                            {
                                goto IL_85;
                            }
                        }
                    }
                }
            IL_85:
                if (7 == 0)
                {
                    return;
                }
            }
            this.SetFocus();
        }

        public void LoadPhotoAlbum()
        {
            while (true)
            {
                if (!false)
                {
                    this.AddDefaultItems();
                    goto IL_11;
                }
                goto IL_90;
            IL_2A:
                if (3 != 0)
                {
                    this.txbStoreName.Text = LoginUser.StoreName;
                    if (5 != 0)
                    {
                        this.translateTransform = new TranslateTransform();
                        this.zoomTransform = new ScaleTransform();
                        this.transformGroup = new TransformGroup();
                        this.rotateTransform = new RotateTransform();
                        this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = null);
                        goto IL_90;
                    }
                    continue;
                }
            IL_11:
                if (!false)
                {
                    this.txbUserName.Text = LoginUser.UserName;
                }
                goto IL_2A;
            IL_90:
                if (5 != 0)
                {
                    break;
                }
                goto IL_2A;
            }
        }

        private void LoadPrevImages()
        {
            try
            {
                bool flag = !(RobotImageLoader.SearchCriteria == "TimeWithQrcode");
                int arg_130_0;
                if (!flag)
                {
                    bool arg_182_0;
                    if (RobotImageLoader.robotImages != null)
                    {
                        bool expr_36 = (arg_130_0 = ((RobotImageLoader.robotImages.Count > 0) ? 1 : 0)) != 0;
                        if (3 == 0)
                        {
                            goto IL_130;
                        }
                        arg_182_0 = !expr_36;
                    }
                    else
                    {
                        if (3 == 0)
                        {
                            goto IL_14E;
                        }
                        arg_182_0 = true;
                    }
                    if (!false)
                    {
                        flag = arg_182_0;
                    }
                    if (flag)
                    {
                        goto IL_AF;
                    }
                    this.searchDetails.StartIndex = (long)RobotImageLoader.robotImages.Min((LstMyItems o) => o.PhotoId);
                    this.searchDetails.NewRecord = 1;
                }
                else
                {
                    flag = (!(RobotImageLoader.SearchCriteria == "PhotoId") || !(RobotImageLoader.RFID != "0"));
                    if (5 == 0)
                    {
                        goto IL_AD;
                    }
                    if (flag)
                    {
                        goto IL_14E;
                    }
                    bool arg_102_0;
                    if (RobotImageLoader.robotImages != null)
                    {
                        if (false)
                        {
                            goto IL_13C;
                        }
                        arg_102_0 = (RobotImageLoader.robotImages.Count <= 0);
                    }
                    else
                    {
                        arg_102_0 = true;
                    }
                    if (!arg_102_0)
                    {
                        arg_130_0 = RobotImageLoader.robotImages.Min((LstMyItems o) => o.PhotoId);
                        goto IL_130;
                    }
                    goto IL_14A;
                }
            IL_A0:
                this.MovePage(this.searchDetails);
            IL_AD:
            IL_AF:
                goto IL_156;
            IL_130:
                RobotImageLoader.StartIndexRFID = (long)arg_130_0;
                RobotImageLoader.NewRecord = 1;
            IL_13C:
                this.MovePagePhotoId(this.searchDetails);
            IL_149:
            IL_14A:
                goto IL_156;
            IL_14E:
                this.NextRec();
            IL_156:
                if (false)
                {
                    goto IL_149;
                }
                if (false)
                {
                    goto IL_A0;
                }
            }
            finally
            {
                MemoryManagement.FlushMemory();
                while (2 == 0)
                {
                }
            }
        }

        public void LoadValues(bool redeye, bool crop)
        {
            PhotoBusiness photoBusiness = new PhotoBusiness();
            this.attributeWidth = (this.attributeHeight = 10.0);
            this._centerX = "";
            this._centerY = "";
            this.FlipMode = 0;
            this.FlipModeY = 0;
            this.txtMainImage.Text = this.PhotoName;
            this.MyInkCanvas.SnapsToDevicePixels = true;
            this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.mainImage.SnapsToDevicePixels = true;
            RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
            this.forWdht.RenderTransform = new RotateTransform();
            VisualStateManager.GoToState(this.btnCrop, "Unchecked", true);
            VisualStateManager.GoToState(this.RedEye, "Unchecked", true);
            try
            {
                int arg_23A_0 = redeye ? 1 : 0;
                int arg_23A_1;
                int expr_ED = arg_23A_1 = 0;
                BitmapImage bitmapImage;
                MemoryStream memoryStream;
                bool arg_244_0;
                if (expr_ED == 0)
                {
                    if ((redeye ? 1 : 0) != expr_ED)
                    {
                        VisualStateManager.GoToState(this.RedEye, "Checked", true);
                    }
                    if (crop)
                    {
                        VisualStateManager.GoToState(this.btnCrop, "Checked", true);
                    }
                    IEnumerable<string> enumerable = RobotImageLoader.LstUnlocknames.Where(delegate (string x)
                    {
                        bool result;
                        do
                        {
                            if (true && !false)
                            {
                                result = x.Equals(this.PhotoId.ToString());
                            }
                            while (false)
                            {
                            }
                        }
                        while (8 == 0);
                        return result;
                    });
                    if (redeye || crop)
                    {
                        FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename));
                        try
                        {
                            bitmapImage = new BitmapImage();
                            memoryStream = new MemoryStream();
                            fileStream.CopyTo(memoryStream);
                            if (!false)
                            {
                                memoryStream.Seek(0L, SeekOrigin.Begin);
                                fileStream.Close();
                                bitmapImage.BeginInit();
                                bitmapImage.StreamSource = memoryStream;
                                bitmapImage.EndInit();
                                this.mainImageundo.Source = (this.mainImage.Source = bitmapImage);
                                this.widthimg.Source = bitmapImage;
                                this.imgRotateCrop.Source = bitmapImage;
                                bitmapImage.Freeze();
                            }
                        }
                        finally
                        {
                            bool arg_203_0 = fileStream == null;
                            bool expr_205;
                            do
                            {
                                bool flag = arg_203_0;
                                expr_205 = (arg_203_0 = flag);
                            }
                            while (8 == 0);
                            if (!expr_205)
                            {
                                ((IDisposable)fileStream).Dispose();
                            }
                        }
                        goto IL_308;
                    }
                    int arg_237_0;
                    bool expr_223 = (arg_237_0 = (photoBusiness.GetModeratePhotos((long)this.PhotoId) ? 1 : 0)) != 0;
                    if (!false)
                    {
                        if (!expr_223)
                        {
                            arg_244_0 = false;
                            goto IL_243;
                        }
                        if (enumerable == null)
                        {
                            arg_244_0 = true;
                            goto IL_23F;
                        }
                        arg_237_0 = enumerable.Count<string>();
                    }
                    arg_23A_0 = ((arg_237_0 > 0) ? 1 : 0);
                    arg_23A_1 = 0;
                }
                arg_244_0 = (arg_23A_0 == arg_23A_1);
            IL_23F:
            IL_243:
                if (!arg_244_0)
                {
                    using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, this.tempfilename)))
                    {
                        if (!false)
                        {
                            bitmapImage = new BitmapImage();
                            memoryStream = new MemoryStream();
                            fileStream.CopyTo(memoryStream);
                            memoryStream.Seek(0L, SeekOrigin.Begin);
                        }
                        fileStream.Close();
                        bitmapImage.BeginInit();
                        bitmapImage.StreamSource = memoryStream;
                        bitmapImage.EndInit();
                        this.mainImageundo.Source = (this.mainImage.Source = bitmapImage);
                        this.widthimg.Source = bitmapImage;
                        this.imgRotateCrop.Source = bitmapImage;
                        bitmapImage.Freeze();
                    }
                }
            IL_308:
                this.LoadPhotoAlbum();
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = new MatrixTransform());
                if (!this.IsModerate)
                {
                    this.LoadXml(this.ImageEffect);
                }
                this.dragCanvas.AllowDragOutOfView = true;
                this.GrdEffects.Visibility = Visibility.Hidden;
                this.Opacitymsk.Margin = new Thickness(0.0, 0.0, 0.0, 0.0);
                this.forWdht.HorizontalAlignment = HorizontalAlignment.Center;
                this.forWdht.VerticalAlignment = VerticalAlignment.Center;
                if (!this.IsModerate)
                {
                    this.LoadFromDB();
                }
                this.dragCanvas.AllowDragging = false;
                this.dragCanvas.IsEnabled = false;
                this.IsEffectChange = false;
                this.IsGraphicsChange = false;
                this.jrotate.Visibility = Visibility.Hidden;
                this.MyInkCanvasParent.Effect = null;
                if (this.MyInkCanvas.Children.Count > 1)
                {
                    this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                }
                if (this.MyInkCanvas.Strokes.Count > 0)
                {
                    this.MyInkCanvas.Strokes.Clear();
                }
                this.isChromaApplied = this.isGreenImage;
                if (this.isChromaApplied)
                {
                    this.ApplyGreenEffectGrid();
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
        }

        // DigiPhoto.MainWindow
        private void LoadXaml(string inputXml)
        {
            if (!string.IsNullOrEmpty(inputXml))
            {
                XmlDocument xmlDocument = new XmlDocument();
                xmlDocument.LoadXml(inputXml);
                XmlNodeList elementsByTagName = xmlDocument.GetElementsByTagName("Gumball");
                foreach (object current in xmlDocument.ChildNodes[0].Attributes)
                {
                    string text = ((XmlAttribute)current).Name.ToLower();
                    if (text != null)
                    {
                        if (text == "producttype")
                        {
                            if (((XmlAttribute)current).Value.ToString() != string.Empty)
                            {
                                this.specproductType = ((XmlAttribute)current).Value;
                                if (this.specproductType.Equals("1"))
                                {
                                    this.BGfolderPathspecproductType = "6x8";
                                }
                                else if (this.specproductType.Equals("2"))
                                {
                                    this.BGfolderPathspecproductType = "8x10";
                                }
                                else if (this.specproductType.Equals("30"))
                                {
                                    this.BGfolderPathspecproductType = "4x6";
                                }
                                else
                                {
                                    this.BGfolderPathspecproductType = "8x10";
                                }
                            }
                        }
                    }
                }
                int num = 0;
                this.actualHgt = 0.0;
                this.actualWdth = 0.0;
                double num2 = 0.0;
                double value = 0.0;
                this.transformGroup = new TransformGroup();
                this.rotateTransform = new RotateTransform();
                Dictionary<string, int> obj = null;
                try
                {
                    if(xmlDocument.ChildNodes[0].Attributes["bg"] != null)
                    {
                        this.BackgroundDBValue = xmlDocument.ChildNodes[0].Attributes["bg"].Value.ToLower();
                    }
                    string value2 = "";
                    if (xmlDocument.ChildNodes[0].Attributes["border"] != null)
                    {
                        xmlDocument.ChildNodes[0].Attributes["border"].Value.ToLower();
                    }
                       
                    foreach (object current in xmlDocument.ChildNodes[0].Attributes)
                    {
                        string text = ((XmlAttribute)current).Name.ToLower();
                        if (text != null)
                        {
                            if (obj == null)
                            {
                                obj = new Dictionary<string, int>(9)
                        {
                            {
                                "border",
                                0
                            },
                            {
                                "bg",
                                1
                            },
                            {
                                "canvasleft",
                                2
                            },
                            {
                                "canvastop",
                                3
                            },
                            {
                                "rotatetransform",
                                4
                            },
                            {
                                "scalecentrex",
                                5
                            },
                            {
                                "scalecentrey",
                                6
                            },
                            {
                                "zoomfactor",
                                7
                            },
                            {
                                "frmzindex",
                                8
                            }
                        };
                            }
                            int num3;
                            if (obj.TryGetValue(text, out num3))
                            {
                                switch (num3)
                                {
                                    case 0:
                                        if (((XmlAttribute)current).Value.ToString() != string.Empty)
                                        {
                                            if (!string.IsNullOrEmpty(this.BackgroundDBValue))
                                            {
                                                BitmapImage bitmapImage = new BitmapImage(new Uri(LoginUser.DigiFolderBackGroundPath + "\\8x10\\" + this.BackgroundDBValue));
                                                if (this.canbackgroundold.Background != null)
                                                {
                                                    this.canbackgroundold.Background.Opacity = 0.0;
                                                }
                                                this.canbackground.Background = new ImageBrush
                                                {
                                                    ImageSource = bitmapImage
                                                };
                                                this.LoadBackgroundInGrid(bitmapImage);
                                                bitmapImage.Freeze();
                                            }
                                            this.ChromaBorderPath = LoginUser.DigiFolderFramePath + "\\" + ((XmlAttribute)current).Value.ToString();
                                            this.OriginalBorder = LoginUser.DigiFolderFramePath + "\\" + ((XmlAttribute)current).Value.ToString();
                                            BitmapImage bitmapImage2 = new BitmapImage(new Uri(LoginUser.DigiFolderFramePath + "\\" + ((XmlAttribute)current).Value.ToString()));
                                            this.selectedborder = System.IO.Path.GetFileName(bitmapImage2.ToString());
                                            OpaqueClickableImage opaqueClickableImage = new OpaqueClickableImage();

                                            opaqueClickableImage.Uid = "frame";
                                            opaqueClickableImage.Source = bitmapImage2;
                                            opaqueClickableImage.IsHitTestVisible = false;
                                            opaqueClickableImage.Stretch = Stretch.Fill;
                                            opaqueClickableImage.Loaded += new RoutedEventHandler(this.objCurrent_Loaded);
                                            opaqueClickableImage.Opacity = 1.0;
                                            this.borderName = ((XmlAttribute)current).Value.ToString();
                                            double num4;
                                            if (this.specproductType.Equals("1"))
                                            {
                                                num4 = 0.75;
                                                this.CmbProductType.SelectedIndex = 0;
                                            }
                                            else if (this.specproductType.Equals("2"))
                                            {
                                                num4 = 0.8;
                                                this.CmbProductType.SelectedIndex = 1;
                                                if (false)
                                                {
                                                    break;
                                                }
                                            }
                                            else if (this.specproductType.Equals("30"))
                                            {
                                                num4 = 0.67;
                                                this.CmbProductType.SelectedIndex = 2;
                                            }
                                            else if (bitmapImage2.Height > bitmapImage2.Width)
                                            {
                                                num4 = bitmapImage2.Width / bitmapImage2.Height;
                                            }
                                            else
                                            {
                                                num4 = bitmapImage2.Height / bitmapImage2.Width;
                                            }
                                            if (this.forWdht.Height > this.forWdht.Width)
                                            {
                                                this.forWdht.Width = this.forWdht.Height * num4;
                                            }
                                            else
                                            {
                                                this.forWdht.Height = this.forWdht.Width * num4;
                                            }
                                            this.frm.Width = this.forWdht.Width;
                                            this.frm.Height = this.forWdht.Height;
                                            this.forWdht.InvalidateArrange();
                                            this.forWdht.InvalidateMeasure();
                                            this.forWdht.InvalidateVisual();
                                            this.frm.Children.Add(opaqueClickableImage);
                                            this.graphicsframeApplied = true;
                                            VisualStateManager.GoToState(this.btnBorder, "Checked", true);
                                            VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                                            VisualStateManager.GoToElementState(this.btnAddgraphics, "Checked", true);
                                            bitmapImage2.Freeze();
                                        }
                                        else
                                        {
                                            this.ChromaBorderPath = string.Empty;
                                            this.OriginalBorder = string.Empty;
                                        }
                                        continue;
                                    case 1:
                                        if (!string.IsNullOrEmpty(value2))
                                        {
                                            continue;
                                        }
                                        if (((XmlAttribute)current).Value.ToString() != string.Empty)
                                        {
                                            BitmapImage bitmapImage3 = new BitmapImage(new Uri(LoginUser.DigiFolderBackGroundPath + "\\8x10\\" + ((XmlAttribute)current).Value.ToString()));
                                            if (this.canbackgroundold.Background != null)
                                            {
                                                this.canbackgroundold.Background.Opacity = 0.0;
                                            }
                                            this.canbackground.Background = new ImageBrush
                                            {
                                                ImageSource = bitmapImage3
                                            };
                                            this.LoadBackgroundInGrid(bitmapImage3);
                                            bitmapImage3.Freeze();
                                        }
                                        continue;
                                    case 2:
                                        Canvas.SetLeft(this.Opacitymsk, Convert.ToDouble(((XmlAttribute)current).Value));
                                        Canvas.SetLeft(this.canbackgroundParent, Convert.ToDouble(((XmlAttribute)current).Value));
                                        this.ChromaGridLeft = Convert.ToDouble(((XmlAttribute)current).Value);
                                        continue;
                                    case 3:
                                        Canvas.SetTop(this.Opacitymsk, Convert.ToDouble(((XmlAttribute)current).Value));
                                        Canvas.SetTop(this.canbackgroundParent, Convert.ToDouble(((XmlAttribute)current).Value));
                                        this.ChromaGridTop = Convert.ToDouble(((XmlAttribute)current).Value);
                                        continue;
                                    case 4:
                                        {
                                            RotateTransform rotateTransform = new RotateTransform();
                                            rotateTransform.CenterX = 0.0;
                                            rotateTransform.CenterY = 0.0;
                                            rotateTransform.Angle = Convert.ToDouble(((XmlAttribute)current).Value);
                                            this.canbackground.RenderTransformOrigin = (this.GrdBrightness.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5));
                                            if (rotateTransform.Angle != -1.0 && rotateTransform.Angle != 0.0)
                                            {
                                                this.canbackground.RenderTransform = (this.GrdBrightness.RenderTransform = rotateTransform);
                                                this.jrotate.Angle = rotateTransform.Angle;
                                                VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                                            }
                                            continue;
                                        }
                                    case 5:
                                        break;
                                    case 6:
                                        this._centerY = ((XmlAttribute)current).Value.ToString();
                                        this.ChromaCenterY = Convert.ToDouble(this._centerY);
                                        continue;
                                    case 7:
                                        this._ZoomFactor = Convert.ToDouble(((XmlAttribute)current).Value.ToString());
                                        this.ChromaZoomFactor = this._ZoomFactor;
                                        continue;
                                    case 8:
                                        Panel.SetZIndex(this.frm, Convert.ToInt32(((XmlAttribute)current).Value.ToString()));
                                        continue;
                                    default:
                                        continue;
                                }
                                this._centerX = ((XmlAttribute)current).Value.ToString();
                                this.ChromaCenterX = Convert.ToDouble(this._centerX);
                            }
                        }
                    }
                    if (this.frm.Children.Count == 0 && (ImageBrush)this.imageundoGrid.Background != null && !this.isGreenImage)
                    {
                        double height = ((ImageBrush)this.imageundoGrid.Background).ImageSource.Height;
                        double width = ((ImageBrush)this.imageundoGrid.Background).ImageSource.Width;
                        double num4;
                        if (height > width)
                        {
                            num4 = width / height;
                        }
                        else
                        {
                            num4 = height / width;
                        }
                        if (this.forWdht.Height > this.forWdht.Width)
                        {
                            this.forWdht.Width = this.forWdht.Height * num4;
                        }
                        else
                        {
                            this.forWdht.Height = this.forWdht.Width * num4;
                        }
                        this.forWdht.InvalidateArrange();
                        this.forWdht.InvalidateMeasure();
                        this.forWdht.InvalidateVisual();
                        this.Zomout(true);
                    }
                    if (this._centerX != "-1")
                    {
                        ScaleTransform scaleTransform = new ScaleTransform();
                        scaleTransform.CenterX = Convert.ToDouble(this._centerX);
                        scaleTransform.CenterY = Convert.ToDouble(this._centerY);
                        if (this._ZoomFactor != -1.0)
                        {
                            scaleTransform.ScaleX = this._ZoomFactor;
                            scaleTransform.ScaleY = this._ZoomFactor;
                            if (this._ZoomFactor != 1.0)
                            {
                                VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                            }
                            this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
                        }
                        if (this.FlipMode != 0 || this.FlipModeY != 0)
                        {
                            scaleTransform.ScaleX = scaleTransform.ScaleX;
                        }
                        this.zoomTransform = scaleTransform;
                        this.transformGroup.Children.Add(scaleTransform);
                    }
                    if (this._ZoomFactor == 1.0)
                    {
                        this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
                    }
                    if (num2 != 0.0)
                    {
                        TranslateTransform translateTransform = new TranslateTransform();
                        translateTransform.X = Convert.ToDouble(num2);
                        translateTransform.Y = Convert.ToDouble(value);
                        this.translateTransform = translateTransform;
                        this.transformGroup.Children.Add(translateTransform);
                    }
                    if (this.GrdGreenScreenDefault3.RenderTransform == null)
                    {
                        this.MyInkCanvas.RenderTransform = null;
                        this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                    }
                    this.RemoveGumball();
                    if (this.IsGumBall.Equals(true))
                    {
                        this.ShowhidePlayerScore(Visibility.Visible);
                        this.gumshow = false;
                    }
                    else
                    {
                        this.ShowhidePlayerScore(Visibility.Collapsed);
                        this.gumshow = true;
                    }
                    this.GumBallAppend.Clear();
                    XmlReader xmlReader = XmlReader.Create(new StringReader(xmlDocument.InnerXml.ToString()));
                    while (xmlReader.Read())
                    {
                        bool flag = xmlReader.NodeType != XmlNodeType.Element;
                        if (!flag)
                        {
                            string text = xmlReader.Name.ToString().ToLower();
                            if (text != null)
                            {
                                RotateTransform rotateTransform2;
                                TextBox textBox4;
                                if (!(text == "graphics"))
                                {
                                    if (text == "textlogo")
                                    {
                                        TextBox textBox = new TextBox();
                                        textBox.ContextMenu = this.dragCanvas.ContextMenu;
                                        textBox.Background = new SolidColorBrush(Colors.Transparent);
                                        if (xmlReader.GetAttribute("FontColor").ToString() != string.Empty)
                                        {
                                            BrushConverter brushConverter = new BrushConverter();
                                            System.Windows.Media.Brush brush = (System.Windows.Media.Brush)brushConverter.ConvertFromString(xmlReader.GetAttribute("FontColor").ToString());
                                            textBox.Foreground = brush;
                                        }
                                        else
                                        {
                                            textBox.Foreground = new SolidColorBrush(Colors.DarkRed);
                                        }
                                        if (xmlReader.GetAttribute("FontSize").ToString() != string.Empty)
                                        {
                                            textBox.FontSize = Convert.ToDouble(xmlReader.GetAttribute("FontSize").ToString());
                                        }
                                        else
                                        {
                                            textBox.FontSize = 20.0;
                                        }
                                        if (xmlReader.GetAttribute("FontFamily").ToString() != string.Empty)
                                        {
                                            System.Windows.Media.FontFamily fontFamily = (System.Windows.Media.FontFamily)new FontFamilyConverter().ConvertFromString(xmlReader.GetAttribute("FontFamily").ToString());
                                            textBox.FontFamily = fontFamily;
                                        }
                                        textBox.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                                        textBox.Uid = "txtLogoBlock";
                                        textBox.FontWeight = FontWeights.Bold;
                                        textBox.BorderBrush = null;
                                        textBox.Style = (Style)base.FindResource("SearchIDTB");
                                        this.dragCanvas.Children.Add(textBox);
                                        Canvas.SetLeft(textBox, Convert.ToDouble(xmlReader.GetAttribute("Left").ToString()));
                                        Canvas.SetTop(textBox, Convert.ToDouble(xmlReader.GetAttribute("Top").ToString()));
                                        if (xmlReader.GetAttribute("ZIndex").ToString() != string.Empty)
                                        {
                                            Panel.SetZIndex(textBox, Convert.ToInt32(xmlReader.GetAttribute("ZIndex").ToString()));
                                        }
                                        else
                                        {
                                            Panel.SetZIndex(textBox, 4);
                                        }
                                        rotateTransform2 = new RotateTransform();
                                        rotateTransform2.CenterX = 0.0;
                                        rotateTransform2.CenterY = 0.0;
                                        rotateTransform2.Angle = Convert.ToDouble(xmlReader.GetAttribute("Angle").ToString());
                                        textBox.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                                        textBox.RenderTransform = rotateTransform2;
                                        textBox.MouseLeftButtonUp += new MouseButtonEventHandler(this.SelectObject);
                                        textBox.Text = xmlReader.GetAttribute("Content").ToString();
                                        VisualStateManager.GoToState(this.btnGraphicsText, "Checked", true);
                                        VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                                        VisualStateManager.GoToElementState(this.btnAddgraphics, "Checked", true);
                                        this.graphicsTextBoxCount++;
                                        continue;
                                    }
                                    if (!(text == "textbox"))
                                    {
                                        if (!(text == "gumball"))
                                        {
                                            continue;
                                        }
                                        num++;
                                        this.txtGumBall.Visibility = Visibility.Visible;
                                        this.btnGumBall.Visibility = Visibility.Visible;
                                        StackPanel stackPanel = new StackPanel();
                                        TextBox textBox2 = new TextBox();
                                        textBox2.Template = (base.FindResource("TextBoxBaseControlTemplate") as ControlTemplate);
                                        TextBox textBox3 = new TextBox();
                                        textBox3.Template = (base.FindResource("TextBoxBaseControlTemplate") as ControlTemplate);
                                        this.grdGumball.ContextMenu = this.dragCanvas.ContextMenu;
                                        if (xmlReader.GetAttribute("background").ToString() != string.Empty)
                                        {
                                            BrushConverter brushConverter = new BrushConverter();
                                            System.Windows.Media.Brush brush = (System.Windows.Media.Brush)brushConverter.ConvertFromString(xmlReader.GetAttribute("background").ToString());
                                            textBox3.Background = brush;
                                            textBox2.Background = brush;
                                        }
                                        else
                                        {
                                            textBox3.Background = new SolidColorBrush(Colors.Transparent);
                                            textBox2.Background = new SolidColorBrush(Colors.Transparent);
                                        }
                                        if (xmlReader.GetAttribute("foreground").ToString() != string.Empty)
                                        {
                                            BrushConverter brushConverter = new BrushConverter();
                                            System.Windows.Media.Brush brush = (System.Windows.Media.Brush)brushConverter.ConvertFromString(xmlReader.GetAttribute("foreground").ToString());
                                            textBox3.Foreground = brush;
                                            textBox2.Foreground = brush;
                                        }
                                        else
                                        {
                                            textBox3.Foreground = new SolidColorBrush(Colors.DarkRed);
                                            textBox2.Foreground = new SolidColorBrush(Colors.DarkRed);
                                        }
                                        if (xmlReader.GetAttribute("zindex").ToString() != string.Empty)
                                        {
                                            Panel.SetZIndex(stackPanel, Convert.ToInt32(xmlReader.GetAttribute("zindex").ToString()));
                                        }
                                        else
                                        {
                                            Panel.SetZIndex(stackPanel, 4);
                                        }
                                        if (xmlReader.GetAttribute("fontsize").ToString() != string.Empty)
                                        {
                                            textBox3.FontSize = Convert.ToDouble(xmlReader.GetAttribute("fontsize").ToString());
                                            textBox2.FontSize = Convert.ToDouble(xmlReader.GetAttribute("fontsize").ToString());
                                        }
                                        else
                                        {
                                            textBox3.FontSize = 36.0;
                                            textBox2.FontSize = 36.0;
                                        }
                                        if (xmlReader.GetAttribute("fontfamily").ToString() != string.Empty)
                                        {
                                            System.Windows.Media.FontFamily fontFamily = (System.Windows.Media.FontFamily)new FontFamilyConverter().ConvertFromString(xmlReader.GetAttribute("fontfamily").ToString());
                                            textBox3.FontFamily = fontFamily;
                                            textBox2.FontFamily = fontFamily;
                                        }
                                        if (xmlReader.GetAttribute("fontweight").ToString() != string.Empty)
                                        {
                                            textBox3.FontWeight = (FontWeight)new FontWeightConverter().ConvertFromString(xmlReader.GetAttribute("fontweight").ToString());
                                            textBox2.FontWeight = (FontWeight)new FontWeightConverter().ConvertFromString(xmlReader.GetAttribute("fontweight").ToString());
                                        }
                                        else
                                        {
                                            textBox3.FontWeight = FontWeights.Bold;
                                            textBox2.FontWeight = FontWeights.Bold;
                                        }
                                        if (xmlReader.GetAttribute("fontStyle").ToString() != string.Empty)
                                        {
                                            textBox3.FontStyle = (System.Windows.FontStyle)new FontStyleConverter().ConvertFromString(xmlReader.GetAttribute("fontStyle").ToString());
                                            textBox2.FontStyle = (System.Windows.FontStyle)new FontStyleConverter().ConvertFromString(xmlReader.GetAttribute("fontStyle").ToString());
                                        }
                                        else
                                        {
                                            textBox3.FontStyle = FontStyles.Normal;
                                            textBox2.FontStyle = FontStyles.Normal;
                                        }
                                        string text2 = string.Empty;
                                        string text3 = string.Empty;
                                        string text4 = xmlReader.GetAttribute("text").ToString();
                                        if (!string.IsNullOrEmpty(text4))
                                        {
                                            text2 = text4.Split(new char[]
                                            {
                                        '='
                                            })[0].Trim() + " Score";
                                            text3 = text4.Split(new char[]
                                            {
                                        '='
                                            })[1].Trim();
                                        }
                                        textBox3.Uid = "txtgumball";
                                        textBox3.Text = text2;
                                        textBox3.IsReadOnly = true;
                                        stackPanel.Name = ((!string.IsNullOrEmpty(text4)) ? text4.Split(new char[]
                                        {
                                    '='
                                        })[0].Trim() : "");
                                        textBox2.Text = text3;
                                        textBox2.IsReadOnly = true;
                                        this.grdGumball.Height = this.dragCanvas.ActualHeight;
                                        this.grdGumball.Width = this.dragCanvas.ActualWidth;
                                        string text5 = xmlReader.GetAttribute("position").ToString();
                                        string text6 = xmlReader.GetAttribute("margin").ToString();
                                        stackPanel.Uid = "spgumball";
                                        stackPanel.Orientation = Orientation.Vertical;
                                        stackPanel.Children.Add(textBox3);
                                        stackPanel.Children.Add(textBox2);
                                        this.dragCanvas.Children.Add(stackPanel);
                                        stackPanel.UpdateLayout();
                                        stackPanel.Measure(new System.Windows.Size(double.PositiveInfinity, double.PositiveInfinity));
                                        System.Windows.Size desiredSize = stackPanel.DesiredSize;
                                        this.actualHgt = desiredSize.Height;
                                        if (desiredSize.Width > this.actualWdth)
                                        {
                                            this.actualWdth = desiredSize.Width;
                                        }
                                        Panel.SetZIndex(this.grdGumball, 7);
                                        this.SetGumballPosition(text5, text6, stackPanel);
                                        this.GumBallAppend.Append(string.Concat(new string[]
                                        {
                                    "<Gumball player = '",
                                    xmlReader.GetAttribute("player").ToString(),
                                    "' zindex='",
                                    xmlReader.GetAttribute("zindex").ToString(),
                                    "' text= '",
                                    xmlReader.GetAttribute("text").ToString(),
                                    "' foreground='",
                                    xmlReader.GetAttribute("foreground").ToString(),
                                    "' fontfamily='",
                                    xmlReader.GetAttribute("fontfamily").ToString(),
                                    "' fontsize= '",
                                    xmlReader.GetAttribute("fontsize").ToString(),
                                    "' fontweight= '",
                                    xmlReader.GetAttribute("fontweight").ToString(),
                                    "' fontStyle='",
                                    xmlReader.GetAttribute("fontStyle").ToString(),
                                    "' background='",
                                    xmlReader.GetAttribute("background").ToString(),
                                    "' position='",
                                    text5,
                                    "' margin='",
                                    text6,
                                    "'/>"
                                        }));
                                        this.spGumball.RenderTransform = null;
                                        DragCanvas.SetCanBeDragged(stackPanel, false);
                                        continue;
                                    }
                                    else
                                    {
                                        textBox4 = new TextBox();
                                        textBox4.ContextMenu = this.dragCanvas.ContextMenu;
                                        textBox4.Background = new SolidColorBrush(Colors.Transparent);
                                        if (xmlReader.GetAttribute("foreground").ToString() != string.Empty)
                                        {
                                            BrushConverter brushConverter = new BrushConverter();
                                            System.Windows.Media.Brush brush = (System.Windows.Media.Brush)brushConverter.ConvertFromString(xmlReader.GetAttribute("foreground").ToString());
                                            textBox4.Foreground = brush;
                                        }
                                        else
                                        {
                                            textBox4.Foreground = new SolidColorBrush(Colors.DarkRed);
                                        }
                                        if (xmlReader.GetAttribute("zindex").ToString() != string.Empty)
                                        {
                                            Panel.SetZIndex(textBox4, Convert.ToInt32(xmlReader.GetAttribute("zindex").ToString()));
                                        }
                                        else
                                        {
                                            Panel.SetZIndex(textBox4, 4);
                                        }
                                        flag = !(xmlReader.GetAttribute("fontsize").ToString() != string.Empty);
                                    }
                                }
                                else
                                {
                                    Button button = new Button();
                                    button.HorizontalAlignment = HorizontalAlignment.Center;
                                    button.VerticalAlignment = VerticalAlignment.Center;
                                    Style style = (Style)base.FindResource("ButtonStyleGraphic");
                                    button.Style = style;
                                    System.Windows.Controls.Image image = new System.Windows.Controls.Image();
                                    BitmapImage bitmapImage2 = new BitmapImage(new Uri(LoginUser.DigiFolderGraphicsPath + "\\" + xmlReader.GetAttribute("source").ToString()));
                                    image.Name = "A" + Guid.NewGuid().ToString().Split(new char[]
                                    {
                                '-'
                                    })[0].ToString();
                                    button.Name = "btn" + Guid.NewGuid().ToString().Split(new char[]
                                    {
                                '-'
                                    })[0].ToString();
                                    button.Uid = "uid" + Guid.NewGuid().ToString().Split(new char[]
                                    {
                                '-'
                                    })[0].ToString();
                                    image.Source = bitmapImage2;
                                    button.Width = 90.0;
                                    button.Height = 90.0;
                                    button.Click += new RoutedEventHandler(this.btngrph_Click);
                                    button.Content = image;
                                    this.dragCanvas.Children.Add(button);
                                    if (true)
                                    {
                                        image.MouseLeftButtonUp += new MouseButtonEventHandler(this.SelectObject);
                                        button.MouseLeftButtonUp += new MouseButtonEventHandler(this.SelectObject);
                                        button.GotFocus += new RoutedEventHandler(this.btngrph_GotFocus);
                                        string value3 = string.Format("{0:0.00}", Convert.ToDouble(xmlReader.GetAttribute("left").ToString()));
                                        string value4 = string.Format("{0:0.00}", Convert.ToDouble(xmlReader.GetAttribute("top").ToString()));
                                        Canvas.SetLeft(button, Convert.ToDouble(value3));
                                        Canvas.SetTop(button, Convert.ToDouble(value4));
                                        double num5 = Convert.ToDouble(xmlReader.GetAttribute("zoomfactor").ToString());
                                        FrameworkElement arg_109C_0 = button;
                                        Convert.ToDouble(xmlReader.GetAttribute("wthsource").ToString());
                                        arg_109C_0.Width = Convert.ToDouble(xmlReader.GetAttribute("wthsource").ToString());
                                        FrameworkElement arg_10D1_0 = button;
                                        Convert.ToDouble(xmlReader.GetAttribute("wthsource").ToString());
                                        arg_10D1_0.Height = Convert.ToDouble(xmlReader.GetAttribute("wthsource").ToString());
                                        button.Tag = num5.ToString();
                                        TransformGroup transformGroup = new TransformGroup();
                                        rotateTransform2 = new RotateTransform();
                                        ScaleTransform scaleTransform2 = new ScaleTransform();
                                        scaleTransform2.CenterX = 0.0;
                                        scaleTransform2.CenterY = 0.0;
                                        if (xmlReader.GetAttribute("scalex") != null)
                                        {
                                            scaleTransform2.ScaleX = Convert.ToDouble(xmlReader.GetAttribute("scalex").ToString());
                                        }
                                        if (xmlReader.GetAttribute("scaley") != null)
                                        {
                                            scaleTransform2.ScaleY = Convert.ToDouble(xmlReader.GetAttribute("scaley").ToString());
                                        }
                                        if (xmlReader.GetAttribute("zindex").ToString() != string.Empty)
                                        {
                                            Panel.SetZIndex(button, Convert.ToInt32(xmlReader.GetAttribute("zindex").ToString()));
                                        }
                                        else
                                        {
                                            Panel.SetZIndex(button, 4);
                                        }
                                        button.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                                        transformGroup.Children.Add(scaleTransform2);
                                        rotateTransform2.CenterX = 0.0;
                                        rotateTransform2.CenterY = 0.0;
                                        rotateTransform2.Angle = Convert.ToDouble(xmlReader.GetAttribute("angle").ToString());
                                        button.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                                        transformGroup.Children.Add(rotateTransform2);
                                        button.RenderTransform = transformGroup;
                                        VisualStateManager.GoToState(this.btngraphics, "Checked", true);
                                        VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                                        VisualStateManager.GoToElementState(this.btnAddgraphics, "Checked", true);
                                        this.graphicsCount++;
                                        bitmapImage2.Freeze();
                                        continue;
                                    }
                                }
                                if (!flag)
                                {
                                    textBox4.FontSize = Convert.ToDouble(xmlReader.GetAttribute("fontsize").ToString());
                                }
                                else
                                {
                                    textBox4.FontSize = 20.0;
                                }
                                if (xmlReader.GetAttribute("_fontfamily").ToString() != string.Empty)
                                {
                                    System.Windows.Media.FontFamily fontFamily = (System.Windows.Media.FontFamily)new FontFamilyConverter().ConvertFromString(xmlReader.GetAttribute("_fontfamily").ToString());
                                    textBox4.FontFamily = fontFamily;
                                }
                                textBox4.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                                textBox4.Uid = "txtblock";
                                textBox4.FontWeight = FontWeights.Bold;
                                textBox4.BorderBrush = null;
                                textBox4.Style = (Style)base.FindResource("SearchIDTB");
                                this.dragCanvas.Children.Add(textBox4);
                                Canvas.SetLeft(textBox4, Convert.ToDouble(xmlReader.GetAttribute("left").ToString()));
                                Canvas.SetTop(textBox4, Convert.ToDouble(xmlReader.GetAttribute("top").ToString()));
                                rotateTransform2 = new RotateTransform();
                                rotateTransform2.CenterX = 0.0;
                                rotateTransform2.CenterY = 0.0;
                                rotateTransform2.Angle = Convert.ToDouble(xmlReader.GetAttribute("angle").ToString());
                                textBox4.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
                                textBox4.RenderTransform = rotateTransform2;
                                textBox4.MouseLeftButtonUp += new MouseButtonEventHandler(this.SelectObject);
                                textBox4.Text = xmlReader.GetAttribute("text").ToString();
                                VisualStateManager.GoToState(this.btnGraphicsText, "Checked", true);
                                VisualStateManager.GoToState(this.btnAddgraphics, "Checked", true);
                                VisualStateManager.GoToElementState(this.btnAddgraphics, "Checked", true);
                                this.graphicsTextBoxCount++;
                            }
                        }
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                finally
                {
                }
            }
        }


        public void LoadXml(string ImageXml)
        {
            try
            {
                bool flag = false;
                XmlDocument xmlDocument = new XmlDocument();
                xmlDocument.LoadXml(ImageXml);
                IEnumerator enumerator = xmlDocument.ChildNodes[0].Attributes.GetEnumerator();
                Dictionary<string, int> obj = null;
                try
                {
                    while (enumerator.MoveNext())
                    {
                        object current = enumerator.Current;
                        string text = ((XmlAttribute)current).Name.ToLower();
                        if (text != null)
                        {
                            if (obj == null)
                            {
                                obj = new Dictionary<string, int>(45)
                        {
                            {
                                "brightness",
                                0
                            },
                            {
                                "firstredeye",
                                1
                            },
                            {
                                "secondredeye",
                                2
                            },
                            {
                                "firstradius",
                                3
                            },
                            {
                                "aspectratiofirstredeye",
                                4
                            },
                            {
                                "aspectratiosecondredeye",
                                5
                            },
                            {
                                "secondradius",
                                6
                            },
                            {
                                "firstcenterx",
                                7
                            },
                            {
                                "firstcentery",
                                8
                            },
                            {
                                "secondcenterx",
                                9
                            },
                            {
                                "secondcentery",
                                10
                            },
                            {
                                "multipleredeye1",
                                11
                            },
                            {
                                "multipleradius1",
                                12
                            },
                            {
                                "multiplecenterx1",
                                13
                            },
                            {
                                "multiplecentery1",
                                14
                            },
                            {
                                "multipleredeye2",
                                15
                            },
                            {
                                "multipleradius2",
                                16
                            },
                            {
                                "multiplecenterx2",
                                17
                            },
                            {
                                "multiplecentery2",
                                18
                            },
                            {
                                "multipleredeye3",
                                19
                            },
                            {
                                "multipleradius3",
                                20
                            },
                            {
                                "multiplecenterx3",
                                21
                            },
                            {
                                "multiplecentery3",
                                22
                            },
                            {
                                "multipleredeye4",
                                23
                            },
                            {
                                "multipleradius4",
                                24
                            },
                            {
                                "multiplecenterx4",
                                25
                            },
                            {
                                "multiplecentery4",
                                26
                            },
                            {
                                "multipleredeye5",
                                27
                            },
                            {
                                "multipleradius5",
                                28
                            },
                            {
                                "multiplecenterx5",
                                29
                            },
                            {
                                "multiplecentery5",
                                30
                            },
                            {
                                "multipleredeye6",
                                31
                            },
                            {
                                "multipleradius6",
                                32
                            },
                            {
                                "multiplecenterx6",
                                33
                            },
                            {
                                "multiplecentery6",
                                34
                            },
                            {
                                "crop",
                                35
                            },
                            {
                                "contrast",
                                36
                            },
                            {
                                "rotate",
                                37
                            },
                            {
                                "rotatewidth",
                                38
                            },
                            {
                                "rotateheight",
                                39
                            },
                            {
                                "flipmode",
                                40
                            },
                            {
                                "flipmodey",
                                41
                            },
                            {
                                "_centerx",
                                42
                            },
                            {
                                "_centery",
                                43
                            },
                            {
                                "colourvalue",
                                44
                            }
                        };
                            }
                            int num;
                            if (obj.TryGetValue(text, out num))
                            {
                                bool arg_1A1C_0;
                                switch (num)
                                {
                                    case 0:
                                        if (((XmlAttribute)current).Value.ToString() != "0" && ((XmlAttribute)current).Value.ToString() != "")
                                        {
                                            this.bright = Convert.ToDouble(((XmlAttribute)current).Value.ToString());
                                            this._brighteff.Brightness = this.bright;
                                            this._brighteff.Contrast = 1.0;
                                            this.GrdBrightness.Effect = this._brighteff;
                                            this.currentbrightness = this.bright;
                                            flag = true;
                                        }
                                        else
                                        {
                                            this.GrdBrightness.Effect = null;
                                            this.bright = 0.0;
                                            this.currentbrightness = this.bright;
                                            VisualStateManager.GoToState(this.btnColorEffects, "Unchecked", true);
                                        }
                                        break;
                                    case 1:
                                        if (((XmlAttribute)current).Value.ToString() == "true")
                                        {
                                            this.redEyeEffect.Radius = ContantValueForMainWindow.RedEyeSize;
                                            this.redEyeEffect.RedeyeTrue = 1.0;
                                            this.GrdRedEyeFirst.Effect = this.redEyeEffect;
                                            this.redEyeEffect.Center = new System.Windows.Point(0.5, 0.5);
                                            this.redeffectfirstApplied = true;
                                        }
                                        else
                                        {
                                            this.GrdRedEyeFirst.Effect = null;
                                        }
                                        break;
                                    case 2:
                                        if (((XmlAttribute)current).Value.ToString() == "true")
                                        {
                                            this.redeffectsecondApplied = true;
                                            this.redEyeEffectSecond.Radius = ContantValueForMainWindow.RedEyeSize;
                                            this.redEyeEffectSecond.RedeyeTrue = 1.0;
                                            this.GrdRedEyeSecond.Effect = this.redEyeEffectSecond;
                                            this.redEyeEffectSecond.Center = new System.Windows.Point(0.5, 0.5);
                                        }
                                        else
                                        {
                                            this.GrdRedEyeSecond.Effect = null;
                                        }
                                        break;
                                    case 3:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffect.Radius = Convert.ToDouble(((XmlAttribute)current).Value);
                                        }
                                        break;
                                    case 4:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffect.AspectRatio = Convert.ToDouble(((XmlAttribute)current).Value);
                                        }
                                        break;
                                    case 5:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectSecond.AspectRatio = Convert.ToDouble(((XmlAttribute)current).Value);
                                            this.redEyeEffectMultiple.AspectRatio = Convert.ToDouble(((XmlAttribute)current).Value);
                                            this.redEyeEffectMultiple1.AspectRatio = Convert.ToDouble(((XmlAttribute)current).Value);
                                        }
                                        break;
                                    case 6:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectSecond.Radius = Convert.ToDouble(((XmlAttribute)current).Value);
                                        }
                                        break;
                                    case 7:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffect.Center = new System.Windows.Point(Convert.ToDouble(((XmlAttribute)current).Value), 0.5);
                                        }
                                        break;
                                    case 8:
                                        {
                                            bool flag2 = !(((XmlAttribute)current).Value.ToString() != "0");
                                            bool expr_77C = arg_1A1C_0 = flag2;
                                            if (7 == 0)
                                            {
                                                goto IL_1A1B;
                                            }
                                            if (!expr_77C)
                                            {
                                                this.redEyeEffect.Center = new System.Windows.Point(this.redEyeEffect.Center.X, Convert.ToDouble(((XmlAttribute)current).Value));
                                            }
                                            break;
                                        }
                                    case 9:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectSecond.Center = new System.Windows.Point(Convert.ToDouble(((XmlAttribute)current).Value), 0.6);
                                        }
                                        break;
                                    case 10:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectSecond.Center = new System.Windows.Point(this.redEyeEffectSecond.Center.X, Convert.ToDouble(((XmlAttribute)current).Value));
                                        }
                                        break;
                                    case 11:
                                        if (((XmlAttribute)current).Value.ToString() == "true")
                                        {
                                            this.redEyeEffectMultiple.Radius = ContantValueForMainWindow.RedEyeSize;
                                            this.redEyeEffectMultiple.RedeyeTrue = 1.0;
                                            this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                            this.redEyeEffectMultiple.Center = new System.Windows.Point(0.5, 0.5);
                                            this.redeffectmultiple1Applied = true;
                                        }
                                        else
                                        {
                                            this.GrdRedEyeMultiple.Effect = null;
                                        }
                                        break;
                                    case 12:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple.Radius = Convert.ToDouble(((XmlAttribute)current).Value);
                                        }
                                        break;
                                    case 13:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple.Center = new System.Windows.Point(Convert.ToDouble(((XmlAttribute)current).Value), 0.5);
                                        }
                                        break;
                                    case 14:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple.Center = new System.Windows.Point(this.redEyeEffectMultiple.Center.X, Convert.ToDouble(((XmlAttribute)current).Value));
                                        }
                                        break;
                                    case 15:
                                        if (((XmlAttribute)current).Value.ToString() == "true")
                                        {
                                            this.redEyeEffectMultiple.Radius1 = ContantValueForMainWindow.RedEyeSize;
                                            this.redEyeEffectMultiple.RedeyeTrue1 = 1.0;
                                            this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                            this.redEyeEffectMultiple.Center1 = new System.Windows.Point(0.5, 0.5);
                                            this.redeffectmultiple2Applied = true;
                                        }
                                        break;
                                    case 16:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple.Radius1 = Convert.ToDouble(((XmlAttribute)current).Value);
                                        }
                                        break;
                                    case 17:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple.Center1 = new System.Windows.Point(Convert.ToDouble(((XmlAttribute)current).Value), 0.5);
                                        }
                                        break;
                                    case 18:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple.Center1 = new System.Windows.Point(this.redEyeEffectMultiple.Center1.X, Convert.ToDouble(((XmlAttribute)current).Value));
                                        }
                                        break;
                                    case 19:
                                        if (((XmlAttribute)current).Value.ToString() == "true")
                                        {
                                            this.redEyeEffectMultiple.Radius2 = ContantValueForMainWindow.RedEyeSize;
                                            this.redEyeEffectMultiple.RedeyeTrue2 = 1.0;
                                            this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                            this.redEyeEffectMultiple.Center2 = new System.Windows.Point(0.5, 0.5);
                                            this.redeffectmultiple3Applied = true;
                                        }
                                        break;
                                    case 20:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple.Radius2 = Convert.ToDouble(((XmlAttribute)current).Value);
                                        }
                                        break;
                                    case 21:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple.Center2 = new System.Windows.Point(Convert.ToDouble(((XmlAttribute)current).Value), 0.5);
                                        }
                                        break;
                                    case 22:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple.Center2 = new System.Windows.Point(this.redEyeEffectMultiple.Center2.X, Convert.ToDouble(((XmlAttribute)current).Value));
                                        }
                                        break;
                                    case 23:
                                        if (((XmlAttribute)current).Value.ToString() == "true")
                                        {
                                            this.redEyeEffectMultiple1.Radius = ContantValueForMainWindow.RedEyeSize;
                                            this.redEyeEffectMultiple1.RedeyeTrue = 1.0;
                                            this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                            this.redEyeEffectMultiple1.Center = new System.Windows.Point(0.5, 0.5);
                                            this.redeffectmultiple4Applied = true;
                                        }
                                        else
                                        {
                                            this.GrdRedEyeMultiple1.Effect = null;
                                        }
                                        break;
                                    case 24:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple1.Radius = Convert.ToDouble(((XmlAttribute)current).Value);
                                        }
                                        break;
                                    case 25:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple1.Center = new System.Windows.Point(Convert.ToDouble(((XmlAttribute)current).Value), 0.5);
                                        }
                                        break;
                                    case 26:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple1.Center = new System.Windows.Point(this.redEyeEffectMultiple1.Center.X, Convert.ToDouble(((XmlAttribute)current).Value));
                                        }
                                        break;
                                    case 27:
                                        if (((XmlAttribute)current).Value.ToString() == "true")
                                        {
                                            this.redEyeEffectMultiple1.Radius1 = ContantValueForMainWindow.RedEyeSize;
                                            this.redEyeEffectMultiple1.RedeyeTrue1 = 1.0;
                                            this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                            this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(0.5, 0.5);
                                            this.redeffectmultiple5Applied = true;
                                        }
                                        break;
                                    case 28:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple1.Radius1 = Convert.ToDouble(((XmlAttribute)current).Value);
                                        }
                                        break;
                                    case 29:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(Convert.ToDouble(((XmlAttribute)current).Value), 0.5);
                                        }
                                        break;
                                    case 30:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(this.redEyeEffectMultiple1.Center1.X, Convert.ToDouble(((XmlAttribute)current).Value));
                                        }
                                        break;
                                    case 31:
                                        if (((XmlAttribute)current).Value.ToString() == "true")
                                        {
                                            this.redEyeEffectMultiple1.Radius2 = ContantValueForMainWindow.RedEyeSize;
                                            this.redEyeEffectMultiple1.RedeyeTrue2 = 1.0;
                                            this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                            this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(0.5, 0.5);
                                            this.redeffectmultiple6Applied = true;
                                        }
                                        break;
                                    case 32:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple1.Radius2 = Convert.ToDouble(((XmlAttribute)current).Value);
                                        }
                                        break;
                                    case 33:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(Convert.ToDouble(((XmlAttribute)current).Value), 0.5);
                                        }
                                        break;
                                    case 34:
                                        if (((XmlAttribute)current).Value.ToString() != "0")
                                        {
                                            this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(this.redEyeEffectMultiple1.Center2.X, Convert.ToDouble(((XmlAttribute)current).Value));
                                        }
                                        break;
                                    case 35:
                                        {
                                            string str = LoginUser.DigiFolderFramePath + "Thumbnails\\";
                                            string str2 = LoginUser.DigiFolderBackGroundPath + "Thumbnails\\";
                                            this.Frames.Clear();
                                            this.lstBackground.Items.Clear();
                                            if (((XmlAttribute)current).Value.ToString() != "##")
                                            {
                                                string productTypeName = ((XmlAttribute)current).Value.ToString();
                                                ProductBusiness productBusiness = new ProductBusiness();
                                                int productID = productBusiness.GetProductID(productTypeName);
                                                try
                                                {
                                                    BorderBusiness borderBusiness = new BorderBusiness();
                                                    IEnumerable<BorderInfo> enumerable = from t in borderBusiness.GetBorderDetails()
                                                                                         where t.DG_IsActive
                                                                                         select t;
                                                    foreach (BorderInfo current2 in enumerable)
                                                    {
                                                        LstMyItems lstMyItems = new LstMyItems();
                                                        lstMyItems.FilePath = str + current2.DG_Border;
                                                        lstMyItems.Name = current2.DG_Border;
                                                        lstMyItems.Photoname1 = current2.DG_Border;
                                                        this.Frames.Add(lstMyItems);
                                                    }
                                                    BackgroundBusiness backgroundBusiness = new BackgroundBusiness();
                                                    if (backgroundBusiness.GetBackgoundDetails(productID) != null)
                                                    {
                                                        foreach (BackGroundInfo current3 in backgroundBusiness.GetBackgoundDetailsALL())
                                                        {
                                                            if (current3.DG_Background_IsActive.HasValue && current3.DG_Background_IsActive.Value)
                                                            {
                                                                Uri uri = new Uri(str2 + current3.DG_BackGround_Image_Name);
                                                                LstMyItems lstMyItems = new LstMyItems();
                                                                bool arg_13A5_0 = !File.Exists(uri.ToString());
                                                                if (!false)
                                                                {
                                                                    if (!arg_13A5_0)
                                                                    {
                                                                        BitmapImage bmpImage = new BitmapImage(uri);
                                                                        lstMyItems.BmpImage = bmpImage;
                                                                    }
                                                                    lstMyItems.Name = current3.DG_BackGround_Image_Name;
                                                                    lstMyItems.Photoname1 = current3.DG_BackGround_Image_Display_Name;
                                                                    lstMyItems.FilePath = str2 + current3.DG_BackGround_Image_Name;
                                                                    this.lstBackground.Items.Add(lstMyItems);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        foreach (BackGroundInfo current3 in backgroundBusiness.GetBackgoundDetailsALL())
                                                        {
                                                            if (current3.DG_Background_IsActive.HasValue && current3.DG_Background_IsActive.Value)
                                                            {
                                                                Uri uri = new Uri(str2 + current3.DG_BackGround_Image_Name);
                                                                LstMyItems lstMyItems = new LstMyItems();
                                                                if (File.Exists(uri.ToString()))
                                                                {
                                                                    BitmapImage bmpImage = new BitmapImage(uri);
                                                                    lstMyItems.BmpImage = bmpImage;
                                                                }
                                                                lstMyItems.Name = current3.DG_BackGround_Image_Name;
                                                                lstMyItems.Photoname1 = current3.DG_BackGround_Image_Display_Name;
                                                                lstMyItems.FilePath = str2 + current3.DG_BackGround_Image_Name;
                                                                this.lstBackground.Items.Add(lstMyItems);
                                                            }
                                                        }
                                                    }
                                                }
                                                catch (Exception)
                                                {
                                                }
                                            }
                                            else
                                            {
                                                BorderBusiness borderBusiness = new BorderBusiness();
                                                IEnumerable<BorderInfo> enumerable = from t in borderBusiness.GetBorderDetails()
                                                                                     where t.DG_IsActive
                                                                                     select t;
                                                LstMyItems lstMyItems;
                                                foreach (BorderInfo current2 in enumerable)
                                                {
                                                    lstMyItems = new LstMyItems();
                                                    lstMyItems.FilePath = str + current2.DG_Border;
                                                    lstMyItems.Name = current2.DG_Border;
                                                    lstMyItems.Photoname1 = current2.DG_Border;
                                                    this.Frames.Add(lstMyItems);
                                                }
                                                BackgroundBusiness backgroundBusiness2 = new BackgroundBusiness();
                                                foreach (BackGroundInfo current3 in backgroundBusiness2.GetBackgoundDetailsALL())
                                                {
                                                    bool arg_1651_0;
                                                    if (current3.DG_Background_IsActive.HasValue)
                                                    {
                                                        arg_1651_0 = !current3.DG_Background_IsActive.Value;
                                                        goto IL_1650;
                                                    }
                                                    if (-1 != 0)
                                                    {
                                                        arg_1651_0 = true;
                                                        goto IL_1650;
                                                    }
                                                    goto IL_16D4;
                                                    continue;
                                                IL_1650:
                                                    if (arg_1651_0)
                                                    {
                                                        continue;
                                                    }
                                                    Uri uri = new Uri(str2 + current3.DG_BackGround_Image_Name);
                                                    lstMyItems = new LstMyItems();
                                                    if (File.Exists(uri.ToString()))
                                                    {
                                                        BitmapImage bmpImage = new BitmapImage(uri);
                                                        lstMyItems.BmpImage = bmpImage;
                                                    }
                                                    lstMyItems.Name = current3.DG_BackGround_Image_Name;
                                                    lstMyItems.Photoname1 = current3.DG_BackGround_Image_Display_Name;
                                                    lstMyItems.FilePath = str2 + current3.DG_BackGround_Image_Name;
                                                IL_16D4:
                                                    this.lstBackground.Items.Add(lstMyItems);
                                                }
                                            }
                                            break;
                                        }
                                    case 36:
                                        if (((XmlAttribute)current).Value.ToString() != "1" && ((XmlAttribute)current).Value.ToString() != "")
                                        {
                                            if (((XmlAttribute)current).Value.ToString() == "##")
                                            {
                                                this.cont = 1.0;
                                            }
                                            else
                                            {
                                                this.cont = Convert.ToDouble(((XmlAttribute)current).Value.ToString());
                                            }
                                            ContrastAdjustEffect contrastAdjustEffect = new ContrastAdjustEffect();
                                            contrastAdjustEffect.Brightness = this.bright;
                                            contrastAdjustEffect.Contrast = this.cont;
                                            this.GrdBrightness.Effect = contrastAdjustEffect;
                                            this.currentcontrast = this.cont;
                                            this._sharpeff.Strength = this.sharpen;
                                            flag = true;
                                        }
                                        else
                                        {
                                            this.cont = 1.0;
                                            this.currentcontrast = this.cont;
                                            VisualStateManager.GoToState(this.btnColorEffects, "Unchecked", true);
                                        }
                                        break;
                                    case 37:
                                        if (((XmlAttribute)current).Value.ToString() != "##")
                                        {
                                            VisualStateManager.GoToState(this.btnrotate, "Checked", true);
                                            VisualStateManager.GoToState(this.btnantirotate, "Checked", true);
                                        }
                                        else
                                        {
                                            VisualStateManager.GoToState(this.btnrotate, "Unchecked", true);
                                            VisualStateManager.GoToState(this.btnantirotate, "Unchecked", true);
                                        }
                                        break;
                                    case 38:
                                        if (((XmlAttribute)current).Value.ToString() != "##")
                                        {
                                        }
                                        break;
                                    case 39:
                                        if (((XmlAttribute)current).Value.ToString() != "##")
                                        {
                                        }
                                        break;
                                    case 40:
                                        if (((XmlAttribute)current).Value.ToString() != "##")
                                        {
                                            if (false)
                                            {
                                                goto IL_1C3F;
                                            }
                                        }
                                        break;
                                    case 41:
                                        if (((XmlAttribute)current).Value.ToString() != "##")
                                        {
                                        }
                                        break;
                                    case 42:
                                        if (((XmlAttribute)current).Value.ToString() != "##")
                                        {
                                            this._centerX = ((XmlAttribute)current).Value.ToString();
                                        }
                                        else
                                        {
                                            this._centerX = "";
                                        }
                                        break;
                                    case 43:
                                        if (((XmlAttribute)current).Value.ToString() != "##")
                                        {
                                            this._centerY = ((XmlAttribute)current).Value.ToString();
                                        }
                                        else
                                        {
                                            this._centerY = "";
                                        }
                                        break;
                                    case 44:
                                        arg_1A1C_0 = (((XmlAttribute)current).Value.ToString() != "##");
                                        goto IL_1A1B;
                                }
                                continue;
                            IL_1A1B:
                                System.Windows.Media.Color filterColor;
                                if (arg_1A1C_0)
                                {
                                    VisualStateManager.GoToState(this.btnColorFilters, "Checked", true);
                                    text = ((XmlAttribute)current).Value.ToString();
                                    switch (text)
                                    {
                                        case "red":
                                            this._colorfiltereff.FilterColor = Colors.Red;
                                            this.Grdcolorfilter.Effect = this._colorfiltereff;
                                            this.currentcolor = Colors.Red;
                                            VisualStateManager.GoToState(this.btnRed, "Checked", true);
                                            break;
                                        case "blue":
                                            this._colorfiltereff.FilterColor = Colors.Blue;
                                            this.Grdcolorfilter.Effect = this._colorfiltereff;
                                            this.currentcolor = Colors.Blue;
                                            VisualStateManager.GoToState(this.btnBlue, "Checked", true);
                                            break;
                                        case "green":
                                            this._colorfiltereff.FilterColor = Colors.Green;
                                            this.Grdcolorfilter.Effect = this._colorfiltereff;
                                            this.currentcolor = Colors.Green;
                                            VisualStateManager.GoToState(this.btnGreen, "Checked", true);
                                            break;
                                        case "magenta":
                                            this._colorfiltereff.FilterColor = Colors.Magenta;
                                            this.Grdcolorfilter.Effect = this._colorfiltereff;
                                            this.currentcolor = Colors.Magenta;
                                            VisualStateManager.GoToState(this.btnMagenta, "Checked", true);
                                            break;
                                        case "lime":
                                            filterColor = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFFFFF00");
                                            goto IL_1C3F;
                                        case "orange":
                                            filterColor = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFFFA81D");
                                            this._colorfiltereff.FilterColor = filterColor;
                                            this.Grdcolorfilter.Effect = this._colorfiltereff;
                                            this.currentcolor = filterColor;
                                            VisualStateManager.GoToState(this.btnOrange, "Checked", true);
                                            break;
                                        case "yellow":
                                            filterColor = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFFFFF96");
                                            this._colorfiltereff.FilterColor = filterColor;
                                            this.Grdcolorfilter.Effect = this._colorfiltereff;
                                            this.currentcolor = filterColor;
                                            VisualStateManager.GoToState(this.btnYellow, "Checked", true);
                                            break;
                                        case "skyblue":
                                            filterColor = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FF7CF5F5");
                                            this._colorfiltereff.FilterColor = filterColor;
                                            this.Grdcolorfilter.Effect = this._colorfiltereff;
                                            this.currentcolor = filterColor;
                                            VisualStateManager.GoToState(this.btnSkblue, "Checked", true);
                                            break;
                                        case "lightred":
                                            filterColor = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FF7CF5F5");
                                            this._colorfiltereff.FilterColor = filterColor;
                                            this.Grdcolorfilter.Effect = this._colorfiltereff;
                                            this.currentcolor = filterColor;
                                            VisualStateManager.GoToState(this.btnLightRed, "Checked", true);
                                            break;
                                    }
                                }
                                else
                                {
                                    this.Grdcolorfilter.Effect = null;
                                    VisualStateManager.GoToState(this.btnColorFilters, "Unchecked", true);
                                    this.UncheckAllColorFilter();
                                }
                                continue;
                            IL_1C3F:
                                this._colorfiltereff.FilterColor = filterColor;
                                this.Grdcolorfilter.Effect = this._colorfiltereff;
                                this.currentcolor = filterColor;
                                VisualStateManager.GoToState(this.btnLime, "Checked", true);
                            }
                        }
                    }
                }
                finally
                {
                    IDisposable disposable = enumerator as IDisposable;
                    while (disposable != null)
                    {
                        disposable.Dispose();
                        if (8 != 0)
                        {
                            break;
                        }
                    }
                }
                bool flag3 = false;
                foreach (object current in xmlDocument.ChildNodes[0].FirstChild.Attributes)
                {
                    //object current;
                    string text = ((XmlAttribute)current).Name.ToLower();
                    if (text != null)
                    {
                        if (obj == null)
                        {
                            obj = new Dictionary<string, int>(11)
                    {
                        {
                            "sharpen",
                            0
                        },
                        {
                            "greyscale",
                            1
                        },
                        {
                            "digimagic",
                            2
                        },
                        {
                            "sepia",
                            3
                        },
                        {
                            "defog",
                            4
                        },
                        {
                            "underwater",
                            5
                        },
                        {
                            "emboss",
                            6
                        },
                        {
                            "invert",
                            7
                        },
                        {
                            "granite",
                            8
                        },
                        {
                            "hue",
                            9
                        },
                        {
                            "cartoon",
                            10
                        }
                    };
                        }
                        int num;
                        if (obj.TryGetValue(text, out num))
                        {
                            bool flag2;
                            bool arg_240F_0;
                            bool arg_262F_0;
                            switch (num)
                            {
                                case 0:
                                    if (((XmlAttribute)current).Value.ToString() != "##")
                                    {
                                        this.sharpen = Convert.ToDouble(((XmlAttribute)current).Value.ToString());
                                        this._sharpeff.Strength = this.sharpen;
                                        this._sharpeff.PixelWidth = 0.0015;
                                        this._sharpeff.PixelHeight = 0.0015;
                                        this.GrdSharpen.Effect = this._sharpeff;
                                        this.currentsharpen = this.sharpen;
                                        VisualStateManager.GoToState(this.btnSharpen, "Checked", true);
                                        VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                                        flag3 = true;
                                    }
                                    else
                                    {
                                        this.GrdSharpen.Effect = null;
                                        this._Sharepen = "##";
                                        VisualStateManager.GoToState(this.btnSharpen, "Unchecked", true);
                                    }
                                    continue;
                                case 1:
                                    {
                                        bool expr_2052 = arg_240F_0 = !(((XmlAttribute)current).Value.ToString() != "0");
                                        if (3 != 0)
                                        {
                                            if (!expr_2052)
                                            {
                                                GreyScaleEffect greyScaleEffect = new GreyScaleEffect();
                                                greyScaleEffect.Desaturation = Convert.ToDouble(((XmlAttribute)current).Value.ToString() == "false");
                                                greyScaleEffect.Toned = 0.0;
                                                this.GrdGreyScale.Effect = greyScaleEffect;
                                                VisualStateManager.GoToState(this.btnGreyScale, "Checked", true);
                                                VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                                                flag3 = true;
                                            }
                                            else
                                            {
                                                this.GrdGreyScale.Effect = null;
                                                this._GreyScale = "0";
                                                VisualStateManager.GoToState(this.btnGreyScale, "Unchecked", true);
                                            }
                                            continue;
                                        }
                                        break;
                                    }
                                case 2:
                                    if (((XmlAttribute)current).Value.ToString() != "0")
                                    {
                                        this._digimagic = "1";
                                        this._brighteff.Brightness = this.bright;
                                        this._brighteff.Contrast = this.cont;
                                        this.GrdBrightness.Effect = this._brighteff;
                                        this._sharpeff.Strength = this.sharpen;
                                        this._sharpeff.PixelWidth = 0.001;
                                        this._sharpeff.PixelHeight = 0.0015;
                                        this.GrdSharpen.Effect = this._sharpeff;
                                        this._Sharepen = this.sharpen.ToString();
                                        this.checkDigimagic = true;
                                        VisualStateManager.GoToState(this.btnDigiMagic, "Checked", true);
                                        VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                                        VisualStateManager.GoToState(this.btnColorEffects, "Unchecked", true);
                                        VisualStateManager.GoToState(this.btnSharpen, "Unchecked", true);
                                        flag3 = true;
                                    }
                                    else if (!flag)
                                    {
                                        this.GrdBrightness.Effect = null;
                                        this._digimagic = "0";
                                        VisualStateManager.GoToState(this.btnDigiMagic, "Unchecked", true);
                                    }
                                    continue;
                                case 3:
                                    if (((XmlAttribute)current).Value.ToString() != "0")
                                    {
                                        this._colorfiltereff.FilterColor = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFE6B34D");
                                        this.GrdSepia.Effect = this._colorfiltereff;
                                        VisualStateManager.GoToState(this.btnSepia, "Checked", true);
                                        VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                                        flag3 = true;
                                    }
                                    else
                                    {
                                        this.GrdSepia.Effect = null;
                                        this._sepia = "0";
                                        VisualStateManager.GoToState(this.btnSepia, "Unchecked", true);
                                    }
                                    continue;
                                case 4:
                                    {
                                        bool arg_23B6_0;
                                        if (!(((XmlAttribute)current).Value.ToString() != "0"))
                                        {
                                            arg_23B6_0 = (flag || this.checkDigimagic);
                                            goto IL_23B6;
                                        }
                                        this._defoger = "1";
                                        this._brighteff.Brightness = this.bright;
                                        this._brighteff.Contrast = this.cont;
                                        this.GrdBrightness.Effect = this._brighteff;
                                        arg_23B6_0 = VisualStateManager.GoToState(this.btnDefogger, "Checked", true);
                                        if (4 == 0)
                                        {
                                            goto IL_23B6;
                                        }
                                        VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                                        VisualStateManager.GoToState(this.btnColorEffects, "Unchecked", true);
                                        flag3 = true;
                                        continue;
                                    IL_23B6:
                                        if (!arg_23B6_0)
                                        {
                                            this.GrdBrightness.Effect = null;
                                            this._defoger = "0";
                                            VisualStateManager.GoToState(this.btnDefogger, "Unchecked", true);
                                        }
                                        continue;
                                    }
                                case 5:
                                    flag2 = !(((XmlAttribute)current).Value.ToString() != "0");
                                    arg_240F_0 = flag2;
                                    break;
                                case 6:
                                    if (((XmlAttribute)current).Value.ToString() != "0")
                                    {
                                        goto IL_253F;
                                    }
                                    this.GrdEmboss.Effect = null;
                                    this._emboss = "0";
                                    VisualStateManager.GoToState(this.btnEmboss, "Unchecked", true);
                                    continue;
                                case 7:
                                    if (((XmlAttribute)current).Value.ToString() != "0")
                                    {
                                        InvertColorEffect effect = new InvertColorEffect();
                                        this.GrdInvert.Effect = effect;
                                        VisualStateManager.GoToState(this.btnInvert, "Checked", true);
                                        VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                                        arg_262F_0 = true;
                                        goto IL_262F;
                                    }
                                    this.GrdInvert.Effect = null;
                                    continue;
                                case 8:
                                    flag2 = !(((XmlAttribute)current).Value.ToString() != "0");
                                    goto IL_2667;
                                case 9:
                                    if (((XmlAttribute)current).Value.ToString() != "##")
                                    {
                                        this.hueshift = Convert.ToDouble(((XmlAttribute)current).Value.ToString());
                                        this._shifthueeff.HueShift = this.hueshift;
                                        this.GrdHueShift.Effect = this._shifthueeff;
                                        this.currenthueshift = this.hueshift;
                                        VisualStateManager.GoToState(this.btnHue, "Checked", true);
                                        VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                                        flag3 = true;
                                    }
                                    else
                                    {
                                        this.GrdHueShift.Effect = null;
                                    }
                                    continue;
                                case 10:
                                    flag2 = !(((XmlAttribute)current).Value.ToString() != "0");
                                    if (!flag2)
                                    {
                                        Cartoonize cartoonize = new Cartoonize();
                                        cartoonize.Width = 150.0;
                                        cartoonize.Height = 150.0;
                                        this.Grdcartoonize.Effect = cartoonize;
                                        VisualStateManager.GoToState(this.Cartoonize, "Checked", true);
                                        if (-1 == 0)
                                        {
                                            goto IL_2667;
                                        }
                                        arg_262F_0 = VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                                        if (2 == 0)
                                        {
                                            goto IL_262F;
                                        }
                                        flag3 = true;
                                    }
                                    else
                                    {
                                        this.Grdcartoonize.Effect = null;
                                        this._cartoon = "0";
                                        VisualStateManager.GoToState(this.Cartoonize, "Unhecked", true);
                                    }
                                    continue;
                                default:
                                    continue;
                            }
                            if (!arg_240F_0)
                            {
                                this._under.FogColor = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FF4F9CEF");
                                this._under.Defog = 0.4;
                                this._under.Contrastr = 0.5;
                                this._under.Contrastg = 1.0;
                                this._under.Contrastb = 1.0;
                                this._under.Exposure = 0.7;
                                this._under.Gamma = 0.81;
                                this.GrdUnderWater.Effect = this._under;
                                VisualStateManager.GoToState(this.btnUnderWater, "Checked", true);
                                VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                                flag3 = true;
                            }
                            else
                            {
                                this.GrdUnderWater.Effect = null;
                                this._underwater = "0";
                                VisualStateManager.GoToState(this.btnUnderWater, "Unchecked", true);
                            }
                            continue;
                        IL_253F:
                            EmbossedEffect embossedEffect = new EmbossedEffect();
                            embossedEffect.Amount = 0.7;
                            embossedEffect.Width = 0.002;
                            this.GrdEmboss.Effect = embossedEffect;
                            VisualStateManager.GoToState(this.btnEmboss, "Checked", true);
                            VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                            flag3 = true;
                            continue;
                        IL_2667:
                            if (!flag2)
                            {
                                SketchGraniteEffect sketchGraniteEffect = new SketchGraniteEffect();
                                sketchGraniteEffect.BrushSize = 0.005;
                                this.GrdSketchGranite.Effect = sketchGraniteEffect;
                                VisualStateManager.GoToState(this.btnEdgeDetect, "Checked", true);
                                VisualStateManager.GoToState(this.btnColorEffectsfilters, "Checked", true);
                                flag3 = true;
                            }
                            else
                            {
                                this.GrdSketchGranite.Effect = null;
                                this._granite = "0";
                                if (false)
                                {
                                    goto IL_253F;
                                }
                                VisualStateManager.GoToState(this.btnEdgeDetect, "Unhecked", true);
                            }
                            continue;
                        IL_262F:
                            flag3 = arg_262F_0;
                        }
                    }
                }
                if (!flag3)
                {
                    VisualStateManager.GoToState(this.btnColorEffectsfilters, "Unchecked", true);
                }
                if (flag)
                {
                    VisualStateManager.GoToState(this.btnColorEffects, "Checked", true);
                }
                else
                {
                    VisualStateManager.GoToState(this.btnColorEffects, "Unchecked", true);
                }
                this.zoomTransform = new ScaleTransform();
                if (this.FlipMode == 0 && this.FlipModeY == 0)
                {
                    VisualStateManager.GoToState(this.btnflip, "Unchecked", true);
                }
            }
            catch (Exception var_25_2967)
            {
            }
            finally
            {
            }
        }

        private void LogOperation(LogObject objOperation)
        {
            try
            {
                this.SerialLog.Push(objOperation);
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void lstBackground_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            if (2 == 0)
            {
                goto IL_18;
            }
            bool arg_14_0;
            bool arg_4B_0 = arg_14_0 = (this.lstBackground.Visibility == Visibility.Collapsed);
            if (false)
            {
                goto IL_4B;
            }
            int arg_14_1 = 0;
        IL_14:
            bool flag = (arg_14_0 ? 1 : 0) == arg_14_1;
        IL_18:
            bool arg_1A_0 = flag;
            while (arg_1A_0)
            {
                if (false)
                {
                IL_25:
                    this.IsbtnBackgroundWithoutChroma = false;
                    return;
                }
                int expr_3D = (arg_14_0 = (this.lstBackground.Visibility == Visibility.Visible)) ? 1 : 0;
                int expr_40 = arg_14_1 = 0;
                if (expr_40 != 0)
                {
                    goto IL_14;
                }
                bool expr_43 = arg_1A_0 = (expr_3D == expr_40);
                if (!false)
                {
                    flag = expr_43;
                    arg_4B_0 = flag;
                    goto IL_4B;
                }
            }
            this.IsBtnBackgroundClicked = false;
        //goto IL_25;
        IL_4B:
            if (!arg_4B_0)
            {
                this.IsBtnBackgroundClicked = true;
            }
        }

        private void lstStrip_ScrollChanged(object sender, ScrollChangedEventArgs e)
        {
            this.SetLastVisibleIndex();
        }

        private void lstStrip_VisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            bool flag;
            if (!false)
            {
                if (-1 == 0)
                {
                    goto IL_19;
                }
                flag = !(bool)e.NewValue;
            }
        IL_15:
            if (flag)
            {
                if (5 != 0)
                {
                    UIElement expr_3F = this.btnPreviousimg;
                    Visibility expr_44 = Visibility.Collapsed;
                    if (3 != 0)
                    {
                        expr_3F.Visibility = expr_44;
                    }
                    this.btnNextsimg.Visibility = Visibility.Collapsed;
                    return;
                }
                goto IL_32;
            }
        IL_19:
            if (false)
            {
                goto IL_15;
            }
            this.btnPreviousimg.Visibility = Visibility.Visible;
            this.btnNextsimg.Visibility = Visibility.Visible;
        IL_32:
            if (!false)
            {
            }
        }

        private void mainImage_MouseDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (4 == 0)
                {
                    goto IL_26;
                }
                bool arg_0D_0 = e.LeftButton == MouseButtonState.Released;
                bool expr_38;
                do
                {
                    bool flag = !arg_0D_0;
                    expr_38 = (arg_0D_0 = flag);
                }
                while (2 == 0);
                if (expr_38)
                {
                    goto IL_25;
                }
            IL_18:
                if (8 != 0)
                {
                    this.IsSelectedMainImage = true;
                }
            IL_25:
            IL_26:
                if (7 == 0)
                {
                    goto IL_18;
                }
            }
            catch (Exception serviceException)
            {
                string message;
                do
                {
                    message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                }
                while (false);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        //    ///////////////////  Rectangle Test  /////////////////////

        //private  bool captured = false;
        //private double x_shape, x_canvas, y_shape, y_canvas;
        //UIElement source = null;

        //private bool _isDragging = false;
        //private System.Windows.Point _anchorPoint = new System.Windows.Point();



        //    ///////////////////  Test End /////////////////////
        /* 2/5/2018 
        private void mainImage_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            ///////////////////////  Test  //////

            _anchorPoint.X = e.GetPosition(this.mainImage).X;
            _anchorPoint.Y = e.GetPosition(this.mainImage).Y;
            _isDragging = true;
            //////////////  End ////////////

            int arg_2E4_0;
            if (this.shapeToRemove != null)
            {
                arg_2E4_0 = ((!this.MyInkCanvas.Children.Contains(this.shapeToRemove)) ? 1 : 0);
            }
            else
            {
                arg_2E4_0 = 1;
            }
        IL_2E:
            if (arg_2E4_0 != 0)
            {
                goto IL_1D0;
            }
            if (false)
            {
                goto IL_20F;
            }
            this.shapeToRemove.Opacity = 1.0;
            bool arg_76_0;
            bool arg_281_0 = arg_76_0 = (this.shapeToRemove is System.Windows.Shapes.Rectangle);
            if (4 == 0)
            {
                goto IL_281;
            }
            int arg_76_1 = 0;
        IL_76:
            if ((arg_76_0 ? 1 : 0) == arg_76_1)
            {
                goto IL_121;
            }
        System.Windows.Shapes.Rectangle rectangle = new System.Windows.Shapes.Rectangle();
            System.Windows.Media.Color color = System.Windows.Media.Colors.LimeGreen;
        IL_8C:
            rectangle.Fill = new SolidColorBrush(color);
        rectangle.Width = ((System.Windows.Shapes.Rectangle)this.shapeToRemove).Width;
        rectangle.Height = ((System.Windows.Shapes.Rectangle)this.shapeToRemove).Height;
            rectangle.SetValue(InkCanvas.LeftProperty, ((System.Windows.Shapes.Rectangle)this.shapeToRemove).GetValue(InkCanvas.LeftProperty));
            rectangle.SetValue(InkCanvas.TopProperty, ((System.Windows.Shapes.Rectangle)this.shapeToRemove).GetValue(InkCanvas.TopProperty));
            this.MyInkCanvas.Children.Add(rectangle);
            goto IL_1C9;
        IL_121:
            Ellipse ellipse = new Ellipse();
        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
            ellipse.Fill = new SolidColorBrush(color);
            ellipse.Width = ((Ellipse)this.shapeToRemove).Width;
            ellipse.Height = ((Ellipse)this.shapeToRemove).Height;
            ellipse.SetValue(InkCanvas.LeftProperty, ((Ellipse)this.shapeToRemove).GetValue(InkCanvas.LeftProperty));
            ellipse.SetValue(InkCanvas.TopProperty, ((Ellipse)this.shapeToRemove).GetValue(InkCanvas.TopProperty));
            this.MyInkCanvas.Children.Add(ellipse);
        IL_1C9:
            if (false)
            {
                goto IL_270;
            }
        IL_1D0:
            this.ptnred = e.GetPosition(this.mainImage);
            bool flag = !this.move;
            bool expr_1EC = (arg_2E4_0 = (flag ? 1 : 0)) != 0;
            if (8 == 0)
            {
                goto IL_2E;
            }
            if (!expr_1EC)
            {
                this.move = false;
            }
            else
            {
                if (false)
                {
                    goto IL_8C;
                }
                this.move = true;
            }
        IL_20F:
            if (this.IsEraserActive)
            {
            }
            bool arg_27D_0;
            int expr_21F = (arg_76_0 = (arg_27D_0 = this.IsEraserDrawRectangleActive)) ? 1 : 0;
            int arg_277_0;
            int expr_225 = arg_277_0 = 0;
            if (expr_225 != 0)
            {
                goto IL_277;
            }
            if (expr_21F != expr_225)
            {
                this.drawX = (int)e.GetPosition(this.mainImage).X;
                this.drawY = (int)e.GetPosition(this.mainImage).Y;
                if (!false)
                {
                    return;
                }
                goto IL_121;
            }
        IL_270:
            arg_27D_0 = (arg_76_0 = this.IsEraserDrawEllipseActive);
            arg_277_0 = 0;
        IL_277:
            int expr_277 = arg_76_1 = arg_277_0;
            if (expr_277 != 0)
            {
                goto IL_76;
            }
            flag = ((arg_27D_0 ? 1 : 0) == expr_277);
            arg_281_0 = flag;
        IL_281:
            if (!arg_281_0)
            {
                this.drawX = (int)e.GetPosition(this.mainImage).X;
                this.drawY = (int)e.GetPosition(this.mainImage).Y;
            }
        }

       
        private void mainImage_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            try
            {                
                bool expr_10 = e.LeftButton != MouseButtonState.Released;
                bool flag;
                if (!false)
                {
                    flag = expr_10;
                }
                if (!flag)
                {
                    this.IsSelectedMainImage = true;
                    this.elementForContextMenu = null;
                    RotateTransform rotateTransform = this.GrdBrightness.GetValue(UIElement.RenderTransformProperty) as RotateTransform;
                    flag = (rotateTransform == null);
                    if (!flag)
                    {
                        this.jrotate.Angle = rotateTransform.Angle;
                    }
                    else
                    {
                        if (false)
                        {
                            goto IL_5C1;
                        }
                        this.jrotate.Angle = 0.0;
                    }
                    IEnumerator enumerator = this.dragCanvas.Children.GetEnumerator();
                    try
                    {
                        while (true)
                        {
                            flag = enumerator.MoveNext();
                            if (!flag)
                            {
                                break;
                            }
                            object current = enumerator.Current;
                            flag = !(current is TextBox);
                            if (!flag)
                            {
                                TextBox textBox = (TextBox)current;
                                textBox.Style = (Style)base.FindResource("GumballText");
                            }
                        }
                    }
                    catch(Exception serviceException)
                        {
                        string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                        }

                    finally
                    {
                        IDisposable disposable = enumerator as IDisposable;
                        flag = (disposable == null);
                        if (!flag)
                        {
                            disposable.Dispose();
                        }
                    }
                }
                this.mainImage.ReleaseMouseCapture();
                if (5 == 0)
                {
                    goto IL_59B;
                }
                double arg_1F0_0;
                double arg_1F0_1;
                bool arg_15E_0;
                if (this.MyInkCanvas.Children.Contains(this.shapeToRemove))
                {
                    double expr_144 = arg_1F0_0 = this.shapeToRemove.Opacity;
                    double expr_149 = arg_1F0_1 = 1.0;
                    if (-1 == 0)
                    {
                        goto IL_1F0;
                    }
                    arg_15E_0 = (expr_144 == expr_149);
                }
                else
                {
                    arg_15E_0 = true;
                }
                flag = arg_15E_0;
                if (!flag)
                {
                    this.MyInkCanvas.Children.Remove(this.shapeToRemove);
                }
                else
                {
                    this.shapeToRemove = null;
                }
                int num = (int)e.MouseDevice.GetPosition(this.mainImage).X;
                int num2 = (int)e.MouseDevice.GetPosition(this.mainImage).Y;
                double num3 = this.forWdht.Width / this.mainImage.ActualWidth;
                arg_1F0_0 = this.forWdht.Height;
                arg_1F0_1 = this.mainImage.ActualHeight;
            IL_1F0:
                double num4 = arg_1F0_0 / arg_1F0_1;
                this.drawX = (int)((double)this.drawX * num3);
                num = (int)((double)num * num3);
                // this.drawY = (int)((double)this.drawY * num4); vikas
                this.drawY = (int)((double)this.drawY * num4 > 1 ? 1 : 0);
                num2 = (int)((double)num2 * num4);
                System.Windows.Shapes.Rectangle rectangle =null;
                System.Windows.Media.Color color;
                if (-1 != 0)
                {
                    flag = !this.IsEraserDrawRectangleActive;
                    if (flag)
                    {
                        flag = !this.IsEraserDrawEllipseActive;
                        goto IL_4AB;
                    }
                    flag = (e.MouseDevice.LeftButton != MouseButtonState.Released && e.MouseDevice.RightButton != MouseButtonState.Released);
                    if (flag)
                    {
                        goto IL_49A;
                    }
                    this.mainImageundo.Visibility = Visibility.Hidden;
                    rectangle = new System.Windows.Shapes.Rectangle();
                    rectangle.Width = (double)Math.Abs(num - this.drawX);
                    rectangle.Height = (double)Math.Abs(num2 - this.drawY);
                    color = System.Windows.Media.Colors.LimeGreen;
                    rectangle.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                }
                rectangle.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
                rectangle.Fill = new SolidColorBrush(color);
                StrokeCollection strokeCollection = new StrokeCollection();
                StylusPointCollection stylusPointCollection = new StylusPointCollection();
                DrawingAttributes drawingAttributes = new DrawingAttributes();
                drawingAttributes.Color = color;
                drawingAttributes.StylusTip = StylusTip.Rectangle;
                drawingAttributes.FitToCurve = true;
                drawingAttributes.Height = rectangle.Height;
                drawingAttributes.Width = rectangle.Width;
                rectangle.SnapsToDevicePixels = true;
                this.MyInkCanvas.SnapsToDevicePixels = true;
                rectangle.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                double num5 = 0.0;
                bool arg_398_0 = num > this.drawX;
                int arg_398_1 = 0;
            IL_398:
                flag = ((arg_398_0 ? 1 : 0) == arg_398_1);
                if (!flag)
                {
                    rectangle.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                    num5 = (double)this.drawX;
                }
                else
                {
                    rectangle.SetValue(InkCanvas.LeftProperty, (double)num);
                    num5 = (double)num;
                }
                flag = (num2 <= this.drawY);
                double num6;
                if (flag)
                {
                    rectangle.SetValue(InkCanvas.TopProperty, (double)num2);
                    num6 = (double)num2;
                    goto IL_43B;
                }
                else
                    {
                    // vikas
                    rectangle.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                    num6 = (double)this.drawY;
                    goto IL_43B;
                    }

               // rectangle.SetValue(InkCanvas.TopProperty, (double)this.drawY);

                if (3 == 0)
                {
                    goto IL_4AB;
                }
                double arg_41A_0 = (double)this.drawY;
            IL_41A:
                num6 = arg_41A_0;
            IL_43B:
                stylusPointCollection.Add(new StylusPoint(num5 + rectangle.Width / 2.0, num6 + rectangle.Height / 2.0));
                strokeCollection.Add(new Stroke(stylusPointCollection, drawingAttributes));
                this.MyInkCanvas.Strokes.Add(new StrokeCollection(strokeCollection));
            IL_49A:
                goto IL_71A;
            IL_4AB:
                if (flag)
                {
                    goto IL_71A;
                }
                flag = (e.MouseDevice.LeftButton != MouseButtonState.Released && e.MouseDevice.RightButton != MouseButtonState.Released);
                if (flag)
                {
                    goto IL_719;
                }
                Ellipse ellipse = new Ellipse();
                ellipse.Width = (double)Math.Abs(num - this.drawX);
                ellipse.Height = (double)Math.Abs(num2 - this.drawY);
                ellipse.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                ellipse.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
                color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
                ellipse.Fill = new SolidColorBrush(color);
            IL_55B:
                strokeCollection = new StrokeCollection();
                stylusPointCollection = new StylusPointCollection();
                drawingAttributes = new DrawingAttributes();
                drawingAttributes.Color = color;
                drawingAttributes.StylusTip = StylusTip.Ellipse;
                drawingAttributes.FitToCurve = true;
                drawingAttributes.Height = ellipse.Height;
            IL_59B:
                drawingAttributes.Width = ellipse.Width;
                ellipse.SnapsToDevicePixels = true;
                this.MyInkCanvas.SnapsToDevicePixels = true;
            IL_5C1:
                ellipse.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                double expr_5EB = arg_41A_0 = 0.0;
                if (false)
                {
                    goto IL_41A;
                }
                num5 = expr_5EB;
                flag = (num <= this.drawX);
                if (!flag)
                {
                    ellipse.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                    num5 = (double)this.drawX;
                }
                else
                {
                    ellipse.SetValue(InkCanvas.LeftProperty, (double)num);
                    num5 = (double)num;
                }
                int expr_661 = (arg_398_0 = (num2 > this.drawY)) ? 1 : 0;
                int expr_664 = arg_398_1 = 0;
                if (expr_664 != 0)
                {
                    goto IL_398;
                }
                flag = (expr_661 == expr_664);
                if (!flag)
                {
                    if (false)
                    {
                        goto IL_55B;
                    }
                    ellipse.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                    num6 = (double)this.drawY;
                }
                else
                {
                    ellipse.SetValue(InkCanvas.TopProperty, (double)num2);
                    num6 = (double)num2;
                }
                stylusPointCollection.Add(new StylusPoint(num5 + ellipse.Width / 2.0, num6 + ellipse.Height / 2.0));
                strokeCollection.Add(new Stroke(stylusPointCollection, drawingAttributes));
                this.MyInkCanvas.Strokes.Add(new StrokeCollection(strokeCollection));
            IL_719:
            IL_71A: ;
            }
            catch (Exception serviceException)
            {
                if (!false)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
        }

        private void mainImage_MouseMove_1 ( object sender, MouseEventArgs e )
            {
            if(_isDragging)
                {
                double x = e.GetPosition(this.mainImage).X;
                double y = e.GetPosition(this.mainImage).Y;

                double h = 0;
                double w = 0;

                RectTest.Stroke = new SolidColorBrush(System.Windows.Media.Colors.Orange);
                RectTest.Fill = new SolidColorBrush(System.Windows.Media.Colors.Transparent);
                RectTest.SetValue(Canvas.LeftProperty, Math.Min(x, _anchorPoint.X));
                RectTest.SetValue(Canvas.TopProperty, Math.Min(y, _anchorPoint.Y));

                RectTest.Width = Math.Abs(x - _anchorPoint.X);
                RectTest.Height = Math.Abs(y - _anchorPoint.Y);
                w = RectTest.Width;
                h = RectTest.Height;
                this.EraserRectangleFill(w, h);
                if(RectTest.Visibility != Visibility.Visible)
                    RectTest.Visibility = Visibility.Visible;
                return;
                }
            try
                {
                int arg_88C_0;
                if(this.SetRedeye)
                    {
                    if(this.move)
                        {
                        this.pos = e.GetPosition(this.mainImage);
                        this.getredeyezoom(this.pos);
                        bool flag = this.redeffectfirstApplied;
                        while(flag)
                            {
                            if(!this.redeffectsecondApplied)
                                {
                                this.redEyeEffectSecond.RedeyeTrue = 0.0;
                                if(2 == 0)
                                    {
                                    goto IL_AA0;
                                    }
                                this.redEyeEffectSecond.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                this.redEyeEffectSecond.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                this.GrdRedEyeSecond.Effect = this.redEyeEffectSecond;
                                }
                            else
                                {
                                flag = this.redeffectmultiple1Applied;
                                if(!true)
                                    {
                                    continue;
                                    }
                                if(!flag)
                                    {
                                    this.redEyeEffectMultiple.RedeyeTrue = 0.0;
                                    this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                    this.redEyeEffectMultiple.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                    this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                    }
                                else
                                    {
                                    if(!this.redeffectmultiple2Applied)
                                        {
                                        this.redEyeEffectMultiple.RedeyeTrue1 = 0.0;
                                        }
                                    else if(!this.redeffectmultiple3Applied)
                                        {
                                        this.redEyeEffectMultiple.RedeyeTrue2 = 0.0;
                                        bool expr_3AA = (arg_88C_0 = ((this.redEyeEffectMultiple.Radius2 == 0.0) ? 1 : 0)) != 0;
                                        if(5 != 0)
                                            {
                                            if(expr_3AA)
                                                {
                                                this.redEyeEffectMultiple.Radius2 = ContantValueForMainWindow.RedEyeSize;
                                                }
                                            this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                            this.redEyeEffectMultiple.Center2 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                            this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                            goto IL_6D8;
                                            }
                                        goto IL_886;
                                        }
                                    else
                                        {
                                        if(!this.redeffectmultiple4Applied)
                                            {
                                            this.redEyeEffectMultiple1.RedeyeTrue = 0.0;
                                            this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                            this.redEyeEffectMultiple1.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                            this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                            goto IL_6D8;
                                            }
                                        if(!this.redeffectmultiple5Applied)
                                            {
                                            this.redEyeEffectMultiple1.RedeyeTrue1 = 0.0;
                                            if(this.redEyeEffectMultiple1.Radius1 == 0.0)
                                                {
                                                if(false)
                                                    {
                                                    goto IL_2B1;
                                                    }
                                                this.redEyeEffectMultiple1.Radius1 = ContantValueForMainWindow.RedEyeSize;
                                                }
                                            this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                            this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                            this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                            goto IL_6D8;
                                            }
                                        if(!this.redeffectmultiple6Applied)
                                            {
                                            this.redEyeEffectMultiple1.RedeyeTrue2 = 0.0;
                                            if(this.redEyeEffectMultiple1.Radius2 == 0.0)
                                                {
                                                this.redEyeEffectMultiple1.Radius2 = ContantValueForMainWindow.RedEyeSize;
                                                }
                                            this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                            this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                            this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                            goto IL_6D8;
                                            }
                                        goto IL_6D8;
                                        }
                                    IL_2B1:
                                    if(this.redEyeEffectMultiple.Radius1 == 0.0)
                                        {
                                        this.redEyeEffectMultiple.Radius1 = ContantValueForMainWindow.RedEyeSize;
                                        }
                                    this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                    this.redEyeEffectMultiple.Center1 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                    this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                    }
                                }
                            IL_6D8:
                            goto IL_6D9;
                            }
                        this.redEyeEffect.RedeyeTrue = 0.0;
                        this.redEyeEffect.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                        this.redEyeEffect.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                        this.GrdRedEyeFirst.Effect = this.redEyeEffect;
                        }
                    IL_6D9:;
                    }
                if(this.IsEraserActive)
                    {
                    System.Windows.Point position = e.GetPosition(this.mainImage);
                    double num = position.X;
                    double num2 = position.Y;
                    this.greenEraser.Margin = new Thickness(num + 1.0, num2 + 1.0, 0.0, 0.0);
                    }
                int num3 = (int)e.MouseDevice.GetPosition(this.mainImage).X;
                int num4 = (int)e.MouseDevice.GetPosition(this.mainImage).Y;
                bool arg_79C_0;
                System.Windows.Media.Color color;
                if(this.IsEraserDrawRectangleActive)
                    {
                    arg_79C_0 = (e.MouseDevice.LeftButton == MouseButtonState.Pressed);
                    }
                else
                    {
                    if(!this.IsEraserDrawEllipseActive)
                        {
                        goto IL_AA1;
                        }
                    if(e.MouseDevice.LeftButton == MouseButtonState.Pressed)
                        {
                        Ellipse ellipse = new Ellipse();
                        if(this.shapeToRemove != null)
                            {
                            ellipse = (this.shapeToRemove as Ellipse);
                            }
                        if(ellipse == null)
                            {
                            ellipse = new Ellipse();
                            }
                        ellipse.Opacity = 0.3;
                        ellipse.Width = (double)Math.Abs(num3 - this.drawX);
                        ellipse.Height = (double)Math.Abs(num4 - this.drawY);
                        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
                        ellipse.Fill = new SolidColorBrush(color);
                        if(num3 > this.drawX)
                            {
                            ellipse.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                            }
                        else
                            {
                            ellipse.SetValue(InkCanvas.LeftProperty, (double)num3);
                            }
                        if(num4 > this.drawY)
                            {
                            ellipse.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                            }
                        else
                            {
                            ellipse.SetValue(InkCanvas.TopProperty, (double)num4);
                            }
                        this.shapeToRemove = ellipse;
                        if(!this.MyInkCanvas.Children.Contains(this.shapeToRemove))
                            {
                            this.MyInkCanvas.Children.Add(this.shapeToRemove);
                            }
                        goto IL_AA0;
                        }
                    goto IL_AA0;
                    }
                IL_79B:
                if(!arg_79C_0)
                    {
                    goto IL_90D;
                    }
                System.Windows.Shapes.Rectangle rectangle = new System.Windows.Shapes.Rectangle();
                if(this.shapeToRemove != null)
                    {
                    rectangle = (this.shapeToRemove as System.Windows.Shapes.Rectangle);
                    }
                if(rectangle == null)
                    {
                    rectangle = new System.Windows.Shapes.Rectangle();
                    }
                rectangle.Opacity = 0.3;
                rectangle.Width = (double)Math.Abs(num3 - this.drawX);
                rectangle.Height = (double)Math.Abs(num4 - this.drawY);
                color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
                rectangle.Fill = new SolidColorBrush(color);
                if(num3 > this.drawX)
                    {
                    rectangle.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                    }
                else
                    {
                    rectangle.SetValue(InkCanvas.LeftProperty, (double)num3);
                    }
                arg_88C_0 = num4;
                IL_886:
                if(arg_88C_0 > this.drawY)
                    {
                    rectangle.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                    }
                else
                    {
                    rectangle.SetValue(InkCanvas.TopProperty, (double)num4);
                    }
                this.shapeToRemove = rectangle;
                this.mainImage.Focus();  // added by vikas
                bool expr_8E4 = arg_79C_0 = this.MyInkCanvas.Children.Contains(this.shapeToRemove);
                if(false)
                    {
                    goto IL_79B;
                    }
                if(!expr_8E4)
                    {
                    this.MyInkCanvas.Children.Add(this.shapeToRemove);
                    }
                IL_90D:
                IL_AA0:
                IL_AA1:;
                }
            catch(Exception serviceException)
                {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            finally
                {
                this.mainImage.Focus();
                }
            }
        */


        //private void mainImage_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        //{
        //    try
        //    {
        //        int arg_2E4_0;
        //        if (this.shapeToRemove != null)
        //        {
        //            arg_2E4_0 = ((!this.MyInkCanvas.Children.Contains(this.shapeToRemove)) ? 1 : 0);
        //        }
        //        else
        //        {
        //            arg_2E4_0 = 1;
        //        }
        //        IL_2E:
        //        if (arg_2E4_0 != 0)
        //        {
        //            goto IL_1D0;
        //        }
        //        if (false)
        //        {
        //            goto IL_20F;
        //        }
        //        this.shapeToRemove.Opacity = 1.0;
        //        bool arg_76_0;
        //        bool arg_281_0 = arg_76_0 = (this.shapeToRemove is System.Windows.Shapes.Rectangle);
        //        if (4 == 0)
        //        {
        //            goto IL_281;
        //        }
        //        int arg_76_1 = 0;
        //        IL_76:
        //        if ((arg_76_0 ? 1 : 0) == arg_76_1)
        //        {
        //            goto IL_121;
        //        }
        //        System.Windows.Shapes.Rectangle rectangle = new System.Windows.Shapes.Rectangle();
        //        System.Windows.Media.Color color = System.Windows.Media.Colors.LimeGreen;
        //        IL_8C:
        //        rectangle.Fill = new SolidColorBrush(color);
        //        rectangle.Width = ((System.Windows.Shapes.Rectangle)this.shapeToRemove).Width;
        //        rectangle.Height = ((System.Windows.Shapes.Rectangle)this.shapeToRemove).Height;
        //        rectangle.SetValue(InkCanvas.LeftProperty, ((System.Windows.Shapes.Rectangle)this.shapeToRemove).GetValue(InkCanvas.LeftProperty));
        //        rectangle.SetValue(InkCanvas.TopProperty, ((System.Windows.Shapes.Rectangle)this.shapeToRemove).GetValue(InkCanvas.TopProperty));
        //        this.MyInkCanvas.Children.Add(rectangle);
        //        goto IL_1C9;
        //        IL_121:
        //        Ellipse ellipse = new Ellipse();
        //        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
        //        ellipse.Fill = new SolidColorBrush(color);
        //        ellipse.Width = ((Ellipse)this.shapeToRemove).Width;
        //        ellipse.Height = ((Ellipse)this.shapeToRemove).Height;
        //        ellipse.SetValue(InkCanvas.LeftProperty, ((Ellipse)this.shapeToRemove).GetValue(InkCanvas.LeftProperty));
        //        ellipse.SetValue(InkCanvas.TopProperty, ((Ellipse)this.shapeToRemove).GetValue(InkCanvas.TopProperty));
        //        this.MyInkCanvas.Children.Add(ellipse);
        //        IL_1C9:
        //        if (false)
        //        {
        //            goto IL_270;
        //        }
        //        IL_1D0:
        //        this.ptnred = e.GetPosition(this.mainImage);
        //        bool flag = !this.move;
        //        bool expr_1EC = (arg_2E4_0 = (flag ? 1 : 0)) != 0;
        //        if (8 == 0)
        //        {
        //            goto IL_2E;
        //        }
        //        if (!expr_1EC)
        //        {
        //            this.move = false;
        //        }
        //        else
        //        {
        //            if (false)
        //            {
        //                goto IL_8C;
        //            }
        //            this.move = true;
        //        }
        //        IL_20F:
        //        if (this.IsEraserActive)
        //        {
        //        }
        //        bool arg_27D_0;
        //        int expr_21F = (arg_76_0 = (arg_27D_0 = this.IsEraserDrawRectangleActive)) ? 1 : 0;
        //        int arg_277_0;
        //        int expr_225 = arg_277_0 = 0;
        //        if (expr_225 != 0)
        //        {
        //            goto IL_277;
        //        }
        //        if (expr_21F != expr_225)
        //        {
        //            this.drawX = (int)e.GetPosition(this.mainImage).X;
        //            this.drawY = (int)e.GetPosition(this.mainImage).Y;
        //            if (!false)
        //            {
        //                return;
        //            }
        //            goto IL_121;
        //        }
        //        IL_270:
        //        arg_27D_0 = (arg_76_0 = this.IsEraserDrawEllipseActive);
        //        arg_277_0 = 0;
        //        IL_277:
        //        int expr_277 = arg_76_1 = arg_277_0;
        //        if (expr_277 != 0)
        //        {
        //            goto IL_76;
        //        }
        //        flag = ((arg_27D_0 ? 1 : 0) == expr_277);
        //        arg_281_0 = flag;
        //        IL_281:
        //        if (!arg_281_0)
        //        {
        //            this.drawX = (int)e.GetPosition(this.mainImage).X;
        //            this.drawY = (int)e.GetPosition(this.mainImage).Y;
        //        }

        //    }
        //    catch (Exception ex)
        //    {

        //    }
        //}



        private void CursorChange(object sender, MouseEventArgs e)
        {
            this.MyInkCanvas.Cursor = Cursors.Arrow;
        }

        private void CheckStartEndPoint(object sender, MouseButtonEventArgs e)
        {

            if ((Math.Round(InkCanvas.GetLeft((UIElement)sender) + 1.5) == Math.Round(this.StartPointPoly.X)) && Math.Round(InkCanvas.GetTop((UIElement)sender) + 1.5) == Math.Round(this.StartPointPoly.Y))
            {
                DrawingLineToJoinStarEndPoint();
                CreatePolyBezierSegment(this.AllPenPoint);
                if (uIElementCollectionRect != null)
                {
                    foreach (UIElement item in uIElementCollectionRect)
                    {
                        MyInkCanvas.Children.Remove(item);
                    }
                }
                if (uIElementCollectionLine != null)
                {
                    foreach (UIElement item in uIElementCollectionLine)
                    {
                        MyInkCanvas.Children.Remove(item);
                    }
                }
                StartPointPoly = new System.Windows.Point();
                EndPointPoly = new System.Windows.Point();

            }

        }

        //private void mainImage_MouseLeftButtonUp(object sender, MouseEventArgs e)
        //{
        //    try
        //    {

        //        bool expr_10 = e.LeftButton != MouseButtonState.Released;
        //        bool flag;
        //        if (!false)
        //        {
        //            flag = expr_10;
        //        }
        //        if (!flag)
        //        {
        //            this.IsSelectedMainImage = true;
        //            this.elementForContextMenu = null;
        //            RotateTransform rotateTransform = this.GrdBrightness.GetValue(UIElement.RenderTransformProperty) as RotateTransform;
        //            flag = (rotateTransform == null);
        //            if (!flag)
        //            {
        //                this.jrotate.Angle = rotateTransform.Angle;
        //            }
        //            else
        //            {
        //                if (false)
        //                {
        //                    goto IL_5C1;
        //                }
        //                this.jrotate.Angle = 0.0;
        //            }
        //            IEnumerator enumerator = this.dragCanvas.Children.GetEnumerator();
        //            try
        //            {
        //                while (true)
        //                {
        //                    flag = enumerator.MoveNext();
        //                    if (!flag)
        //                    {
        //                        break;
        //                    }
        //                    object current = enumerator.Current;
        //                    flag = !(current is TextBox);
        //                    if (!flag)
        //                    {
        //                        TextBox textBox = (TextBox)current;
        //                        textBox.Style = (Style)base.FindResource("GumballText");
        //                    }
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //            }
        //            finally
        //            {
        //                IDisposable disposable = enumerator as IDisposable;
        //                flag = (disposable == null);
        //                if (!flag)
        //                {
        //                    disposable.Dispose();
        //                }
        //            }
        //        }
        //        this.mainImage.ReleaseMouseCapture();
        //        if (5 == 0)
        //        {
        //            goto IL_59B;
        //        }
        //        double arg_1F0_0;
        //        double arg_1F0_1;
        //        bool arg_15E_0;
        //        if (this.MyInkCanvas.Children.Contains(this.shapeToRemove))
        //        {
        //            double expr_144 = arg_1F0_0 = this.shapeToRemove.Opacity;
        //            double expr_149 = arg_1F0_1 = 1.0;
        //            if (-1 == 0)
        //            {
        //                goto IL_1F0;
        //            }
        //            arg_15E_0 = (expr_144 == expr_149);
        //        }
        //        else
        //        {
        //            arg_15E_0 = true;
        //        }
        //        flag = arg_15E_0;
        //        if (!flag)
        //        {
        //            this.MyInkCanvas.Children.Remove(this.shapeToRemove);
        //        }
        //        else
        //        {
        //            this.shapeToRemove = null;
        //        }
        //        int num = (int)e.MouseDevice.GetPosition(this.mainImage).X;
        //        int num2 = (int)e.MouseDevice.GetPosition(this.mainImage).Y;
        //        this.mouse_X = num;
        //        this.mouse_Y = num2;
        //        //double num3 = this.forWdht.Width / this.mainImage.ActualWidth;
        //        arg_1F0_0 = this.forWdht.Height;
        //        arg_1F0_1 = this.mainImage.ActualHeight;
        //        IL_1F0:
        //        double num4 = arg_1F0_0 / arg_1F0_1;
        //        this.drawX = (int)((double)this.drawX);// * num3);
        //        //num = (int)((double)num * num3);
        //        this.drawY = (int)((double)this.drawY);// * num4);
        //        //num2 = (int)((double)num2 * num4);
        //        System.Windows.Shapes.Rectangle rectangle = null;
        //        System.Windows.Media.Color color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#000000");
        //        ImageBrush imgBrush = new ImageBrush();
        //        if (-1 != 0)
        //        {
        //            flag = !this.IsEraserDrawRectangleActive;
        //            if (flag)
        //            {
        //                flag = !this.IsEraserDrawEllipseActive;
        //                goto IL_4AB;
        //            }
        //            flag = (e.MouseDevice.LeftButton != MouseButtonState.Released && e.MouseDevice.RightButton != MouseButtonState.Released);
        //            if (flag)
        //            {
        //                goto IL_49A;
        //            }
        //            this.mainImageundo.Visibility = Visibility.Visible;
        //            rectangle = new System.Windows.Shapes.Rectangle();
        //            rectangle.Width = (double)Math.Abs(num - this.drawX);
        //            rectangle.Height = (double)Math.Abs(num2 - this.drawY);
        //            //color = System.Windows.Media.Colors.LimeGreen;
        //            if (!IsKeepDrop)// && !boxErase)
        //            {
        //                color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColorDefault);
        //            }


        //            imgBrush.ImageSource = mainImage.Source;
        //            // Fill rectangle with an ImageBrush
        //            rectangle.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
        //            this.shapeToRemove.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
        //            this.MyInkCanvas.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
        //        }
        //        this.shapeToRemove.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
        //        rectangle.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
        //        this.MyInkCanvas.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);

        //        rectangle.MouseMove += new MouseEventHandler(this.mainImage_MouseMove_1);
        //        this.shapeToRemove.MouseMove += new MouseEventHandler(this.mainImage_MouseMove_1);
        //        if (!IsKeepDrop)// && !boxErase)
        //        {
        //            rectangle.Fill = new SolidColorBrush(color);
        //            rectangle.Stroke = new SolidColorBrush(System.Windows.Media.Colors.Orange);
        //        }

        //        StrokeCollection strokeCollection = new StrokeCollection();
        //        StylusPointCollection stylusPointCollection = new StylusPointCollection();
        //        DrawingAttributes drawingAttributes = new DrawingAttributes();
        //        if (!IsKeepDrop)// && !boxErase)
        //        {
        //            drawingAttributes.Color = color;
        //        }
        //        drawingAttributes.StylusTip = StylusTip.Rectangle;
        //        drawingAttributes.FitToCurve = true;
        //        drawingAttributes.Height = rectangle.Height;
        //        drawingAttributes.Width = rectangle.Width;
        //        if (!IsKeepDrop)// && !boxErase)
        //        {
        //            this.attribute.Color = System.Windows.Media.Colors.LightSlateGray;
        //        }

        //        rectangle.SnapsToDevicePixels = true;
        //        this.MyInkCanvas.SnapsToDevicePixels = true;
        //        rectangle.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
        //        this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
        //        double num5 = 0.0;
        //        bool arg_398_0 = num > this.drawX;
        //        int arg_398_1 = 0;
        //        IL_398:
        //        flag = ((arg_398_0 ? 1 : 0) == arg_398_1);
        //        if (!flag)
        //        {
        //            rectangle.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
        //            num5 = (double)this.drawX;
        //        }
        //        else
        //        {
        //            rectangle.SetValue(InkCanvas.LeftProperty, (double)num);
        //            num5 = (double)num;
        //        }
        //        flag = (num2 <= this.drawY);
        //        double num6;
        //        if (flag)
        //        {
        //            rectangle.SetValue(InkCanvas.TopProperty, (double)num2);
        //            num6 = (double)num2;
        //            goto IL_43B;
        //        }
        //        else
        //        {
        //            rectangle.SetValue(InkCanvas.TopProperty, (double)this.drawY);
        //            num6 = (double)this.drawY;
        //            goto IL_43B;
        //        }
        //        if (3 == 0)
        //        {
        //            goto IL_4AB;
        //        }
        //        double arg_41A_0 = (double)this.drawY;
        //        IL_41A:
        //        num6 = arg_41A_0;
        //        IL_43B:
        //        stylusPointCollection.Add(new StylusPoint(num5 + rectangle.Width / 2.0, num6 + rectangle.Height / 2.0));
        //        strokeCollection.Add(new Stroke(stylusPointCollection, drawingAttributes));
        //        this.MyInkCanvas.Strokes.Add(new StrokeCollection(strokeCollection));
        //        MyInkCanvas.Focus();
        //        IL_49A:
        //        goto IL_71A;
        //        IL_4AB:
        //        if (flag)
        //        {
        //            goto IL_71A;
        //        }
        //        flag = (e.MouseDevice.LeftButton != MouseButtonState.Released && e.MouseDevice.RightButton != MouseButtonState.Released);
        //        if (flag)
        //        {
        //            goto IL_719;
        //        }
        //        Ellipse ellipse = new Ellipse();
        //        ellipse.Width = (double)Math.Abs(num - this.drawX);
        //        ellipse.Height = (double)Math.Abs(num2 - this.drawY);
        //        ellipse.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
        //        ellipse.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
        //        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
        //        ellipse.Fill = new SolidColorBrush(color);
        //        IL_55B:
        //        strokeCollection = new StrokeCollection();
        //        stylusPointCollection = new StylusPointCollection();
        //        drawingAttributes = new DrawingAttributes();
        //        if (!IsKeepDrop)// && !boxErase)
        //        {
        //            drawingAttributes.Color = color;
        //        }

        //        drawingAttributes.StylusTip = StylusTip.Ellipse;
        //        drawingAttributes.FitToCurve = true;
        //        drawingAttributes.Height = ellipse.Height;
        //        IL_59B:
        //        drawingAttributes.Width = ellipse.Width;
        //        ellipse.SnapsToDevicePixels = true;
        //        this.MyInkCanvas.SnapsToDevicePixels = true;
        //        IL_5C1:
        //        ellipse.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
        //        this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
        //        double expr_5EB = arg_41A_0 = 0.0;
        //        if (false)
        //        {
        //            goto IL_41A;
        //        }
        //        num5 = expr_5EB;
        //        flag = (num <= this.drawX);
        //        if (!flag)
        //        {
        //            ellipse.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
        //            num5 = (double)this.drawX;
        //        }
        //        else
        //        {
        //            ellipse.SetValue(InkCanvas.LeftProperty, (double)num);
        //            num5 = (double)num;
        //        }
        //        int expr_661 = (arg_398_0 = (num2 > this.drawY)) ? 1 : 0;
        //        int expr_664 = arg_398_1 = 0;
        //        if (expr_664 != 0)
        //        {
        //            goto IL_398;
        //        }
        //        flag = (expr_661 == expr_664);
        //        if (!flag)
        //        {
        //            if (false)
        //            {
        //                goto IL_55B;
        //            }
        //            ellipse.SetValue(InkCanvas.TopProperty, (double)this.drawY);
        //            num6 = (double)this.drawY;
        //        }
        //        else
        //        {
        //            ellipse.SetValue(InkCanvas.TopProperty, (double)num2);
        //            num6 = (double)num2;
        //        }
        //        stylusPointCollection.Add(new StylusPoint(num5 + ellipse.Width / 2.0, num6 + ellipse.Height / 2.0));
        //        strokeCollection.Add(new Stroke(stylusPointCollection, drawingAttributes));
        //        this.MyInkCanvas.Strokes.Add(new StrokeCollection(strokeCollection));
        //        IL_719:
        //        IL_71A:
        //        this.mainImage.Focus();

        //    }
        //    catch (Exception serviceException)
        //    {
        //        if (!false)
        //        {
        //            string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
        //            ErrorHandler.ErrorHandler.LogFileWrite(message);
        //        }
        //    }
        //}
        private void mainImage_MouseLeftButtonUp(object sender, MouseEventArgs e)
        {
            try
            {
                if (IsCloneMainImage && IsCloneDragging)
                {

                    if (EndCloneCircle == null)
                    {
                        EndCloneCircle = new Ellipse();
                    }
                    EndCloneCircle.Height = 25;
                    EndCloneCircle.Width = 25;
                    EndCloneCircle.Stroke = new SolidColorBrush(Colors.LightGoldenrodYellow);
                    EndCloneCircle.StrokeThickness = 1;
                    if (!MyInkCanvas.Children.Contains(EndCloneCircle))
                    {
                        MyInkCanvas.Children.Add(EndCloneCircle);
                    }
                    //InkCanvas.SetLeft(StartCloneCircle, e.GetPosition(MyInkCanvas).X - 12.5);
                    //InkCanvas.SetTop(StartCloneCircle, e.GetPosition(MyInkCanvas).Y - 12.5);
                    InkCanvas.SetLeft(EndCloneCircle, StartPointClone.X - 12.5);
                    InkCanvas.SetTop(EndCloneCircle, StartPointClone.Y - 12.5);

                    // cloneimg.Source = this.mainImage.Source;

                    //MyInkCanvas.Children.Add(cloneimg);
                    MyInkCanvas.Children.Add(mainImage);
                    InkCanvas.SetTop(mainImage, e.GetPosition(MyInkCanvas).Y - StartPointClone.Y);
                    InkCanvas.SetLeft(mainImage, e.GetPosition(MyInkCanvas).X - StartPointClone.X);
                    EndCloneCircle.MouseLeftButtonDown -= new MouseButtonEventHandler(mainImage_MouseLeftButtonUp);
                    IsCloneDragging = false;
                    //   this.ApplyCloneEffectGrid();
                    return;
                }
                if (IsRectangle)
                {
                    bool expr_10 = e.LeftButton != MouseButtonState.Released;
                    bool flag;
                    if (!false)
                    {
                        flag = expr_10;
                    }
                    if (!flag)
                    {
                        this.IsSelectedMainImage = true;
                        this.elementForContextMenu = null;
                        RotateTransform rotateTransform = this.GrdBrightness.GetValue(UIElement.RenderTransformProperty) as RotateTransform;
                        flag = (rotateTransform == null);
                        if (!flag)
                        {
                            this.jrotate.Angle = rotateTransform.Angle;
                        }
                        else
                        {
                            if (false)
                            {
                                goto IL_5C1;
                            }
                            this.jrotate.Angle = 0.0;
                        }
                        //IEnumerator enumerator = this.dragCanvas.Children.GetEnumerator();
                        //try
                        //{
                        //    while (true)
                        //    {
                        //        flag = enumerator.MoveNext();
                        //        if (!flag)
                        //        {
                        //            break;
                        //        }
                        //        object current = enumerator.Current;
                        //        flag = !(current is TextBox);
                        //        if (!flag)
                        //        {
                        //            TextBox textBox = (TextBox)current;
                        //            textBox.Style = (Style)base.FindResource("GumballText");
                        //        }
                        //    }
                        //}
                        //catch (Exception ex)
                        //{
                        //}
                        //finally
                        //{
                        //    IDisposable disposable = enumerator as IDisposable;
                        //    flag = (disposable == null);
                        //    if (!flag)
                        //    {
                        //        disposable.Dispose();
                        //    }
                        //}
                    }
                    this.mainImage.ReleaseMouseCapture();
                    if (5 == 0)
                    {
                        goto IL_59B;
                    }
                    double arg_1F0_0;
                    double arg_1F0_1;
                    bool arg_15E_0;
                    if (this.MyInkCanvas.Children.Contains(this.shapeToRemove))
                    {
                        double expr_144 = arg_1F0_0 = this.shapeToRemove.Opacity;
                        double expr_149 = arg_1F0_1 = 1.0;
                        if (-1 == 0)
                        {
                            goto IL_1F0;
                        }
                        arg_15E_0 = (expr_144 == expr_149);
                    }
                    else
                    {
                        arg_15E_0 = true;
                    }
                    flag = arg_15E_0;
                    if (!flag)
                    {
                        this.MyInkCanvas.Children.Remove(this.shapeToRemove);
                    }
                    else
                    {
                        this.shapeToRemove = null;
                    }
                    int num = (int)e.MouseDevice.GetPosition(this.mainImage).X;
                    int num2 = (int)e.MouseDevice.GetPosition(this.mainImage).Y;
                    //double num3 = this.forWdht.Width / this.mainImage.ActualWidth;
                    arg_1F0_0 = this.forWdht.Height;
                    arg_1F0_1 = this.mainImage.ActualHeight;
                IL_1F0:
                    double num4 = arg_1F0_0 / arg_1F0_1;
                    this.drawX = (int)((double)this.drawX);// * num3);
                                                           //num = (int)((double)num * num3);
                    this.drawY = (int)((double)this.drawY);// * num4);
                                                           //num2 = (int)((double)num2 * num4);
                    System.Windows.Shapes.Rectangle rectangle = null;
                    System.Windows.Media.Color color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#000000");
                    //ImageBrush imgBrush = new ImageBrush();
                    if (-1 != 0)
                    {
                        flag = !this.IsEraserDrawRectangleActive;
                        if (flag)
                        {
                            flag = !this.IsEraserDrawEllipseActive;
                            goto IL_4AB;
                        }
                        flag = (e.MouseDevice.LeftButton != MouseButtonState.Released && e.MouseDevice.RightButton != MouseButtonState.Released);
                        if (flag)
                        {
                            goto IL_49A;
                        }
                        this.mainImageundo.Visibility = Visibility.Visible;
                        rectangle = new System.Windows.Shapes.Rectangle();
                        rectangle.Width = (double)Math.Abs(num - this.drawX);
                        rectangle.Height = (double)Math.Abs(num2 - this.drawY);
                        //color = System.Windows.Media.Colors.LimeGreen;
                        if (!IsKeepDrop)// && !boxErase)
                        {
                            color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColorDefault);
                        }


                        //imgBrush.ImageSource = mainImage.Source;
                        // Fill rectangle with an ImageBrush
                        //rectangle.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                        //this.shapeToRemove.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                        //this.MyInkCanvas.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                    }
                    //this.shapeToRemove.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
                    //rectangle.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
                    //this.MyInkCanvas.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);

                    //rectangle.MouseMove += new MouseEventHandler(this.mainImage_MouseMove_1);
                    //this.shapeToRemove.MouseMove += new MouseEventHandler(this.mainImage_MouseMove_1);
                    if (!IsKeepDrop)// && !boxErase)
                    {
                        rectangle.Fill = new SolidColorBrush(color);
                    }
                    else
                    {
                        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#282828");
                        rectangle.Fill = new SolidColorBrush(color);
                        //rectangle.Fill = new SolidColorBrush(Colors.LightSkyBlue);

                    }
                    rectangle.Opacity = 0.5;
                    StrokeCollection strokeCollection = new StrokeCollection();
                    StylusPointCollection stylusPointCollection = new StylusPointCollection();
                    DrawingAttributes drawingAttributes = new DrawingAttributes();
                    if (!IsKeepDrop)// && !boxErase)
                    {
                        drawingAttributes.Color = color;
                    }
                    else
                    {
                        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#282828");
                        drawingAttributes.Color = color;
                        //drawingAttributes.Color = Colors.LightSkyBlue;
                    }
                    drawingAttributes.StylusTip = StylusTip.Rectangle;
                    drawingAttributes.FitToCurve = true;
                    drawingAttributes.Height = rectangle.Height;
                    drawingAttributes.Width = rectangle.Width;
                    if (!IsKeepDrop)// && !boxErase)
                    {
                        this.attribute.Color = System.Windows.Media.Colors.LightSlateGray;
                    }
                    else
                    {
                        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#282828");

                        this.attribute.Color = color;
                    }

                    rectangle.SnapsToDevicePixels = true;
                    this.MyInkCanvas.SnapsToDevicePixels = true;
                    rectangle.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                    rectangle.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown_2);
                    rectangle.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp_2);
                    rectangle.MouseMove += new MouseEventHandler(this.mainImage_MouseMove_2);
                    this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                    double num5 = 0.0;
                    bool arg_398_0 = num > this.drawX;
                    int arg_398_1 = 0;
                IL_398:
                    flag = ((arg_398_0 ? 1 : 0) == arg_398_1);
                    if (!flag)
                    {
                        rectangle.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                        num5 = (double)this.drawX;
                    }
                    else
                    {
                        rectangle.SetValue(InkCanvas.LeftProperty, (double)num);
                        num5 = (double)num;
                    }
                    flag = (num2 <= this.drawY);
                    double num6;
                    if (flag)
                    {
                        rectangle.SetValue(InkCanvas.TopProperty, (double)num2);
                        num6 = (double)num2;
                        goto IL_43B;
                    }
                    else
                    {
                        rectangle.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                        num6 = (double)this.drawY;
                        goto IL_43B;
                    }
                    if (3 == 0)
                    {
                        goto IL_4AB;
                    }
                    double arg_41A_0 = (double)this.drawY;
                IL_41A:
                    num6 = arg_41A_0;
                IL_43B:
                    stylusPointCollection.Add(new StylusPoint(num5 + rectangle.Width / 2.0, num6 + rectangle.Height / 2.0));
                    strokeCollection.Add(new Stroke(stylusPointCollection, drawingAttributes));
                    this.MyInkCanvas.Strokes.Add(new StrokeCollection(strokeCollection));
                    //rectangle.Opacity = 1;
                    //this.MyInkCanvas.Children.Add(rectangle);
                    this.canbackgroundParent.Visibility = Visibility.Visible;
                //MyInkCanvas.Focus();
                //Rect testr = new Rect(Mouse.GetPosition(this.mainImage).X, Mouse.GetPosition(this.mainImage).Y, rectangle.Width, rectangle.Height);
                //testr.Inflate(rectangle.Width / 10, rectangle.Height / 10);

                //List<StrokeCollection> x = this.MyInkCanvas.Strokes.Select(s => s.GetClipResult(testr)).ToList();
                //using (var sequenceEnum = x.GetEnumerator())
                //{
                //    while (sequenceEnum.MoveNext())
                //    {
                //        //this.MyInkCanvas.Children.Remove((UIElement)sequenceEnum.Current);
                //        var a = sequenceEnum.Current;
                //        // Do something with sequenceEnum.Current.
                //    }
                //}
                //foreach (var rectangleViewModel in this.MyInkCanvas.Rectangles)
                //{
                //    Rect itemRect = new Rect(rectangleViewModel.X, rectangleViewModel.Y, rectangleViewModel.Width, rectangleViewModel.Height);
                //    if (dragRect.Contains(itemRect))
                //    {
                //        listBox.SelectedItems.Add(rectangleViewModel);
                //    }
                //}
                IL_49A:
                    goto IL_71A;
                IL_4AB:
                    if (flag)
                    {
                        goto IL_71A;
                    }
                    flag = (e.MouseDevice.LeftButton != MouseButtonState.Released && e.MouseDevice.RightButton != MouseButtonState.Released);
                    if (flag)
                    {
                        goto IL_719;
                    }
                    Ellipse ellipse = new Ellipse();
                    ellipse.Width = (double)Math.Abs(num - this.drawX);
                    ellipse.Height = (double)Math.Abs(num2 - this.drawY);
                    ellipse.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                    ellipse.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
                    color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
                    ellipse.Fill = new SolidColorBrush(color);
                IL_55B:
                    strokeCollection = new StrokeCollection();
                    stylusPointCollection = new StylusPointCollection();
                    drawingAttributes = new DrawingAttributes();
                    if (!IsKeepDrop)// && !boxErase)
                    {
                        drawingAttributes.Color = color;
                    }

                    drawingAttributes.StylusTip = StylusTip.Ellipse;
                    drawingAttributes.FitToCurve = true;
                    drawingAttributes.Height = ellipse.Height;
                IL_59B:
                    drawingAttributes.Width = ellipse.Width;
                    ellipse.SnapsToDevicePixels = true;
                    this.MyInkCanvas.SnapsToDevicePixels = true;
                IL_5C1:
                    ellipse.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                    this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                    double expr_5EB = arg_41A_0 = 0.0;
                    if (false)
                    {
                        goto IL_41A;
                    }
                    num5 = expr_5EB;
                    flag = (num <= this.drawX);
                    if (!flag)
                    {
                        ellipse.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                        num5 = (double)this.drawX;
                    }
                    else
                    {
                        ellipse.SetValue(InkCanvas.LeftProperty, (double)num);
                        num5 = (double)num;
                    }
                    int expr_661 = (arg_398_0 = (num2 > this.drawY)) ? 1 : 0;
                    int expr_664 = arg_398_1 = 0;
                    if (expr_664 != 0)
                    {
                        goto IL_398;
                    }
                    flag = (expr_661 == expr_664);
                    if (!flag)
                    {
                        if (false)
                        {
                            goto IL_55B;
                        }
                        ellipse.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                        num6 = (double)this.drawY;
                    }
                    else
                    {
                        ellipse.SetValue(InkCanvas.TopProperty, (double)num2);
                        num6 = (double)num2;
                    }
                    stylusPointCollection.Add(new StylusPoint(num5 + ellipse.Width / 2.0, num6 + ellipse.Height / 2.0));
                    strokeCollection.Add(new Stroke(stylusPointCollection, drawingAttributes));
                    this.MyInkCanvas.Strokes.Add(new StrokeCollection(strokeCollection));
                IL_719:
                IL_71A:
                    this.mainImage.Focus();
                }
            }
            catch (Exception serviceException)
            {
                if (!false)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
        }


        private void mainImage_MouseLeftButtonUp_2(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (IsRectangle)
                {
                    bool expr_10 = e.LeftButton != MouseButtonState.Released;
                    bool flag;
                    if (!false)
                    {
                        flag = expr_10;
                    }
                    if (!flag)
                    {
                        this.IsSelectedMainImage = true;
                        this.elementForContextMenu = null;
                        RotateTransform rotateTransform = this.GrdBrightness.GetValue(UIElement.RenderTransformProperty) as RotateTransform;
                        flag = (rotateTransform == null);
                        if (!flag)
                        {
                            this.jrotate.Angle = rotateTransform.Angle;
                        }
                        else
                        {
                            if (false)
                            {
                                goto IL_5C1;
                            }
                            this.jrotate.Angle = 0.0;
                        }
                        //IEnumerator enumerator = this.dragCanvas.Children.GetEnumerator();
                        //try
                        //{
                        //    while (true)
                        //    {
                        //        flag = enumerator.MoveNext();
                        //        if (!flag)
                        //        {
                        //            break;
                        //        }
                        //        object current = enumerator.Current;
                        //        flag = !(current is TextBox);
                        //        if (!flag)
                        //        {
                        //            TextBox textBox = (TextBox)current;
                        //            textBox.Style = (Style)base.FindResource("GumballText");
                        //        }
                        //    }
                        //}
                        //catch (Exception ex)
                        //{
                        //}
                        //finally
                        //{
                        //    IDisposable disposable = enumerator as IDisposable;
                        //    flag = (disposable == null);
                        //    if (!flag)
                        //    {
                        //        disposable.Dispose();
                        //    }
                        //}
                    }
                    this.mainImage.ReleaseMouseCapture();
                    if (5 == 0)
                    {
                        goto IL_59B;
                    }
                    double arg_1F0_0;
                    double arg_1F0_1;
                    bool arg_15E_0;
                    if (this.MyInkCanvas.Children.Contains(this.shapeToRemove))
                    {
                        double expr_144 = arg_1F0_0 = this.shapeToRemove.Opacity;
                        double expr_149 = arg_1F0_1 = 1.0;
                        if (-1 == 0)
                        {
                            goto IL_1F0;
                        }
                        arg_15E_0 = (expr_144 == expr_149);
                    }
                    else
                    {
                        arg_15E_0 = true;
                    }
                    flag = arg_15E_0;
                    if (!flag)
                    {
                        this.MyInkCanvas.Children.Remove(this.shapeToRemove);
                    }
                    else
                    {
                        this.shapeToRemove = null;
                    }
                    int num = (int)e.MouseDevice.GetPosition(this.mainImage).X;
                    int num2 = (int)e.MouseDevice.GetPosition(this.mainImage).Y;
                    //double num3 = this.forWdht.Width / this.mainImage.ActualWidth;
                    arg_1F0_0 = this.forWdht.Height;
                    arg_1F0_1 = this.mainImage.ActualHeight;
                IL_1F0:
                    double num4 = arg_1F0_0 / arg_1F0_1;
                    this.drawX = (int)((double)this.drawX);// * num3);
                                                           //num = (int)((double)num * num3);
                    this.drawY = (int)((double)this.drawY);// * num4);
                                                           //num2 = (int)((double)num2 * num4);
                    System.Windows.Shapes.Rectangle rectangle = null;
                    System.Windows.Media.Color color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#000000");
                    //ImageBrush imgBrush = new ImageBrush();
                    if (-1 != 0)
                    {
                        flag = !this.IsEraserDrawRectangleActive;
                        if (flag)
                        {
                            flag = !this.IsEraserDrawEllipseActive;
                            goto IL_4AB;
                        }
                        flag = (e.MouseDevice.LeftButton != MouseButtonState.Released && e.MouseDevice.RightButton != MouseButtonState.Released);
                        if (flag)
                        {
                            goto IL_49A;
                        }
                        this.mainImageundo.Visibility = Visibility.Visible;
                        rectangle = new System.Windows.Shapes.Rectangle();
                        rectangle.Width = (double)Math.Abs(num - this.drawX);
                        rectangle.Height = (double)Math.Abs(num2 - this.drawY);
                        //color = System.Windows.Media.Colors.LimeGreen;
                        if (!IsKeepDrop)// && !boxErase)
                        {
                            color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColorDefault);
                        }


                        //imgBrush.ImageSource = mainImage.Source;
                        // Fill rectangle with an ImageBrush
                        //rectangle.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                        //this.shapeToRemove.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                        //this.MyInkCanvas.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                    }
                    //this.shapeToRemove.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
                    //rectangle.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
                    //this.MyInkCanvas.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);

                    //rectangle.MouseMove += new MouseEventHandler(this.mainImage_MouseMove_1);
                    //this.shapeToRemove.MouseMove += new MouseEventHandler(this.mainImage_MouseMove_1);
                    if (!IsKeepDrop)// && !boxErase)
                    {
                        rectangle.Fill = new SolidColorBrush(color);
                    }
                    else
                    {
                        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#282828");
                        rectangle.Fill = new SolidColorBrush(color);
                    }
                    rectangle.Opacity = 0.5;

                    StrokeCollection strokeCollection = new StrokeCollection();
                    StylusPointCollection stylusPointCollection = new StylusPointCollection();
                    DrawingAttributes drawingAttributes = new DrawingAttributes();
                    if (!IsKeepDrop)// && !boxErase)
                    {
                        drawingAttributes.Color = color;
                    }
                    else
                    {
                        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#282828");
                        drawingAttributes.Color = color;
                    }
                    drawingAttributes.StylusTip = StylusTip.Rectangle;
                    drawingAttributes.FitToCurve = true;
                    drawingAttributes.Height = rectangle.Height;
                    drawingAttributes.Width = rectangle.Width;
                    if (!IsKeepDrop)// && !boxErase)
                    {
                        this.attribute.Color = System.Windows.Media.Colors.LightSlateGray;
                    }
                    else
                    {
                        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#282828");
                        this.attribute.Color = color;
                    }

                    rectangle.SnapsToDevicePixels = true;
                    this.MyInkCanvas.SnapsToDevicePixels = true;
                    rectangle.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                    this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                    double num5 = 0.0;
                    bool arg_398_0 = num > this.drawX;
                    int arg_398_1 = 0;
                IL_398:
                    flag = ((arg_398_0 ? 1 : 0) == arg_398_1);
                    if (!flag)
                    {
                        rectangle.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                        num5 = (double)this.drawX;
                    }
                    else
                    {
                        rectangle.SetValue(InkCanvas.LeftProperty, (double)num);
                        num5 = (double)num;
                    }
                    flag = (num2 <= this.drawY);
                    double num6;
                    if (flag)
                    {
                        rectangle.SetValue(InkCanvas.TopProperty, (double)num2);
                        num6 = (double)num2;
                        goto IL_43B;
                    }
                    else
                    {
                        rectangle.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                        num6 = (double)this.drawY;
                        goto IL_43B;
                    }
                    if (3 == 0)
                    {
                        goto IL_4AB;
                    }
                    double arg_41A_0 = (double)this.drawY;
                IL_41A:
                    num6 = arg_41A_0;
                IL_43B:
                    stylusPointCollection.Add(new StylusPoint(num5 + rectangle.Width / 2.0, num6 + rectangle.Height / 2.0));
                    strokeCollection.Add(new Stroke(stylusPointCollection, drawingAttributes));
                    this.MyInkCanvas.Strokes.Add(new StrokeCollection(strokeCollection));
                    //rectangle.Opacity = 1;
                    //this.MyInkCanvas.Children.Add(rectangle);
                    rectangle.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                    rectangle.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
                    rectangle.MouseMove += new MouseEventHandler(this.mainImage_MouseMove_1);

                    this.canbackgroundParent.Visibility = Visibility.Visible;
                    MyInkCanvas.Focus();
                //Rect testr = new Rect(Mouse.GetPosition(this.mainImage).X, Mouse.GetPosition(this.mainImage).Y, rectangle.Width, rectangle.Height);
                //testr.Inflate(rectangle.Width / 10, rectangle.Height / 10);

                //List<StrokeCollection> x = this.MyInkCanvas.Strokes.Select(s => s.GetClipResult(testr)).ToList();
                //using (var sequenceEnum = x.GetEnumerator())
                //{
                //    while (sequenceEnum.MoveNext())
                //    {
                //        //this.MyInkCanvas.Children.Remove((UIElement)sequenceEnum.Current);
                //        var a = sequenceEnum.Current;
                //        // Do something with sequenceEnum.Current.
                //    }
                //}
                //foreach (var rectangleViewModel in this.MyInkCanvas.Rectangles)
                //{
                //    Rect itemRect = new Rect(rectangleViewModel.X, rectangleViewModel.Y, rectangleViewModel.Width, rectangleViewModel.Height);
                //    if (dragRect.Contains(itemRect))
                //    {
                //        listBox.SelectedItems.Add(rectangleViewModel);
                //    }
                //}
                IL_49A:
                    goto IL_71A;
                IL_4AB:
                    if (flag)
                    {
                        goto IL_71A;
                    }
                    flag = (e.MouseDevice.LeftButton != MouseButtonState.Released && e.MouseDevice.RightButton != MouseButtonState.Released);
                    if (flag)
                    {
                        goto IL_719;
                    }
                    Ellipse ellipse = new Ellipse();
                    ellipse.Width = (double)Math.Abs(num - this.drawX);
                    ellipse.Height = (double)Math.Abs(num2 - this.drawY);
                    ellipse.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                    ellipse.MouseLeftButtonUp += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonUp);
                    color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
                    ellipse.Fill = new SolidColorBrush(color);
                IL_55B:
                    strokeCollection = new StrokeCollection();
                    stylusPointCollection = new StylusPointCollection();
                    drawingAttributes = new DrawingAttributes();
                    if (!IsKeepDrop)// && !boxErase)
                    {
                        drawingAttributes.Color = color;
                    }

                    drawingAttributes.StylusTip = StylusTip.Ellipse;
                    drawingAttributes.FitToCurve = true;
                    drawingAttributes.Height = ellipse.Height;
                IL_59B:
                    drawingAttributes.Width = ellipse.Width;
                    ellipse.SnapsToDevicePixels = true;
                    this.MyInkCanvas.SnapsToDevicePixels = true;
                IL_5C1:
                    ellipse.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                    this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                    double expr_5EB = arg_41A_0 = 0.0;
                    if (false)
                    {
                        goto IL_41A;
                    }
                    num5 = expr_5EB;
                    flag = (num <= this.drawX);
                    if (!flag)
                    {
                        ellipse.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                        num5 = (double)this.drawX;
                    }
                    else
                    {
                        ellipse.SetValue(InkCanvas.LeftProperty, (double)num);
                        num5 = (double)num;
                    }
                    int expr_661 = (arg_398_0 = (num2 > this.drawY)) ? 1 : 0;
                    int expr_664 = arg_398_1 = 0;
                    if (expr_664 != 0)
                    {
                        goto IL_398;
                    }
                    flag = (expr_661 == expr_664);
                    if (!flag)
                    {
                        if (false)
                        {
                            goto IL_55B;
                        }
                        ellipse.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                        num6 = (double)this.drawY;
                    }
                    else
                    {
                        ellipse.SetValue(InkCanvas.TopProperty, (double)num2);
                        num6 = (double)num2;
                    }
                    stylusPointCollection.Add(new StylusPoint(num5 + ellipse.Width / 2.0, num6 + ellipse.Height / 2.0));
                    strokeCollection.Add(new Stroke(stylusPointCollection, drawingAttributes));
                    this.MyInkCanvas.Strokes.Add(new StrokeCollection(strokeCollection));
                IL_719:
                IL_71A:
                    this.mainImage.Focus();
                }
            }
            catch (Exception serviceException)
            {
                if (!false)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
        }
        //  private void mainImage_MouseMove_1(object sender, MouseEventArgs e)
        private void mainImage_MouseMove_1(object sender, MouseEventArgs e)
        {
            try
            {
                if (IsCloneDragging)
                {
                    if (cloneLine == null)
                    {
                        cloneLine = new Line();
                    }
                    var mousePosition = (e as MouseButtonEventArgs).GetPosition(this);
                    cloneLine.X1 = StartPointClone.X;
                    cloneLine.Y1 = StartPointClone.Y;
                    cloneLine.X2 = Mouse.GetPosition(MyInkCanvas).X;
                    cloneLine.Y2 = Mouse.GetPosition(MyInkCanvas).Y;
                    cloneLine.Stroke = new SolidColorBrush(Colors.Orange);
                    cloneLine.StrokeDashArray = new DoubleCollection() { 2, 2 };
                    if (!MyInkCanvas.Children.Contains(cloneLine))
                    {
                        MyInkCanvas.Children.Add(cloneLine);
                    }

                    if (EndCloneCircle == null)
                    {
                        EndCloneCircle = new Ellipse();
                    }
                    EndCloneCircle.Height = 25;
                    EndCloneCircle.Width = 25;
                    EndCloneCircle.Stroke = new SolidColorBrush(Colors.LightGoldenrodYellow);
                    EndCloneCircle.StrokeThickness = 1;
                    if (!MyInkCanvas.Children.Contains(EndCloneCircle))
                    {
                        MyInkCanvas.Children.Add(EndCloneCircle);
                        this.EraserBrush(25, 25);
                    }
                    InkCanvas.SetLeft(EndCloneCircle, e.GetPosition(MyInkCanvas).X - 12.5);
                    InkCanvas.SetTop(EndCloneCircle, e.GetPosition(MyInkCanvas).Y - 12.5);

                }
                if (IsRectangle)
                {

                    int arg_88C_0;
                    if (this.SetRedeye)
                    {
                        if (this.move)
                        {
                            this.pos = e.GetPosition(this.mainImage);
                            this.getredeyezoom(this.pos);
                            bool flag = this.redeffectfirstApplied;
                            while (flag)
                            {
                                if (!this.redeffectsecondApplied)
                                {
                                    this.redEyeEffectSecond.RedeyeTrue = 0.0;
                                    if (2 == 0)
                                    {
                                        goto IL_AA0;
                                    }
                                    this.redEyeEffectSecond.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                    this.redEyeEffectSecond.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                    this.GrdRedEyeSecond.Effect = this.redEyeEffectSecond;
                                }
                                else
                                {
                                    flag = this.redeffectmultiple1Applied;
                                    if (!true)
                                    {
                                        continue;
                                    }
                                    if (!flag)
                                    {
                                        this.redEyeEffectMultiple.RedeyeTrue = 0.0;
                                        this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                        this.redEyeEffectMultiple.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                        this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                    }
                                    else
                                    {
                                        if (!this.redeffectmultiple2Applied)
                                        {
                                            this.redEyeEffectMultiple.RedeyeTrue1 = 0.0;
                                        }
                                        else if (!this.redeffectmultiple3Applied)
                                        {
                                            this.redEyeEffectMultiple.RedeyeTrue2 = 0.0;
                                            bool expr_3AA = (arg_88C_0 = ((this.redEyeEffectMultiple.Radius2 == 0.0) ? 1 : 0)) != 0;
                                            if (5 != 0)
                                            {
                                                if (expr_3AA)
                                                {
                                                    this.redEyeEffectMultiple.Radius2 = ContantValueForMainWindow.RedEyeSize;
                                                }
                                                this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                                this.redEyeEffectMultiple.Center2 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                                this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                                goto IL_6D8;
                                            }
                                           // goto IL_886;
                                        }
                                        else
                                        {
                                            if (!this.redeffectmultiple4Applied)
                                            {
                                                this.redEyeEffectMultiple1.RedeyeTrue = 0.0;
                                                this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                                this.redEyeEffectMultiple1.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                                this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                                goto IL_6D8;
                                            }
                                            if (!this.redeffectmultiple5Applied)
                                            {
                                                this.redEyeEffectMultiple1.RedeyeTrue1 = 0.0;
                                                if (this.redEyeEffectMultiple1.Radius1 == 0.0)
                                                {
                                                    if (false)
                                                    {
                                                        goto IL_2B1;
                                                    }
                                                    this.redEyeEffectMultiple1.Radius1 = ContantValueForMainWindow.RedEyeSize;
                                                }
                                                this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                                this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                                this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                                goto IL_6D8;
                                            }
                                            if (!this.redeffectmultiple6Applied)
                                            {
                                                this.redEyeEffectMultiple1.RedeyeTrue2 = 0.0;
                                                if (this.redEyeEffectMultiple1.Radius2 == 0.0)
                                                {
                                                    this.redEyeEffectMultiple1.Radius2 = ContantValueForMainWindow.RedEyeSize;
                                                }
                                                this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                                this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                                this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                                goto IL_6D8;
                                            }
                                            goto IL_6D8;
                                        }
                                    IL_2B1:
                                        if (this.redEyeEffectMultiple.Radius1 == 0.0)
                                        {
                                            this.redEyeEffectMultiple.Radius1 = ContantValueForMainWindow.RedEyeSize;
                                        }
                                        this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                        this.redEyeEffectMultiple.Center1 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                        this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                    }
                                }
                            IL_6D8:
                                goto IL_6D9;
                            }
                            this.redEyeEffect.RedeyeTrue = 0.0;
                            this.redEyeEffect.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                            this.redEyeEffect.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                            this.GrdRedEyeFirst.Effect = this.redEyeEffect;
                        }
                    IL_6D9:;
                    }
                    if (this.IsEraserActive)
                    {
                        System.Windows.Point position = e.GetPosition(this.mainImage);
                        double num = position.X;
                        double num2 = position.Y;
                        this.greenEraser.Margin = new Thickness(num + 1.0, num2 + 1.0, 0.0, 0.0);
                    }
                    int num3 = (int)e.MouseDevice.GetPosition(this.mainImage).X;
                    int num4 = (int)e.MouseDevice.GetPosition(this.mainImage).Y;
                    bool arg_79C_0;

                    if (this.IsEraserDrawRectangleActive)
                    {
                        arg_79C_0 = (e.MouseDevice.LeftButton == MouseButtonState.Pressed);
                    }
                    else
                    {
                        if (!this.IsEraserDrawEllipseActive)
                        {
                            goto IL_AA1;
                        }
                        if (e.MouseDevice.LeftButton == MouseButtonState.Pressed)
                        {
                            Ellipse ellipse = new Ellipse();
                            if (this.shapeToRemove != null)
                            {
                                ellipse = (this.shapeToRemove as Ellipse);
                            }
                            if (ellipse == null)
                            {
                                ellipse = new Ellipse();
                            }
                            ellipse.Opacity = 1;
                            ellipse.Width = (double)Math.Abs(num3 - this.drawX);
                            ellipse.Height = (double)Math.Abs(num4 - this.drawY);
                            color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
                            ellipse.Fill = new SolidColorBrush(color);
                            if (num3 > this.drawX)
                            {
                                ellipse.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                            }
                            else
                            {
                                ellipse.SetValue(InkCanvas.LeftProperty, (double)num3);
                            }
                            if (num4 > this.drawY)
                            {
                                ellipse.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                            }
                            else
                            {
                                ellipse.SetValue(InkCanvas.TopProperty, (double)num4);
                            }
                            this.shapeToRemove = ellipse;
                            if (!this.MyInkCanvas.Children.Contains(this.shapeToRemove))
                            {
                                this.MyInkCanvas.Children.Add(this.shapeToRemove);
                            }
                            goto IL_AA0;
                        }
                        goto IL_AA0;
                    }
                IL_79B:
                    if (!arg_79C_0)
                    {
                        goto IL_90D;
                    }
                    System.Windows.Shapes.Rectangle rectangle = new System.Windows.Shapes.Rectangle();
                    //this.canbackgroundParent.Visibility = Visibility.Collapsed;
                    if (this.shapeToRemove != null)
                    {
                        rectangle = (this.shapeToRemove as System.Windows.Shapes.Rectangle);
                    }
                    if (rectangle == null)
                    {
                        rectangle = new System.Windows.Shapes.Rectangle();
                    }
                    rectangle.Opacity = 0.9;
                    rectangle.Width = (double)Math.Abs(num3 - this.drawX);
                    rectangle.Height = (double)Math.Abs(num4 - this.drawY);


                    ////////////////////////////////////////////////////
                    //System.Drawing.Point position = Mouse.GetPosition(this);

                    //var pos = e.GetPosition(this);

                    //var x = Math.Min(pos.X, this.drawX);
                    //var y = Math.Min(pos.Y, this.drawY);

                    //var w = Math.Max(pos.X, this.drawX) - x;
                    //var h = Math.Max(pos.Y, this.drawY) - y;

                    //rectangle.Width = w;
                    //rectangle.Height = h;

                    //Canvas.SetLeft(rectangle, x);
                    //Canvas.SetTop(rectangle, y);


                    /////////////////////////////////////////////////

                    //rectangle.Fill = new SolidColorBrush(Colors.LightSkyBlue);  // new
                    //color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
                    //this.canbackgroundParent.Visibility = Visibility.Collapsed;
                    //rectangle.Fill = new SolidColorBrush(Colors.LightSkyBlue);  // new added sep 2019

                    SolidColorBrush blackBrush = new SolidColorBrush(Colors.AntiqueWhite);
                  //  this.RegisterName("MySolidColorBorderBrush", blackBrush);

                    color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#282828");
                    rectangle.Fill = new SolidColorBrush(color);
                   // rectangle.StrokeThickness = 4;
                    //rectangle.Stroke = blackBrush;

                    if (num3 > this.drawX)
                    {
                        rectangle.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                    }
                    else
                    {
                        rectangle.SetValue(InkCanvas.LeftProperty, (double)num3);
                    }
                    // set rectangle draw value
                    arg_88C_0 = num4;
                IL_886:
                    if (arg_88C_0 > this.drawY)
                    {
                        rectangle.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                    }
                    else
                    {
                        rectangle.SetValue(InkCanvas.TopProperty, (double)num4);
                    }

                    rectangle.StrokeThickness = 1;
                    rectangle.Stroke = new SolidColorBrush(Colors.Orange);
                    this.shapeToRemove = rectangle;
                    ////// this.mainImage.Focus();
                    this.mainImageundo.Focus();
                    //this.mainImage.Focus();

                    shapeToRemove.MouseMove += new MouseEventHandler(this.mainImage_MouseMove_2);
                    
                    bool expr_8E4 = arg_79C_0 = this.MyInkCanvas.Children.Contains(this.shapeToRemove);
                    if (false)
                    {
                        goto IL_79B;
                    }
                    if (!expr_8E4)
                    {
                     //   this.MyInkCanvas.Children.Add(this.shapeToRemove);

                    }
                IL_90D:
                IL_AA0:
                IL_AA1:;
                }
            }

            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                //this.mainImage.Focus();
                this.mainImageundo.Focus();
                this.MyInkCanvas.Cursor = Cursors.Cross;
            }

        }
        private void mainImage_MouseMove_2(object sender, MouseEventArgs e)
        {
            try
            {
                if (IsRectangle)
                {

                    int arg_88C_0;
                    if (this.SetRedeye)
                    {
                        if (this.move)
                        {
                            this.pos = e.GetPosition(this.mainImage);
                            this.getredeyezoom(this.pos);
                            bool flag = this.redeffectfirstApplied;
                            while (flag)
                            {
                                if (!this.redeffectsecondApplied)
                                {
                                    this.redEyeEffectSecond.RedeyeTrue = 0.0;
                                    if (2 == 0)
                                    {
                                        goto IL_AA0;
                                    }
                                    this.redEyeEffectSecond.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                    this.redEyeEffectSecond.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                    this.GrdRedEyeSecond.Effect = this.redEyeEffectSecond;
                                }
                                else
                                {
                                    flag = this.redeffectmultiple1Applied;
                                    if (!true)
                                    {
                                        continue;
                                    }
                                    if (!flag)
                                    {
                                        this.redEyeEffectMultiple.RedeyeTrue = 0.0;
                                        this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                        this.redEyeEffectMultiple.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                        this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                    }
                                    else
                                    {
                                        if (!this.redeffectmultiple2Applied)
                                        {
                                            this.redEyeEffectMultiple.RedeyeTrue1 = 0.0;
                                        }
                                        else if (!this.redeffectmultiple3Applied)
                                        {
                                            this.redEyeEffectMultiple.RedeyeTrue2 = 0.0;
                                            bool expr_3AA = (arg_88C_0 = ((this.redEyeEffectMultiple.Radius2 == 0.0) ? 1 : 0)) != 0;
                                            if (5 != 0)
                                            {
                                                if (expr_3AA)
                                                {
                                                    this.redEyeEffectMultiple.Radius2 = ContantValueForMainWindow.RedEyeSize;
                                                }
                                                this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                                this.redEyeEffectMultiple.Center2 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                                this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                                goto IL_6D8;
                                            }
                                            goto IL_886;
                                        }
                                        else
                                        {
                                            if (!this.redeffectmultiple4Applied)
                                            {
                                                this.redEyeEffectMultiple1.RedeyeTrue = 0.0;
                                                this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                                this.redEyeEffectMultiple1.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                                this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                                goto IL_6D8;
                                            }
                                            if (!this.redeffectmultiple5Applied)
                                            {
                                                this.redEyeEffectMultiple1.RedeyeTrue1 = 0.0;
                                                if (this.redEyeEffectMultiple1.Radius1 == 0.0)
                                                {
                                                    if (false)
                                                    {
                                                        goto IL_2B1;
                                                    }
                                                    this.redEyeEffectMultiple1.Radius1 = ContantValueForMainWindow.RedEyeSize;
                                                }
                                                this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                                this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                                this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                                goto IL_6D8;
                                            }
                                            if (!this.redeffectmultiple6Applied)
                                            {
                                                this.redEyeEffectMultiple1.RedeyeTrue2 = 0.0;
                                                if (this.redEyeEffectMultiple1.Radius2 == 0.0)
                                                {
                                                    this.redEyeEffectMultiple1.Radius2 = ContantValueForMainWindow.RedEyeSize;
                                                }
                                                this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                                this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                                this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                                                goto IL_6D8;
                                            }
                                            goto IL_6D8;
                                        }
                                    IL_2B1:
                                        if (this.redEyeEffectMultiple.Radius1 == 0.0)
                                        {
                                            this.redEyeEffectMultiple.Radius1 = ContantValueForMainWindow.RedEyeSize;
                                        }
                                        this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                                        this.redEyeEffectMultiple.Center1 = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                                        this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                                    }
                                }
                            IL_6D8:
                                goto IL_6D9;
                            }
                            this.redEyeEffect.RedeyeTrue = 0.0;
                            this.redEyeEffect.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                            this.redEyeEffect.Center = new System.Windows.Point(e.GetPosition(this.mainImage).X / this.mainImage.ActualWidth, e.GetPosition(this.mainImage).Y / this.mainImage.ActualHeight);
                            this.GrdRedEyeFirst.Effect = this.redEyeEffect;
                        }
                    IL_6D9:;
                    }
                    if (this.IsEraserActive)
                    {
                        System.Windows.Point position = e.GetPosition(this.mainImage);
                        double num = position.X;
                        double num2 = position.Y;
                        this.greenEraser.Margin = new Thickness(num + 1.0, num2 + 1.0, 0.0, 0.0);
                    }
                    int num3 = (int)e.MouseDevice.GetPosition(this.mainImage).X;
                    int num4 = (int)e.MouseDevice.GetPosition(this.mainImage).Y;
                    bool arg_79C_0;

                    if (this.IsEraserDrawRectangleActive)
                    {
                        arg_79C_0 = (e.MouseDevice.LeftButton == MouseButtonState.Pressed);
                    }
                    else
                    {
                        if (!this.IsEraserDrawEllipseActive)
                        {
                            goto IL_AA1;
                        }
                        if (e.MouseDevice.LeftButton == MouseButtonState.Pressed)
                        {
                            Ellipse ellipse = new Ellipse();
                            if (this.shapeToRemove != null)
                            {
                                ellipse = (this.shapeToRemove as Ellipse);
                            }
                            if (ellipse == null)
                            {
                                ellipse = new Ellipse();
                            }
                            ellipse.Opacity = 1;
                            ellipse.Width = (double)Math.Abs(num3 - this.drawX);
                            ellipse.Height = (double)Math.Abs(num4 - this.drawY);
                            color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
                            ellipse.Fill = new SolidColorBrush(color);
                            if (num3 > this.drawX)
                            {
                                ellipse.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                            }
                            else
                            {
                                ellipse.SetValue(InkCanvas.LeftProperty, (double)num3);
                            }
                            if (num4 > this.drawY)
                            {
                                ellipse.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                            }
                            else
                            {
                                ellipse.SetValue(InkCanvas.TopProperty, (double)num4);
                            }
                            this.shapeToRemove = ellipse;
                            if (!this.MyInkCanvas.Children.Contains(this.shapeToRemove))
                            {
                                this.MyInkCanvas.Children.Add(this.shapeToRemove);
                            }
                            goto IL_AA0;
                        }
                        goto IL_AA0;
                    }
                IL_79B:
                    if (!arg_79C_0)
                    {
                        goto IL_90D;
                    }

                    if (IsKeepDrop)
                    {
                        this.canbackgroundParent.Visibility = Visibility.Collapsed;
                    }
                    else
                    {
                        this.canbackgroundParent.Visibility = Visibility.Visible;
                    }

                    System.Windows.Shapes.Rectangle rectangle = new System.Windows.Shapes.Rectangle();
                    if (this.shapeToRemove != null)
                    {
                        rectangle = (this.shapeToRemove as System.Windows.Shapes.Rectangle);
                    }
                    if (rectangle == null)
                    {
                        rectangle = new System.Windows.Shapes.Rectangle();
                    }
                    rectangle.Opacity = 0.6;
                    rectangle.Width = (double)Math.Abs(num3 - this.drawX);
                    rectangle.Height = (double)Math.Abs(num4 - this.drawY);
                    rectangle.StrokeThickness = 1;

                    color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#282828");

                    rectangle.Fill = new SolidColorBrush(color);

                    if (num3 > this.drawX)
                    {
                        rectangle.SetValue(InkCanvas.LeftProperty, (double)this.drawX);
                    }
                    else
                    {
                        rectangle.SetValue(InkCanvas.LeftProperty, (double)num3);
                    }
                    arg_88C_0 = num4;
                IL_886:
                    if (arg_88C_0 > this.drawY)
                    {
                        rectangle.SetValue(InkCanvas.TopProperty, (double)this.drawY);
                    }
                    else
                    {
                        rectangle.SetValue(InkCanvas.TopProperty, (double)num4);
                    }
                    rectangle.StrokeThickness = 1;
                    rectangle.Stroke = new SolidColorBrush(Colors.Orange);
                    this.shapeToRemove = rectangle;

                    //rectangle.Stroke = new SolidColorBrush(Colors.Black);
                    this.mainImage.Focus();
                    //rectangle.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                    //this.shapeToRemove.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);

                    //this.rectangle.MouseMove += new MouseEventHandler(this.mainImage_MouseMove_1);
                    //this.shapeToRemove.MouseMove+= new MouseEventHandler(this.mainImage_MouseMove_1);
                    bool expr_8E4 = arg_79C_0 = this.MyInkCanvas.Children.Contains(this.shapeToRemove);
                    if (false)
                    {
                        goto IL_79B;
                    }
                    if (!expr_8E4)
                    {
                        this.MyInkCanvas.Children.Add(this.shapeToRemove);

                    }
                IL_90D:
                IL_AA0:
                IL_AA1:;
                    if (IsPenTool)
                    {
                        MyInkCanvas.Cursor = Cursors.Arrow;
                        mainImage.Cursor = Cursors.Arrow;
                    }
                }

            }

            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                this.mainImage.Focus();
                this.MyInkCanvas.Cursor = Cursors.Cross;
            }
        }
        private void mainImage_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {

            try
            {
                while (true)
                {
                    if (IsCloneMainImage)
                    {
                        IsCloneDragging = true;
                        break;
                    }

                    if (IsPenTool)
                    {
                        IsInvert = false;
                        //this.canbackgroundParent.Visibility = Visibility.Collapsed;
                        

                        //StylusPointCollection pts = new StylusPointCollection();
                        //Stroke st = null;
                        //pts.Add(new StylusPoint(0, 0));
                        //Rect r = new Rect(Mouse.GetPosition(this.mainImage).X-2.5, Mouse.GetPosition(this.mainImage).Y-2.5, 5, 5);

                        //st = new customStroke(pts, r, true);
                        //st.DrawingAttributes.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FF0000");
                        //MyInkCanvas.Strokes.Add(st);


                        //System.Windows.Controls.Image image = new System.Windows.Controls.Image
                        //{
                        //    Height = 5,
                        //    Width = 5,
                        //    Source = new BitmapImage(new Uri(@"/PhotoSW;component/images/keepIcon.png", UriKind.Relative))
                        //};
                        ////Stream stream = new MemoryStream(image.ToArray());
                        ////byte[] buffer = null;

                        ////if (stream != null && stream.Length > 0)
                        ////{
                        ////    using (BinaryReader br = new BinaryReader(stream))
                        ////    {
                        ////        buffer = br.ReadBytes((Int32)stream.Length);
                        ////    }
                        ////}
                        //var memoryStream = new MemoryStream(data);
                        //Works fine
                        //StrokeCollection strokeCollection = new System.Windows.Ink.StrokeCollection();

                        //Rect r = new Rect(Mouse.GetPosition(this.mainImage).X, Mouse.GetPosition(this.mainImage).Y, 100, 100);
                        //StrokeCollection x = ;
                        //this.MyInkCanvas.Strokes.Add(new StrokeCollection(x));
                        //StrokeCollection stroke = new StrokeCollection(memoryStream);
                        //MyInkCanvas.Strokes.Add(stroke);
                        //MyInkCanvas.Children.Add(image);
                        //image.SetValue(InkCanvas.LeftProperty, e.GetPosition(this.mainImage).X - image.Width / 2);
                        //image.SetValue(InkCanvas.TopProperty, e.GetPosition(this.mainImage).Y - image.Height / 2);

                        TextBox myTextBox = new TextBox();
                        this.MyInkCanvas.Children.Add(myTextBox);                       
                        myTextBox.Visibility = Visibility.Visible;
                        myTextBox.Width = 5;
                        myTextBox.Height = 5;
                        myTextBox.SetValue(InkCanvas.LeftProperty, e.GetPosition(this.mainImage).X - 1.5);
                        myTextBox.SetValue(InkCanvas.TopProperty, e.GetPosition(this.mainImage).Y - 1.5);
                        myTextBox.Background = System.Windows.Media.Brushes.LightYellow;
                        myTextBox.BorderThickness = new Thickness(1);                       
                        myTextBox.MouseLeftButtonUp += new MouseButtonEventHandler(this.CheckStartEndPoint);
                        myTextBox.MouseEnter += new MouseEventHandler(this.CursorChange);

                        //myTextBox.Background = System.Windows.Media.Brushes.Black;
                        //myTextBox.Text = "Hello";

                        //InkCanvas.SetLeft(myTextBox, left);
                        //InkCanvas.SetTop(myTextBox, top);
                        //System.Windows.Shapes.Rectangle PointRect = new System.Windows.Shapes.Rectangle();
                        //PointRect.Stroke = new SolidColorBrush((System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#00FF00"));
                        //PointRect.Stroke = new SolidColorBrush((System.Windows.Media.Colors.Black));
                        //PointRect.Width = 5;
                        //PointRect.Height = 5;
                        //PointRect.StrokeThickness = 1;
                        //PointRect.SetValue(InkCanvas.LeftProperty, e.GetPosition(this.mainImage).X - PointRect.Width / 2);
                        //PointRect.SetValue(InkCanvas.TopProperty, e.GetPosition(this.mainImage).Y - PointRect.Height / 2);
                        //this.MyInkCanvas.Children.Add(PointRect);

                        if (uIElementCollectionRect == null)
                        {
                            uIElementCollectionRect = new List<UIElement>();
                        }
                        uIElementCollectionRect.Add(myTextBox);
                        if (lstPoint == null)
                        {
                            lstPoint = new List<System.Windows.Point>();
                        }
                        lstPoint.Add(e.GetPosition(this.mainImage));
                        if (lstPoint.Count > 1)
                        {
                            //    (MyInkCanvas.Children[MyInkCanvas.Children.IndexOf(myLine)] as Line).X2 = Mouse.GetPosition(mainImage).X;
                            //    (MyInkCanvas.Children[MyInkCanvas.Children.IndexOf(myLine)] as Line).Y2 = Mouse.GetPosition(mainImage).Y;
                            Line myline = new Line();
                            myline.StrokeThickness = 1;
                            myline.StrokeDashArray = new DoubleCollection() { 2, 2 };
                            myline.X1 = lstPoint[lstPoint.Count - 2].X;
                            myline.Y1 = lstPoint[lstPoint.Count - 2].Y;
                            myline.X2 = Mouse.GetPosition(mainImage).X;
                            myline.Y2 = Mouse.GetPosition(mainImage).Y;
                            this.StartPointPoly = lstPoint[0];
                            this.EndPointPoly = Mouse.GetPosition(mainImage);
                            //EraseRectangleBrush();

                            myline.Stroke = new SolidColorBrush(Colors.Orange);
                            //myline.Stroke = System.Windows.Media.Brushes.Black;
                            //myline.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                            MyInkCanvas.Children.Add(myline);
                            if (uIElementCollectionLine == null)
                            {
                                uIElementCollectionLine = new List<UIElement>();
                            }
                            uIElementCollectionLine.Add(myline);
                            isDrawingLineToJoinStarEndPoint = false;
                            //if ((Math.Round(lstPoint[lstPoint.Count - 1].X) == Math.Round(lstPoint[0].X) && Math.Round(lstPoint[lstPoint.Count - 1].Y) == Math.Round(lstPoint[0].Y)) || Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))
                            //{
                            //    DrawingLineToJoinStarEndPoint();
                            //    CreatePolyBezierSegment(this.AllPenPoint);
                            //    if (uIElementCollectionRect != null)
                            //    {
                            //        foreach (UIElement item in uIElementCollectionRect)
                            //        {
                            //            MyInkCanvas.Children.Remove(item);
                            //        }
                            //    }
                            //    if (uIElementCollectionLine != null)
                            //    {
                            //        foreach (UIElement item in uIElementCollectionLine)
                            //        {
                            //            MyInkCanvas.Children.Remove(item);
                            //        }
                            //    }
                            //    StartPointPoly = new System.Windows.Point();
                            //    EndPointPoly = new System.Windows.Point();
                            //}

                        }

                        //rectangle.Fill = new SolidColorBrush(Colors.Black);
                        //rectangle.Width = 2;
                        //rectangle.Height = 2;
                        //rectangle.StrokeThickness = 1; 
                        //rectangle.SetValue(InkCanvas.LeftProperty, e.GetPosition(this.mainImage).X);
                        //rectangle.SetValue(InkCanvas.TopProperty, e.GetPosition(this.mainImage).Y);
                        //this.MyInkCanvas.Children.Add(rectangle);
                        break;
                    }
                    int arg_2E4_0;
                    if (this.shapeToRemove != null)
                    {
                        arg_2E4_0 = ((!this.MyInkCanvas.Children.Contains(this.shapeToRemove)) ? 1 : 0);
                    }
                    else
                    {
                        arg_2E4_0 = 1;
                    }
                IL_2E:
                    if (arg_2E4_0 != 0)
                    {
                        goto IL_1D0;
                    }
                    if (false)
                    {
                        goto IL_20F;
                    }
                    this.shapeToRemove.Opacity = 1.0;
                    bool arg_76_0;
                    bool arg_281_0 = arg_76_0 = (this.shapeToRemove is System.Windows.Shapes.Rectangle);
                    if (4 == 0)
                    {
                        goto IL_281;
                    }
                    int arg_76_1 = 0;
                IL_76:
                    if ((arg_76_0 ? 1 : 0) == arg_76_1)
                    {
                        goto IL_121;
                    }
                    System.Windows.Media.Color color = System.Windows.Media.Colors.LimeGreen;
                IL_8C:
                    System.Windows.Shapes.Rectangle rectangle = new System.Windows.Shapes.Rectangle();
                    rectangle.Fill = new SolidColorBrush(color);
                    rectangle.Width = ((System.Windows.Shapes.Rectangle)this.shapeToRemove).Width;
                    rectangle.Height = ((System.Windows.Shapes.Rectangle)this.shapeToRemove).Height;
                    rectangle.SetValue(InkCanvas.LeftProperty, ((System.Windows.Shapes.Rectangle)this.shapeToRemove).GetValue(InkCanvas.LeftProperty));
                    rectangle.SetValue(InkCanvas.TopProperty, ((System.Windows.Shapes.Rectangle)this.shapeToRemove).GetValue(InkCanvas.TopProperty));
                    this.MyInkCanvas.Children.Add(rectangle);
                    goto IL_1C9;
                IL_121:
                    Ellipse ellipse = new Ellipse();
                    color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
                    ellipse.Fill = new SolidColorBrush(color);
                    ellipse.Width = ((Ellipse)this.shapeToRemove).Width;
                    ellipse.Height = ((Ellipse)this.shapeToRemove).Height;
                    ellipse.SetValue(InkCanvas.LeftProperty, ((Ellipse)this.shapeToRemove).GetValue(InkCanvas.LeftProperty));
                    ellipse.SetValue(InkCanvas.TopProperty, ((Ellipse)this.shapeToRemove).GetValue(InkCanvas.TopProperty));
                    this.MyInkCanvas.Children.Add(ellipse);
                IL_1C9:
                    if (false)
                    {
                        goto IL_270;
                    }
                IL_1D0:
                    this.ptnred = e.GetPosition(this.mainImage);
                    bool flag = !this.move;
                    bool expr_1EC = (arg_2E4_0 = (flag ? 1 : 0)) != 0;
                    if (8 == 0)
                    {
                        goto IL_2E;
                    }
                    if (!expr_1EC)
                    {
                        this.move = false;
                    }
                    else
                    {
                        if (false)
                        {
                            goto IL_8C;
                        }
                        this.move = true;
                    }
                IL_20F:
                    if (this.IsEraserActive)
                    {
                    }
                    bool arg_27D_0;
                    int expr_21F = (arg_76_0 = (arg_27D_0 = this.IsEraserDrawRectangleActive)) ? 1 : 0;
                    int arg_277_0;
                    int expr_225 = arg_277_0 = 0;
                    if (expr_225 != 0)
                    {
                        goto IL_277;
                    }
                    if (expr_21F != expr_225)
                    {
                        this.drawX = (int)e.GetPosition(this.mainImage).X;
                        this.drawY = (int)e.GetPosition(this.mainImage).Y;
                        if (!false)
                        {
                            return;
                        }
                        goto IL_121;
                    }
                IL_270:
                    arg_27D_0 = (arg_76_0 = this.IsEraserDrawEllipseActive);
                    arg_277_0 = 0;
                IL_277:
                    int expr_277 = arg_76_1 = arg_277_0;
                    if (expr_277 != 0)
                    {
                        goto IL_76;
                    }
                    flag = ((arg_27D_0 ? 1 : 0) == expr_277);
                    arg_281_0 = flag;
                IL_281:
                    if (!arg_281_0)
                    {
                        this.drawX = (int)e.GetPosition(this.mainImage).X;
                        this.drawY = (int)e.GetPosition(this.mainImage).Y;
                    }
                    break;
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void mainImage_MouseLeftButtonDown_2(object sender, MouseButtonEventArgs e)
        {
            try
            {
                while (true)
                {
                    if (IsPenTool)
                    {
                        IsInvert = false;
                        this.canbackgroundParent.Visibility = Visibility.Collapsed;
                        //StylusPointCollection pts = new StylusPointCollection();

                        //Stroke st = null;
                        //pts.Add(new StylusPoint(0, 0));
                        //Rect r = new Rect(Mouse.GetPosition(this.mainImage).X-2.5, Mouse.GetPosition(this.mainImage).Y-2.5, 5, 5);

                        //st = new customStroke(pts, r, true);

                        //st.DrawingAttributes.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FF0000");

                        //MyInkCanvas.Strokes.Add(st);



                        //System.Windows.Controls.Image image = new System.Windows.Controls.Image
                        //{
                        //    Height = 5,
                        //    Width = 5,
                        //    Source = new BitmapImage(new Uri(@"/PhotoSW;component/images/keepIcon.png", UriKind.Relative))
                        //};
                        ////Stream stream = new MemoryStream(image.ToArray());
                        ////byte[] buffer = null;

                        ////if (stream != null && stream.Length > 0)
                        ////{
                        ////    using (BinaryReader br = new BinaryReader(stream))
                        ////    {
                        ////        buffer = br.ReadBytes((Int32)stream.Length);
                        ////    }
                        ////}
                        //var memoryStream = new MemoryStream(data);
                        //Works fine
                        //StrokeCollection strokeCollection = new System.Windows.Ink.StrokeCollection();

                        //Rect r = new Rect(Mouse.GetPosition(this.mainImage).X, Mouse.GetPosition(this.mainImage).Y, 100, 100);
                        //StrokeCollection x = ;
                        //this.MyInkCanvas.Strokes.Add(new StrokeCollection(x));
                        //StrokeCollection stroke = new StrokeCollection(memoryStream);
                        //MyInkCanvas.Strokes.Add(stroke);
                        //MyInkCanvas.Children.Add(image);
                        //image.SetValue(InkCanvas.LeftProperty, e.GetPosition(this.mainImage).X - image.Width / 2);
                        //image.SetValue(InkCanvas.TopProperty, e.GetPosition(this.mainImage).Y - image.Height / 2);

                        TextBox myTextBox = new TextBox();
                        MyInkCanvas.Children.Add(myTextBox);
                        myTextBox.Visibility = Visibility.Visible;
                        myTextBox.Width = 3;
                        myTextBox.Height = 3;
                        myTextBox.SetValue(InkCanvas.LeftProperty, e.GetPosition(this.mainImage).X - 1.5);
                        myTextBox.SetValue(InkCanvas.TopProperty, e.GetPosition(this.mainImage).Y - 1.5);
                        myTextBox.Background = System.Windows.Media.Brushes.LightSlateGray;
                        myTextBox.BorderThickness = new Thickness(1);
                        myTextBox.MouseLeftButtonUp += new MouseButtonEventHandler(this.CheckStartEndPoint);
                        myTextBox.MouseEnter += new MouseEventHandler(this.CursorChange);

                        //myTextBox.Background = System.Windows.Media.Brushes.Black;
                        //myTextBox.Text = "Hello";

                        //InkCanvas.SetLeft(myTextBox, left);
                        //InkCanvas.SetTop(myTextBox, top);
                        //System.Windows.Shapes.Rectangle PointRect = new System.Windows.Shapes.Rectangle();
                        //PointRect.Stroke = new SolidColorBrush((System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#00FF00"));
                        //PointRect.Stroke = new SolidColorBrush((System.Windows.Media.Colors.Black));
                        //PointRect.Width = 5;
                        //PointRect.Height = 5;
                        //PointRect.StrokeThickness = 1;
                        //PointRect.SetValue(InkCanvas.LeftProperty, e.GetPosition(this.mainImage).X - PointRect.Width / 2);
                        //PointRect.SetValue(InkCanvas.TopProperty, e.GetPosition(this.mainImage).Y - PointRect.Height / 2);
                        //this.MyInkCanvas.Children.Add(PointRect);

                        if (uIElementCollectionRect == null)
                        {
                            uIElementCollectionRect = new List<UIElement>();
                        }
                        uIElementCollectionRect.Add(myTextBox);
                        if (lstPoint == null)
                        {
                            lstPoint = new List<System.Windows.Point>();
                        }
                        lstPoint.Add(e.GetPosition(this.mainImage));
                        if (lstPoint.Count > 1)
                        {
                            //    (MyInkCanvas.Children[MyInkCanvas.Children.IndexOf(myLine)] as Line).X2 = Mouse.GetPosition(mainImage).X;
                            //    (MyInkCanvas.Children[MyInkCanvas.Children.IndexOf(myLine)] as Line).Y2 = Mouse.GetPosition(mainImage).Y;
                            Line myline = new Line();
                            myline.StrokeThickness = 1;
                            myline.StrokeDashArray = new DoubleCollection() { 2, 2 };
                            myline.X1 = lstPoint[lstPoint.Count - 2].X;
                            myline.Y1 = lstPoint[lstPoint.Count - 2].Y;
                            myline.X2 = Mouse.GetPosition(mainImage).X;
                            myline.Y2 = Mouse.GetPosition(mainImage).Y;
                            this.StartPointPoly = lstPoint[0];
                            this.EndPointPoly = Mouse.GetPosition(mainImage);
                            //EraseRectangleBrush();
                            myline.Stroke = new SolidColorBrush(Colors.Orange);
                            //myline.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                            MyInkCanvas.Children.Add(myline);
                            if (uIElementCollectionLine == null)
                            {
                                uIElementCollectionLine = new List<UIElement>();
                            }
                            uIElementCollectionLine.Add(myline);
                            isDrawingLineToJoinStarEndPoint = false;
                            
                        }
                        
                        break;
                    }
                    int arg_2E4_0;
                    if (this.shapeToRemove != null)
                    {
                        arg_2E4_0 = ((!this.MyInkCanvas.Children.Contains(this.shapeToRemove)) ? 1 : 0);
                    }
                    else
                    {
                        arg_2E4_0 = 1;
                    }
                IL_2E:
                    if (arg_2E4_0 != 0)
                    {
                        goto IL_1D0;
                    }
                    if (false)
                    {
                        goto IL_20F;
                    }
                    this.shapeToRemove.Opacity = 1.0;
                    bool arg_76_0;
                    bool arg_281_0 = arg_76_0 = (this.shapeToRemove is System.Windows.Shapes.Rectangle);
                    if (4 == 0)
                    {
                        goto IL_281;
                    }
                    int arg_76_1 = 0;
                IL_76:
                    if ((arg_76_0 ? 1 : 0) == arg_76_1)
                    {
                        goto IL_121;
                    }
                    System.Windows.Media.Color color = System.Windows.Media.Colors.LimeGreen;
                IL_8C:
                    System.Windows.Shapes.Rectangle rectangle = new System.Windows.Shapes.Rectangle();
                    rectangle.Fill = new SolidColorBrush(color);
                    rectangle.Width = ((System.Windows.Shapes.Rectangle)this.shapeToRemove).Width;
                    rectangle.Height = ((System.Windows.Shapes.Rectangle)this.shapeToRemove).Height;
                    rectangle.SetValue(InkCanvas.LeftProperty, ((System.Windows.Shapes.Rectangle)this.shapeToRemove).GetValue(InkCanvas.LeftProperty));
                    rectangle.SetValue(InkCanvas.TopProperty, ((System.Windows.Shapes.Rectangle)this.shapeToRemove).GetValue(InkCanvas.TopProperty));
                    this.MyInkCanvas.Children.Add(rectangle);
                    goto IL_1C9;
                IL_121:
                    Ellipse ellipse = new Ellipse();
                    color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
                    ellipse.Fill = new SolidColorBrush(color);
                    ellipse.Width = ((Ellipse)this.shapeToRemove).Width;
                    ellipse.Height = ((Ellipse)this.shapeToRemove).Height;
                    ellipse.SetValue(InkCanvas.LeftProperty, ((Ellipse)this.shapeToRemove).GetValue(InkCanvas.LeftProperty));
                    ellipse.SetValue(InkCanvas.TopProperty, ((Ellipse)this.shapeToRemove).GetValue(InkCanvas.TopProperty));
                    this.MyInkCanvas.Children.Add(ellipse);
                IL_1C9:
                    if (false)
                    {
                        goto IL_270;
                    }
                IL_1D0:
                    this.ptnred = e.GetPosition(this.mainImage);
                    bool flag = !this.move;
                    bool expr_1EC = (arg_2E4_0 = (flag ? 1 : 0)) != 0;
                    if (8 == 0)
                    {
                        goto IL_2E;
                    }
                    if (!expr_1EC)
                    {
                        this.move = false;
                    }
                    else
                    {
                        if (false)
                        {
                            goto IL_8C;
                        }
                        this.move = true;
                    }
                IL_20F:
                    if (this.IsEraserActive)
                    {
                    }
                    bool arg_27D_0;
                    int expr_21F = (arg_76_0 = (arg_27D_0 = this.IsEraserDrawRectangleActive)) ? 1 : 0;
                    int arg_277_0;
                    int expr_225 = arg_277_0 = 0;
                    if (expr_225 != 0)
                    {
                        goto IL_277;
                    }
                    if (expr_21F != expr_225)
                    {
                        this.drawX = (int)e.GetPosition(this.mainImage).X;
                        this.drawY = (int)e.GetPosition(this.mainImage).Y;
                        if (!false)
                        {
                            return;
                        }
                        goto IL_121;
                    }
                IL_270:
                    arg_27D_0 = (arg_76_0 = this.IsEraserDrawEllipseActive);
                    arg_277_0 = 0;
                IL_277:
                    int expr_277 = arg_76_1 = arg_277_0;
                    if (expr_277 != 0)
                    {
                        goto IL_76;
                    }
                    flag = ((arg_27D_0 ? 1 : 0) == expr_277);
                    arg_281_0 = flag;
                IL_281:
                    if (!arg_281_0)
                    {
                        this.drawX = (int)e.GetPosition(this.mainImage).X;
                        this.drawY = (int)e.GetPosition(this.mainImage).Y;
                    }
                    break;
                }
            }
            catch (Exception ex)
            {

            }
        }


        private void mainImage_MouseLeftButtonUp1(object sender, MouseButtonEventArgs e)
        {
            try
            {
                bool flag;
                if (!false)
                {
                    flag = (e.LeftButton != MouseButtonState.Released);
                }
                if (!flag)
                {
                    if (!false)
                    {
                        this.IsSelectedMainImage = true;
                    }
                    this.elementForContextMenu = null;
                    RotateTransform rotateTransform = this.GrdBrightness.GetValue(UIElement.RenderTransformProperty) as RotateTransform;
                    flag = (rotateTransform == null);
                    if (!false)
                    {
                        if (!flag && !false)
                        {
                            this.jrotate.Angle = rotateTransform.Angle;
                        }
                        else
                        {
                            this.jrotate.Angle = 0.0;
                            if (false)
                            {
                                goto IL_A3;
                            }
                        }
                    }
                }
                this.mainImage.ReleaseMouseCapture();
            IL_A3:;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            if (!false)
            {
            }
        }

        private void MyInkCanvas_MouseLeave(object sender, MouseEventArgs e)
        {
            if (e.MouseDevice.LeftButton != MouseButtonState.Released)
                this.mainImage_MouseLeftButtonUp(sender, e);

            bool exe_09 = (this.mainImage.Visibility == Visibility.Collapsed);
            if (IsCloneImage)
            {
                if (exe_09)
                {
                    // this.mainImageClone.Opacity = 1.0;
                }
                this.fillSize = 50;
                this.EraserBrush((double)this.fillSize, (double)this.fillSize);
            }
        }


        private void mainImage_TouchDown(object sender, TouchEventArgs e)
        {
            this.IsSelectedMainImage = true;
        }

        private System.Windows.Size MeasureString(string candidate, object textBx)
        {
            TextBox textBox = (TextBox)textBx;
            FormattedText formattedText = new FormattedText(candidate, System.Globalization.CultureInfo.CurrentUICulture, FlowDirection.LeftToRight, new Typeface(textBox.FontFamily, textBox.FontStyle, textBox.FontWeight, textBox.FontStretch), textBox.FontSize, textBox.Foreground);
            System.Windows.Size result = new System.Windows.Size(formattedText.Width, formattedText.Height);
            if (!false)
            {
            }
            return result;
        }

        private void MoveImageStart()
        {
            while (true)
            {
                bool arg_18_0;
                bool expr_06 = arg_18_0 = this.IsMoveEnabled;
                if (5 != 0)
                {
                    bool flag = expr_06;
                    arg_18_0 = flag;
                }
                if (!arg_18_0)
                {
                    break;
                }
                DragCanvas.SetCanBeDragged(this.mainImage, false);
                if (3 != 0)
                {
                    goto Block_5;
                }
            }
            DragCanvas.SetCanBeDragged(this.mainImage, true);
        IL_2B:
            UIElement expr_31 = this.GrdBrightness;
            bool expr_36 = true;
            if (8 != 0)
            {
                DragCanvas.SetCanBeDragged(expr_31, expr_36);
            }
            //  DragCanvas.SetCanBeDragged(this.Opacitymsk, true);
            DragCanvas.SetCanBeDragged(this.imageundoGrid, false);
            if (!true)
            {
                goto IL_C5;
            }
            this.dragCanvas.AllowDragging = true;
            if (5 == 0)
            {
                goto IL_B8;
            }
            this.dragCanvas.IsEnabled = true;
            if (!false)
            {
                this.IsMoveEnabled = true;
                return;
            }
            goto IL_AC;
        Block_5:
            DragCanvas.SetCanBeDragged(this.GrdBrightness, false);
        IL_AC:
            DragCanvas.SetCanBeDragged(this.Opacitymsk, false);
        IL_B8:
            DragCanvas.SetCanBeDragged(this.imageundoGrid, false);
        IL_C5:
            this.dragCanvas.AllowDragging = false;
            this.dragCanvas.IsEnabled = false;
            this.IsMoveEnabled = false;
            if (false)
            {
                goto IL_2B;
            }
        }


        private void MoveImageStartStop()
        {
            while (true)
            {
                bool arg_18_0;
                bool expr_06 = arg_18_0 = this.IsMoveEnabled;
                if (5 != 0)
                {
                    bool flag = expr_06;
                    arg_18_0 = flag;
                }
                if (!arg_18_0)
                {
                    break;
                }
                DragCanvas.SetCanBeDragged(this.mainImage, false);
                if (3 != 0)
                {
                    goto Block_5;
                }
            }
            DragCanvas.SetCanBeDragged(this.mainImage, true);
        IL_2B:
            UIElement expr_31 = this.GrdBrightness;
            bool expr_36 = true;
            if (8 != 0)
            {
                DragCanvas.SetCanBeDragged(expr_31, expr_36);
            }
            DragCanvas.SetCanBeDragged(this.Opacitymsk, true);
            DragCanvas.SetCanBeDragged(this.imageundoGrid, false);
            if (!true)
            {
                goto IL_C5;
            }
            this.dragCanvas.AllowDragging = true;
            if (5 == 0)
            {
                goto IL_B8;
            }
            this.dragCanvas.IsEnabled = true;
            if (!false)
            {
                this.IsMoveEnabled = true;
                return;
            }
            goto IL_AC;
        Block_5:
            DragCanvas.SetCanBeDragged(this.GrdBrightness, false);
        IL_AC:
            DragCanvas.SetCanBeDragged(this.Opacitymsk, false);
        IL_B8:
            DragCanvas.SetCanBeDragged(this.imageundoGrid, false);
        IL_C5:
            this.dragCanvas.AllowDragging = false;
            this.dragCanvas.IsEnabled = false;
            this.IsMoveEnabled = false;
            if (false)
            {
                goto IL_2B;
            }
        }

        private void MovePage(SearchDetailInfo searchDetails)
        {
            if (RobotImageLoader.robotImages == null)
            {
                goto IL_1D;
            }
        IL_08:
            int arg_3C_0;
            int expr_13 = arg_3C_0 = ((RobotImageLoader.robotImages.Count > 0) ? 1 : 0);
            int arg_3C_1;
            int expr_16 = arg_3C_1 = 0;
            bool arg_151_0;
            if (expr_16 == 0)
            {
                arg_151_0 = (expr_13 == expr_16);
                goto IL_1E;
            }
            goto IL_3C;
        IL_1D:
            arg_151_0 = true;
        IL_1E:
            bool flag;
            if (!false)
            {
                flag = arg_151_0;
            }
            if (flag)
            {
                goto IL_13F;
            }
            arg_3C_0 = searchDetails.NewRecord;
            arg_3C_1 = 0;
        IL_3C:
            flag = (arg_3C_0 != arg_3C_1);
            if (6 == 0)
            {
                goto IL_1D;
            }
            if (!flag)
            {
                if (true)
                {
                    LstMyItems lstMyItems = RobotImageLoader.robotImages.FirstOrDefault((LstMyItems o) => (long)o.PhotoId == RobotImageLoader.MaxPhotoIdCriteria);
                    flag = (lstMyItems == null);
                    if (-1 == 0)
                    {
                        goto IL_08;
                    }
                    if (flag)
                    {
                        goto IL_13B;
                    }
                }
                searchDetails.NewRecord = 1;
                searchDetails.StartIndex = RobotImageLoader.MaxPhotoIdCriteria + 1L;
                MessageBox.Show("No more records found!", "Photo i-Mix", MessageBoxButton.OK, MessageBoxImage.Asterisk);
                this.IsMoreImages = false;
                if (6 != 0)
                {
                    return;
                }
                goto IL_1D;
            }
            else
            {
                LstMyItems lstMyItems2 = RobotImageLoader.robotImages.FirstOrDefault((LstMyItems o) => (long)o.PhotoId == RobotImageLoader.MinPhotoIdCriteria);
                flag = (lstMyItems2 == null);
                if (!flag)
                {
                    if (6 != 0)
                    {
                        searchDetails.NewRecord = 0;
                        searchDetails.StartIndex = RobotImageLoader.MinPhotoIdCriteria - 1L;
                        MessageBox.Show("No more records found!", "Photo i-Mix", MessageBoxButton.OK, MessageBoxImage.Asterisk);
                        this.IsMoreImages = false;
                        return;
                    }
                    return;
                }
            }
        IL_13A:
        IL_13B:
            if (6 == 0)
            {
                goto IL_13A;
            }
        IL_13F:
            RobotImageLoader.LoadImages(searchDetails);
        }

        private void MovePagePhotoId(SearchDetailInfo searchDetails)
        {
            int arg_16_0;
            int arg_19_0;
            int arg_13_0;
            bool arg_14B_0;
            if (RobotImageLoader.robotImages != null)
            {
                arg_19_0 = (arg_16_0 = RobotImageLoader.robotImages.Count);
                arg_13_0 = 0;
            }
            else
            {
                if (true)
                {
                    arg_14B_0 = true;
                    goto IL_24;
                }
                goto IL_133;
            }
        IL_13:
            int arg_19_1;
            int expr_13 = arg_19_1 = arg_13_0;
            if (expr_13 == 0)
            {
                arg_19_0 = ((arg_16_0 > expr_13) ? 1 : 0);
                arg_19_1 = 0;
            }
            arg_14B_0 = (arg_19_0 == arg_19_1);
        IL_24:
            bool flag = arg_14B_0;
            if (!flag)
            {
                int expr_35 = arg_16_0 = (arg_19_0 = RobotImageLoader.NewRecord);
                int expr_3B = arg_13_0 = 0;
                if (expr_3B == 0)
                {
                    bool expr_41 = expr_35 != expr_3B;
                    if (6 != 0)
                    {
                        flag = expr_41;
                    }
                    LstMyItems lstMyItems2;
                    while (!flag)
                    {
                        LstMyItems expr_163 = RobotImageLoader.robotImages.FirstOrDefault((LstMyItems o) => (long)o.PhotoId == RobotImageLoader.MaxPhotoIdCriteria);
                        LstMyItems lstMyItems;
                        if (7 != 0)
                        {
                            lstMyItems = expr_163;
                        }
                        flag = (lstMyItems == null);
                        if (5 != 0)
                        {
                            int arg_93_0 = flag ? 1 : 0;
                            while (arg_93_0 == 0)
                            {
                                if (false)
                                {
                                    goto IL_F9;
                                }
                                int expr_9A = arg_93_0 = 1;
                                if (expr_9A != 0)
                                {
                                    RobotImageLoader.NewRecord = expr_9A;
                                    RobotImageLoader.StartIndexRFID = RobotImageLoader.MaxPhotoIdCriteria + 1L;
                                    MessageBox.Show("No more records found!", "PhotoSW i-Mix", MessageBoxButton.OK, MessageBoxImage.Asterisk);
                                    this.IsMoreImages = false;
                                    return;
                                }
                            }
                            goto IL_132;
                        IL_F9:
                            if (lstMyItems2 != null)
                            {
                                RobotImageLoader.NewRecord = 0;
                                RobotImageLoader.StartIndexRFID = RobotImageLoader.MinPhotoIdCriteria - 1L;
                                MessageBox.Show("No more records found!", "PhotoSW i-Mix", MessageBoxButton.OK, MessageBoxImage.Asterisk);
                                this.IsMoreImages = false;
                                return;
                            }
                        IL_132:
                            goto IL_133;
                        }
                    }
                    lstMyItems2 = RobotImageLoader.robotImages.FirstOrDefault((LstMyItems o) => (long)o.PhotoId == RobotImageLoader.MinPhotoIdCriteria);
                    //goto IL_F9;
                }
                goto IL_13;
            }
        IL_133:
            RobotImageLoader._rfidSearch = 1;
            RobotImageLoader.LoadImages(searchDetails);
        }

        private void MyInkCanvas_KeyDown(object sender, KeyEventArgs e)
        {
            bool arg_57_0;
            bool arg_15C_0;
            if (this.GrdGreenScreenDefault.IsHitTestVisible)
            {
                bool expr_74 = arg_57_0 = (e.Key == Key.OemPlus);
                if (8 == 0)
                {
                    goto IL_56;
                }
                bool expr_7A = arg_15C_0 = !expr_74;
                if (false)
                {
                    goto IL_37;
                }
                if (!expr_7A)
                {
                    this.attribute.Width += 1.0;
                    this.attribute.Height += 1.0;
                    goto IL_BD;
                }
                goto IL_BD;
            }
        IL_1C:
            bool arg_CB_0;
            int expr_2C = (arg_CB_0 = (e.Key == Key.OemPlus)) ? 1 : 0;
            int arg_CB_1;
            int expr_2F = arg_CB_1 = 0;
            if (expr_2F != 0)
            {
                goto IL_CB;
            }
            arg_15C_0 = (expr_2C == expr_2F);
        IL_37:
            if (!arg_15C_0)
            {
            }
            arg_57_0 = (e.Key == Key.OemMinus);
        IL_56:
            bool flag = !arg_57_0;
            if (!false)
            {
                if (!flag)
                {
                }
                return;
            }
            goto IL_1C;
        IL_BD:
            arg_CB_0 = (e.Key == Key.OemMinus);
        IL_CA:
            arg_CB_1 = 0;
        IL_CB:
            if ((arg_CB_0 ? 1 : 0) != arg_CB_1)
            {
                bool expr_E6 = arg_CB_0 = (this.attribute.Width > 2.0);
                if (2 == 0)
                {
                    goto IL_CA;
                }
                if (expr_E6)
                {
                    this.attribute.Width -= 1.0;
                }
                this.attribute.Height -= 1.0;
                if (-1 == 0)
                {
                    goto IL_BD;
                }
            }
        }

        private void MyInkCanvas_MouseEnter(object sender, MouseEventArgs e)
        {
            //  redoCanvas = this.MyInkCanvas.Strokes.Clone();
            bool arg_D1_0;
            TransformGroup transformGroup;
            bool arg_B2_0;
            if (4 != 0)
            {
                // bool expr_17 = arg_D1_0 = (this.GrdsubGreenScreen.Visibility == Visibility.Visible);
                bool expr_17 = arg_D1_0 = (this.GrdChromaKeyNewScreen.Visibility == Visibility.Visible);
                bool expr_SP = this.GrdSPSEdition.Visibility == Visibility.Visible;

                if (2 == 0)
                {
                    goto IL_D1;
                }
                bool flag = expr_17;
                if (!flag)
                {
                    bool arg_3A4_0 = !this.SetRedeye || !this.move;
                    if (!false)
                    {
                        flag = arg_3A4_0;
                    }
                    if (!flag)
                    {
                        if (!false)
                        {
                            this.mainImage.Cursor = Cursors.None;
                        }
                    }
                    else
                    {
                        if (expr_SP)
                        {
                            goto LI_S9;
                        }
                        this.mainImage.Cursor = Cursors.Arrow;
                    }

                    return;
                }
            LI_S9:
                transformGroup = (this.MyInkCanvas.GetValue(UIElement.RenderTransformProperty) as TransformGroup);
                if (transformGroup != null)
                {
                    arg_B2_0 = !this.IsZoomed;
                    goto IL_B1;
                }
            }
            arg_B2_0 = true;
        IL_B1:
            Transform current;
            if (!arg_B2_0)
            {
                bool flag = transformGroup.Children.Count <= 0;
                arg_D1_0 = flag;
            }
            else
            {
                if (transformGroup != null)
                {
                    if (transformGroup.Children.Count > 0)
                    {
                        using (TransformCollection.Enumerator enumerator = transformGroup.Children.GetEnumerator())
                        {
                            while (enumerator.MoveNext())
                            {
                                current = enumerator.Current;
                                if (current is ScaleTransform)
                                {
                                    MainWindow.inkCanvasEllipse.Width = (MainWindow.inkCanvasRectangle.Width = this.attribute.Width * ((ScaleTransform)current).ScaleX);
                                    MainWindow.inkCanvasEllipse.Height = (MainWindow.inkCanvasRectangle.Height = this.attribute.Height * ((ScaleTransform)current).ScaleY);
                                    break;
                                }
                            }
                        }
                    }
                    goto IL_29D;
                }
                goto IL_29D;
            }
        IL_D1:
            if (!arg_D1_0)
            {
                if (5 == 0)
                {
                    goto IL_2E1;
                }
                TransformCollection.Enumerator enumerator = transformGroup.Children.GetEnumerator();
                try
                {
                    bool arg_108_0;
                    do
                    {
                        bool flag = enumerator.MoveNext();
                        bool expr_191 = arg_108_0 = flag;
                        if (!false)
                        {
                            if (!expr_191)
                            {
                                goto IL_19E;
                            }
                            do
                            {
                                current = enumerator.Current;
                            }
                            while (3 == 0);
                            arg_108_0 = !(current is ScaleTransform);
                        }
                    }
                    while (arg_108_0);
                    if (!IsFeather)
                    {

                        MainWindow.inkCanvasEllipse.Width = (MainWindow.inkCanvasRectangle.Width = this.attribute.Width * ((ScaleTransform)current).Value.Determinant);
                        MainWindow.inkCanvasEllipse.Height = (MainWindow.inkCanvasRectangle.Height = this.attribute.Height * ((ScaleTransform)current).Value.Determinant);
                    }
                    else
                    {
                        //  //  jay
                        MainWindow.inkCanvasEllipse.Width = (MainWindow.inkCanvasRectangle.Width = this.attribute.Width * ((ScaleTransform)current).ScaleX);
                        MainWindow.inkCanvasEllipse.Height = (MainWindow.inkCanvasRectangle.Height = this.attribute.Height * ((ScaleTransform)current).ScaleY);

                    }

                //MainWindow.inkCanvasEllipse.Width = (MainWindow.inkCanvasRectangle.Width = this.attribute.Width * ((ScaleTransform)current).Value.Determinant);
                //MainWindow.inkCanvasEllipse.Height = (MainWindow.inkCanvasRectangle.Height = this.attribute.Height * ((ScaleTransform)current).Value.Determinant);

                IL_19E:;
                }
                finally
                {
                    do
                    {
                        ((IDisposable)enumerator).Dispose();
                    }
                    while (-1 == 0);
                }
            }
        IL_29D:
            //MainWindow.inkCanvasEllipse.Fill = System.Windows.Media.Brushes.Red;
            //MainWindow.inkCanvasEllipse.StrokeThickness = 2.0;
            //MainWindow.inkCanvasEllipse.Stroke = System.Windows.Media.Brushes.Black;
            //jay
            MainWindow.inkCanvasEllipse.Fill = System.Windows.Media.Brushes.Transparent;
            MainWindow.inkCanvasEllipse.StrokeThickness = 2.0;
            MainWindow.inkCanvasEllipse.Stroke = System.Windows.Media.Brushes.Orange;

            //MainWindow.inkCanvasRectangle.Fill = System.Windows.Media.Brushes.Red; 10/12/2018 Sunil
        IL_2E1:
            MainWindow.inkCanvasRectangle.StrokeThickness = 2.0;
            MainWindow.inkCanvasRectangle.Stroke = System.Windows.Media.Brushes.Black;
            this.MyInkCanvas.UseCustomCursor = true;
            try
            {
                while (this.rectangleEraser)
                {
                    this.MyInkCanvas.Cursor = CursorHelper.CreateCursor(MainWindow.inkCanvasRectangle);
                    if (!false)
                    {
                        return;
                    }
                }
                this.MyInkCanvas.Cursor = CursorHelper.CreateCursor(MainWindow.inkCanvasEllipse);
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                this.MyInkCanvas.UseCustomCursor = false;
            }
        }

        private int NextGroupSelectedIndex(int currentIndex)
        {
            // int currentIndex = currentIndex;
            int num;
            int result;
            if (7 != 0)
            {
                num = -1;
                LstMyItems lstMyItems = (from y in this.lstStrip.Items.Cast<LstMyItems>().Where(delegate (LstMyItems o)
                {
                    if (!o.FilePath.Contains("Locked.png"))
                    {
                        goto IL_0D;
                    }
                    goto IL_1F;
                IL_20:
                    while (false)
                    {
                    }
                    bool arg_4F_0;
                    bool flag = arg_4F_0;
                    bool arg_30_0;
                    if (8 != 0)
                    {
                        if (!false)
                        {
                            arg_30_0 = flag;
                            return arg_30_0;
                        }
                        goto IL_1F;
                    }
                IL_0D:
                    arg_4F_0 = (arg_30_0 = (o.PhotoId > currentIndex));
                    if (true)
                    {
                        goto IL_20;
                    }
                    return arg_30_0;
                IL_1F:
                    arg_4F_0 = false;
                    goto IL_20;
                })
                                         orderby y.PhotoId
                                         select y).FirstOrDefault<LstMyItems>();
                if (!false)
                {
                    if (lstMyItems != null)
                    {
                        num = this.lstStrip.Items.IndexOf(lstMyItems);
                        goto IL_11A;
                    }
                    LstMyItems lstMyItems2 = (from y in this.lstStrip.Items.Cast<LstMyItems>().Where(delegate (LstMyItems o)
                    {
                        if (!o.FilePath.Contains("Locked.png"))
                        {
                            goto IL_0D;
                        }
                        goto IL_1F;
                    IL_20:
                        while (false)
                        {
                        }
                        bool arg_4F_0;
                        bool flag = arg_4F_0;
                        bool arg_30_0;
                        if (8 != 0)
                        {
                            if (!false)
                            {
                                arg_30_0 = flag;
                                return arg_30_0;
                            }
                            goto IL_1F;
                        }
                    IL_0D:
                        arg_4F_0 = (arg_30_0 = (o.PhotoId < currentIndex));
                        if (true)
                        {
                            goto IL_20;
                        }
                        return arg_30_0;
                    IL_1F:
                        arg_4F_0 = false;
                        goto IL_20;
                    })
                                              orderby y.PhotoId descending
                                              select y).FirstOrDefault<LstMyItems>();
                    if (lstMyItems2 == null)
                    {
                        goto IL_119;
                    }
                    num = this.lstStrip.Items.IndexOf(lstMyItems2);
                }
                if (3 == 0)
                {
                    return result;
                }
            }
        IL_119:
        IL_11A:
            result = num;
            return result;
        }

        private void NextRec()
        {
            int expr_A0;
            while (true)
            {
                int arg_13_0;
                if (RobotImageLoader._objnewincrement != null)
                {
                    arg_13_0 = RobotImageLoader._objnewincrement.Count;
                    goto IL_12;
                }
                goto IL_40;
            IL_44:
                bool arg_F3_0;
                bool flag = arg_F3_0;
                bool arg_52_0;
                if (!false)
                {
                    arg_52_0 = flag;
                    goto IL_52;
                }
                continue;
            IL_12:
                if (arg_13_0 > 0)
                {
                    arg_F3_0 = (arg_52_0 = (RobotImageLoader.MinPhotoId != (long)RobotImageLoader._objnewincrement[RobotImageLoader._objnewincrement.Count - 1].PhotoId));
                    if (!false)
                    {
                        goto IL_44;
                    }
                    goto IL_52;
                }
            IL_40:
                if (!false)
                {
                    arg_F3_0 = true;
                    goto IL_44;
                }
                break;
            IL_52:
                if (!arg_52_0)
                {
                    break;
                }
                int arg_9C_0;
                bool expr_8C = (arg_13_0 = (arg_9C_0 = ((string.Compare(RobotImageLoader.SearchCriteria, "Group", true) == 0) ? 1 : 0))) != 0;
                if (!false)
                {
                    flag = !expr_8C;
                    arg_9C_0 = (arg_13_0 = (flag ? 1 : 0));
                }
                while (!false)
                {
                    if (arg_9C_0 != 0)
                    {
                        goto IL_C4;
                    }
                    expr_A0 = (arg_13_0 = (arg_9C_0 = 0));
                    if (expr_A0 == 0)
                    {
                        goto Block_8;
                    }
                }
                goto IL_12;
            }
            RobotImageLoader.currentCount = 0;
            MessageBox.Show("No more records found!", "PhotoSW i-Mix", MessageBoxButton.OK, MessageBoxImage.Asterisk);
            this.IsMoreImages = false;
            return;
        Block_8:
            RobotImageLoader.currentCount = expr_A0;
            MessageBox.Show("No more records found!", "PhotoSW i-Mix", MessageBoxButton.OK, MessageBoxImage.Asterisk);
            this.IsMoreImages = false;
            return;
        IL_C4:
            RobotImageLoader.LoadImages();
        }

        private void Noeffect()
        {
            do
            {
                this.GrdInvert.Effect = null;
            }
            while (7 == 0);
            this.GrdSharpen.Effect = null;
            do
            {
                this.GrdSketchGranite.Effect = null;
                this.GrdEmboss.Effect = null;
                this.Grdcartoonize.Effect = null;
            }
            while (false);
            this.GrdGreyScale.Effect = null;
            this.GrdHueShift.Effect = null;
            if (!true)
            {
                goto IL_CB;
            }
            this.GrdSepia.Effect = null;
            this.GrdUnderWater.Effect = null;
            this.GrdBrightness.Effect = null;
            this.GrdSharpen.Effect = null;
        IL_AD:
            this.hueshift = 0.0;
            this.sharpen = 0.0;
        IL_CB:
            this._GreyScale = "0";
            do
            {
                this._invert = "0";
                if (false)
                {
                    return;
                }
                this._emboss = "0";
                if (false)
                {
                    goto IL_AD;
                }
                this._granite = "0";
                this._cartoon = "0";
                this._Sharepen = "##";
                this._hue = "##";
                this._sepia = "0";
                this._defoger = "0";
                this._underwater = "0";
                this._digimagic = "0";
            }
            while (-1 == 0);
            base.UpdateLayout();
        }

        private void objCurrent_Loaded(object sender, RoutedEventArgs e)
        {
            if (7 != 0)
            {
                if (!false)
                {
                    UIElement expr_09 = this.frm;
                    double expr_2A = (this.dragCanvas.ActualWidth - this.frm.ActualWidth) / 2.0;
                    if (expr_2A >= 0)
                    {
                        if (!false)
                        {
                            Canvas.SetLeft(expr_09, expr_2A);
                        }
                    }
                    else
                    {
                        goto IL_CB;
                    }
                }
            }
            Canvas.SetTop(this.frm, (this.dragCanvas.ActualHeight - this.frm.ActualHeight) / 2.0);
        IL_CB:;
        }

        private void OkButton_Click(object sender, RoutedEventArgs e)
        {
            PopupButton.IsChecked = false;
            this.IsImageDirtyState = true;
            try
            {
                try
                {
                    this.IsImageDirtyState = true;
                    bool arg_19C_0;
                    int arg_19C_1;
                    do
                    {
                        this.btnSelectReverse.IsEnabled = false;
                        if (!false)
                        {
                            this.Crop();
                        }
                        this.btnrotate.IsEnabled = true;
                        this.btnrotate.IsEnabled = true;
                        this.btnModerate.IsEnabled = true;
                        this.btnflip.IsEnabled = true;
                        int expr_77 = (arg_19C_0 = (this.rotateangle > 0)) ? 1 : 0;
                        int expr_7A = arg_19C_1 = 0;
                        if (expr_7A != 0)
                        {
                            goto IL_19C;
                        }
                        if (expr_77 != expr_7A)
                        {
                            VisualStateManager.GoToState(this.btnrotate, "Checked", true);
                            VisualStateManager.GoToState(this.btnantirotate, "Checked", true);
                            this.btnCrop.IsEnabled = false;
                        }
                        else
                        {
                            VisualStateManager.GoToState(this.btnrotate, "Unchecked", true);
                            VisualStateManager.GoToState(this.btnantirotate, "Unchecked", true);
                        }
                        this.btnantirotate.IsEnabled = true;
                        this.btnAddgraphics.IsEnabled = true;
                        this.GrdFirst.Visibility = Visibility.Visible;
                        this.GrdsubCrop.Visibility = Visibility.Hidden;
                        this.lstStrip.Visibility = Visibility.Visible;
                        this.GrdEffects.Visibility = Visibility.Visible;
                        this.SaveXml("Crop", this.CropSize, false);
                        if (this.IsCropped)
                        {
                            this.SaveCropEffectsintoDB();
                            this.btnCrop.IsEnabled = false;
                        }
                        this.imgRotateCrop.UpdateLayout();
                        this.GrdZomout.InvalidateArrange();
                    }
                    while (!true);
                    bool arg_1A2_0;
                    if (this.IsCropped || this.FlipMode != 0 || this.FlipModeY != 0)
                    {
                        arg_1A2_0 = false;
                        goto IL_1A1;
                    }
                    arg_19C_0 = (this.rotateangle > 0);
                    arg_19C_1 = 0;
                IL_19C:
                    arg_1A2_0 = ((arg_19C_0 ? 1 : 0) == arg_19C_1);
                IL_1A1:
                    if (!arg_1A2_0)
                    {
                        RenderTargetBitmap mainImageSouce = this.CaptureScreenForCrop(this.GrdZomout, CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, false);
                        this.SaveCropNRedEyeImage(mainImageSouce, "Crop");
                        FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename));
                        try
                        {
                            BitmapImage bitmapImage = new BitmapImage();
                            MemoryStream memoryStream = new MemoryStream();
                            if (8 != 0)
                            {
                                fileStream.CopyTo(memoryStream);
                                memoryStream.Seek(0L, SeekOrigin.Begin);
                                while (!false)
                                {
                                    fileStream.Close();
                                    if (7 != 0)
                                    {
                                        bitmapImage.BeginInit();
                                    }
                                    bitmapImage.StreamSource = memoryStream;
                                    bitmapImage.EndInit();
                                    if (!false)
                                    {
                                        this.mainImageundo.Source = (this.mainImage.Source = bitmapImage);
                                        goto IL_24D;
                                    }
                                }
                                goto IL_25A;
                            }
                        IL_24D:
                            this.widthimg.Source = bitmapImage;
                        IL_25A:
                            this.imgRotateCrop.Source = bitmapImage;
                            CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                            CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                            bitmapImage.Freeze();
                        }
                        finally
                        {
                            bool flag;
                            do
                            {
                                flag = (fileStream == null);
                            }
                            while (false);
                            if (!flag)
                            {
                                ((IDisposable)fileStream).Dispose();
                            }
                        }
                    }
                    this.forWdht.Height = this.widthimg.Source.Height;
                    this.forWdht.Width = this.widthimg.Source.Width;
                    this.grdZoomCanvas.Visibility = Visibility.Visible;
                    this.GrdRotateCropParent.Visibility = Visibility.Collapsed;
                    this.Zomout(true);
                    this.GrdRotate.LayoutTransform = new TransformGroup();
                    if (this.FlipMode != 0 || this.FlipModeY != 0)
                    {
                        this.btnCrop.IsEnabled = false;
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                if (4 != 0)
                {
                }
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
        }

        private void OkButtoncolor_Click(object sender, RoutedEventArgs e)
        {
            this.PopupButton.IsChecked = false;
            try
            {
                luminosityPopup();
                this.OkButtoncolorAct.Visibility = Visibility.Visible;
                while (true)
                {
                    this.IsImageDirtyState = true;
                    if (2 != 0)
                    {
                        this.GrdsubColoreffects.Visibility = Visibility.Collapsed;
                    }
                    this.GrdsubColoreffects.Visibility = Visibility.Collapsed;
                    if (false)
                    {
                        goto IL_112;
                    }
                    this.ColorEffectsIMG.Visibility = Visibility.Collapsed;
                    if (5 == 0)
                    {
                        goto IL_CD;
                    }
                    this.IMGFrame.Visibility = Visibility.Visible;
                    this.SaveXml("brightness", this.bright.ToString(), false);
                    this.SaveXml("contrast", this.cont.ToString(), false);
                IL_90:
                    if (6 == 0)
                    {
                        continue;
                    }
                    this.currentbrightness = this.bright;
                    do
                    {
                        this.currentcontrast = this.cont;
                    }
                    while (-1 == 0);
                    this.IsEffectChange = true;
                    double arg_DC_0;
                    double expr_BA = arg_DC_0 = this.bright;
                    if (4 == 0)
                    {
                        goto IL_D3;
                    }
                    if (expr_BA == 0.0)
                    {
                        goto IL_CD;
                    }
                    bool arg_E5_0 = true;
                    goto IL_E4;
                IL_113:
                    this.EnableSideButton();
                    if (!false)
                    {
                        break;
                    }
                    goto IL_90;
                IL_112:
                    goto IL_113;
                IL_E4:
                    if (!arg_E5_0)
                    {
                        VisualStateManager.GoToState(this.btnColorEffects, "Unchecked", true);
                        goto IL_113;
                    }
                    VisualStateManager.GoToState(this.btnColorEffects, "Checked", true);
                    goto IL_112;
                IL_D3:
                    arg_E5_0 = (arg_DC_0 != 1.0);
                    goto IL_E4;
                IL_CD:
                    arg_DC_0 = this.cont;
                    goto IL_D3;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void OkButtonSPSEditor_Click(object sender, RoutedEventArgs e)
        {
            if (3 != 0)
            {
                this.GrdSPSEdition.Visibility = Visibility.Collapsed;
            }
            do
            {

                this.LstGridEffects.Clear();
                this.IsEffectChange = true;

            }
            while (false);
            this.EnableSideButton();
        }

        private void OkButtonCollage_Click(object sender, RoutedEventArgs e)
        {

            if (3 != 0)
            {
                this.GrdCollage.Visibility = Visibility.Collapsed;
            }
            do
            {

                this.LstGridEffects.Clear();
                this.IsEffectChange = true;
                this.IsCollageChanged = true;

            }
            while (false);
            this.EnableSideButton();
        }


        private void OkButtoncolorGIF_Click(object sender, RoutedEventArgs e)
        {
           
            if (3 != 0)
            {
                this.GrdCollage.Visibility = Visibility.Collapsed;
                this.OkButtoncolorActGIF.Visibility = Visibility.Visible;
                //  this.GrdProgressBar.Visibility = Visibility.Visible;
            }
            do
            {
                this.LstGridEffects.Clear();
                this.IsEffectChange = true;
                this.IsGIFAnimationChanged = true;

               
                //InitializeBackgroundWorker();
            }
            while (false);
            this.EnableSideButton();
        }


        void Worker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            MyProgressBar.Value = e.ProgressPercentage;
        }

        private void Worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            MyProgressBar.Visibility = Visibility.Collapsed;
            //MyProgressLabel.Visibility = Visibility.Collapsed;
            spinner.Visibility = Visibility.Collapsed;
            OkButtoncolorGIF.IsEnabled = true;
        }


        private void Worker_DoWork(object sender, DoWorkEventArgs e)
        {
            long sum = 0;
            long total = 100000;
            for (long i = 1; i <= total; i++)
            {
                sum += i;
                int percentage = Convert.ToInt32(((double)i / total) * 100);
                Dispatcher.Invoke(new System.Action(() =>
                {
                    worker.ReportProgress(percentage);
                }));
            }
            MessageBox.Show("Gif Load Success Full....!");
        }
        private void OkButtoncoloreffect_Click(object sender, RoutedEventArgs e)
        {
            this.IsImageDirtyState = true;
            if (3 != 0)
            {
                this.GrdsubCrop.Visibility = Visibility.Hidden;
            }
            do
            {
                this.GrdFirst.Visibility = Visibility.Visible;
                this.GrdsubEffects.Visibility = Visibility.Collapsed;
                this.GrdsubColoreffects.Visibility = Visibility.Collapsed;
                this.SaveXml("greyscale", this._GreyScale, true);
            }
            while (!true);
            this.SaveXml("sharpen", this._Sharepen, true);
            if (6 != 0)
            {
                this.SaveXml("emboss", this._emboss, true);
            }
            do
            {
                this.SaveXml("invert", this._invert, true);
                this.SaveXml("hue", this._hue, true);
                this.SaveXml("cartoon", this._cartoon, true);
                this.SaveXml("granite", this._granite, true);
                this.SaveXml("sepia", this._sepia, true);
                this.SaveXml("defog", this._defoger, true);
                this.SaveXml("underwater", this._underwater, true);
                this.SaveXml("digimagic", this._digimagic, true);
                this.currentsharpen = this.sharpen;
                this.currenthueshift = this.hueshift;
                this.LstGridEffects.Clear();
                this.IsEffectChange = true;
                if (4 == 0)
                {
                    return;
                }
                this.ChangeCheckedEffect();
            }
            while (false);
            this.EnableSideButton();
        }

        private void OkButtoncolorfilter_Click(object sender, RoutedEventArgs e)
        {

            this.IsImageDirtyState = true;
            while (true)
            {
            IL_10:
                this.GrdsubCrop.Visibility = Visibility.Hidden;
                this.GrdsubEffects.Visibility = Visibility.Collapsed;
                while (true)
                {
                    while (true)
                    {
                        UIElement expr_37 = this.GrdsubColoreffects;
                        Visibility expr_3C = Visibility.Collapsed;
                        if (!false)
                        {
                            expr_37.Visibility = expr_3C;
                        }
                        if (!false)
                        {
                            this.GrdsubColorFilters.Visibility = Visibility.Collapsed;
                            if (8 != 0)
                            {
                                break;
                            }
                        }
                    }
                    this.SaveXml("colourvalue", this.colour, false);
                    while (true)
                    {
                        this.currentcolor = this.color;
                        this.IsEffectChange = true;
                        this.ChangeCheckedColor(this.colour);
                        if (7 == 0)
                        {
                            break;
                        }
                        if (-1 == 0)
                        {
                            goto IL_10;
                        }
                        this.EnableSideButton();
                        if (5 != 0)
                        {
                            return;
                        }
                    }
                }
            }
        }

        private void OkButtonGreenScreen_Click(object sender, RoutedEventArgs e)
        {

            if (this.imageundoGrid.Background != null)
            {
                if (!false)
                {
                    this.GrdChromaKeyNewScreen.Visibility = Visibility.Collapsed;
                    PopupButton.IsChecked = false;
                    this.OkCancelMask.Visibility = Visibility.Collapsed;
                    this.GrdChromaKeyMaskingScreen.Visibility = Visibility.Collapsed;
                    this.btnKeepBottom.Visibility = Visibility.Collapsed;
                    this.btnKeepTop.Visibility = Visibility.Collapsed;
                }
                this.IsChromaChanged = true;
                this.isChromaApplied = true;
                ToggleButton expr_33 = this.ChkForground;
                bool? expr_56C = new bool?(true);
                if (!false)
                {
                    expr_33.IsChecked = expr_56C;
                }
                this.ChkBackground.IsChecked = new bool?(true);
                this.imageundoGrid.IsHitTestVisible = false;
                if (this.isChromaApplied)
                {
                    goto IL_E3;
                }
                if (this.MyInkCanvas.Children.Count > 1)
                {
                    this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                }
            IL_B0:
                if (this.MyInkCanvas.Strokes.Count > 0)
                {
                    if (false)
                    {
                        goto IL_306;
                    }
                    this.MyInkCanvas.Strokes.Clear();
                }
            IL_E3:
                this.GrdsubGreenScreen.Visibility = Visibility.Collapsed;
                this.dragCanvas.IsEnabled = true;
                this.dragCanvas.AllowDragging = true;
                this.greenEraser.Visibility = Visibility.Collapsed;
                this.squre.Visibility = Visibility.Hidden;
                do
                {
                    this.mainImage.Cursor = Cursors.Arrow;
                }
                while (6 == 0);
                this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                this.GrdGreenScreenDefault.IsHitTestVisible = true;
                this.IsEraserActive = false;
                this.IsEraserDrawEllipseActive = false;
                this.IsEraserDrawRectangleActive = false;
                this.IsGreenCorrection = false;
                // this.GrdFirst.Visibility = Visibility.Collapsed;
                this.GrdSubGraphics.Visibility = Visibility.Visible;
                this.GrdSubGraphics1.Visibility = Visibility.Visible;
                if (this.ChromaZoomFactor == 0.0)
                {
                    this._ZoomFactor = 1.0;
                }
                else
                {
                    this._ZoomFactor = this.ChromaZoomFactor;
                }
                this._maxZoomFactor = 4.0;
                if (this.zoomTransform != null)
                {
                    bool arg_1EB_0;
                    if (this.FlipMode == 0)
                    {
                        arg_1EB_0 = (this.FlipModeY == 0);
                    }
                    else
                    {
                        if (false)
                        {
                            goto IL_52F;
                        }
                        arg_1EB_0 = false;
                    }
                    if (!arg_1EB_0)
                    {
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                        this.zoomTransform.ScaleX = this._ZoomFactor;
                        this.zoomTransform.ScaleY = this._ZoomFactor;
                    }
                    else
                    {
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                        this.zoomTransform.ScaleX = this._ZoomFactor;
                        this.zoomTransform.ScaleY = this._ZoomFactor;
                    }
                }
            IL_257:
            IL_2C1:
                this.GrdEffects.Visibility = Visibility.Collapsed;
                this.lstBackground.Visibility = Visibility.Collapsed;
                this.Zomout(true);
                this.MyInkCanvas.Visibility = Visibility.Visible;
                if (false)
                {
                    goto IL_2C1;
                }
                if (this.imageundoGrid.Background == null)
                {
                    goto IL_328;
                }
            IL_306:
                this.imageundoGrid.Background.Opacity = 1.0;
                if (false)
                {
                    goto IL_257;
                }
            IL_328:
                this.MyInkCanvas.Visibility = Visibility.Visible;
                this._ZoomFactor = 0.975;
                this.ZoomInButton_Click1(sender, e);
                this.IsZoomed = false;
                this.mainImageundo.OpacityMask = null;
                if (2 == 0)
                {
                    goto IL_B0;
                }
                VisualBrush opacityMask = new VisualBrush(this.Opacitymsk);
                this.canbackground.OpacityMask = opacityMask;
                this.EnableSideButton();
                this.btnPrintToGroup.IsEnabled = true;
                this.btnPlaceOrder.IsEnabled = true;
                this.imageundoGrid.Background.Opacity = 0.0;
                this.ResizeForWdth(this.GrdGreenScreenDefault3.ActualHeight, this.GrdGreenScreenDefault3.ActualWidth);
                this.SaveGreenScreenImage();
                this.imageundoGrid.Background.Opacity = 1.0;
                this.ResizeForWdth(this.imageundoGrid.Height, this.imageundoGrid.Width);
                if (!false)
                {
                    if (false)
                    {
                        goto IL_4D8;
                    }
                    this.ApplyEffectsAgainAfterChroma();
                    this.ShowGraphics();
                    this.IsBlockEraseActive = false;
                    this.IsInverseEraseActive = false;
                    this.rdbBlockErase.IsChecked = new bool?(false);
                    this.rdbInverseErase.IsChecked = new bool?(false);
                    this.rdbRevert.IsChecked = new bool?(false);
                    this.rdbErase.IsChecked = new bool?(false);
                }
                this.tabCroma.IsSelected = true;
                this.tabCroma.Focus();
                this.IsImageDirtyState = true;
                this.btnPrintToGroup.Visibility = Visibility.Visible;
                if (!this.isPrintButtonsVisible)
                {
                    goto IL_4DA;
                }
                this.btn6X8Print.Visibility = Visibility.Visible;
            IL_4CB:
                this.btn8X10Print.Visibility = Visibility.Visible;
            IL_4D8:
            IL_4DA:
                if (this.ChromaZoomFactor == 0.0)
                {
                    this._ZoomFactor = 1.0;
                }
                else
                {
                    this._ZoomFactor = this.ChromaZoomFactor;
                }
                try
                {
                    PhotoBusiness photoBusiness = new PhotoBusiness();
                    photoBusiness.SaveIsGreenPhotos((long)this.PhotoId, true);
                }
                catch
                {
                }
            IL_52F:
                if (false)
                {
                    goto IL_4CB;
                }
            }
            else
            {
                MessageBox.Show("Please Select Background");
            }
        }

        private void OkButtonredeye_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                PopupButton.IsChecked = false;
                bool expr_07 = true;
                if (3 != 0)
                {
                    this.IsImageDirtyState = expr_07;
                }
                int num = this._x;
                int num2 = this._y;
                int num3 = this._x + (int)this.ellipse.Width;
                int num4 = this._y + (int)this.ellipse.Height;
                num = Math.Max(0, num);
                num3 = (int)Math.Min(this.mainImage.ActualWidth, (double)num3);
                num2 = Math.Max(0, num2);
                num4 = (int)Math.Min(this.mainImage.ActualHeight, (double)num4);
                double num5 = 1.0;
                double num6 = 1.0;
                num = (int)((double)num * num5);
                num3 = (int)((double)num3 * num5);
                num2 = (int)((double)num2 * num6);
                num4 = (int)((double)num4 * num6);
                if (this.SetRedeye)
                {
                    this.IsEffectChange = true;
                    PhotoBusiness photoBusiness = new PhotoBusiness();
                    photoBusiness.SaveIsCropedPhotos((long)this.PhotoId, true, "RedEye");
                    VisualStateManager.GoToState(this.RedEye, "Checked", true);
                    this.RedeyePreview.Visibility = Visibility.Collapsed;
                    this.ellipse.Visibility = Visibility.Collapsed;
                    this.GrdsubRedEye1.Visibility = Visibility.Hidden;/////
                    this.GrdsubRedEye.Visibility = Visibility.Hidden;
                    this.GrdFirst.Visibility = Visibility.Visible;
                    if (!this.redeffectfirstApplied)
                    {
                        this.redEyeEffect.RedeyeTrue = 1.0;
                        this.GrdRedEyeFirst.Effect = this.redEyeEffect;
                        this.redEyeEffect.Center = new System.Windows.Point(this.pos.X / this.mainImage.ActualWidth, this.pos.Y / this.mainImage.ActualHeight);
                        if (!false)
                        {
                            this.redeffectfirstApplied = true;
                            this.redEyeEffect.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                            this.SaveXml("firstredeye", "true", false);
                            this.SaveXml("Aspectratiofirstredeye", this.redEyeEffect.AspectRatio.ToString(), false);
                            this.SaveXml("firstradius", this.redEyeEffect.Radius.ToString(), false);
                            this.SaveXml("firstcenterx", this.redEyeEffect.Center.X.ToString(), false);
                            this.SaveXml("firstcentery", this.redEyeEffect.Center.Y.ToString(), false);
                            goto IL_ADB;
                        }
                    }
                    else if (!this.redeffectsecondApplied)
                    {
                        this.redEyeEffectSecond.RedeyeTrue = 1.0;
                        this.redEyeEffectSecond.Center = new System.Windows.Point(this.pos.X / this.mainImage.ActualWidth, this.pos.Y / this.mainImage.ActualHeight);
                        this.redeffectsecondApplied = true;
                        this.redEyeEffectSecond.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                        this.GrdRedEyeSecond.Effect = this.redEyeEffectSecond;
                        this.SaveXml("secondredeye", "true", false);
                        this.SaveXml("Aspectratiosecondredeye", this.redEyeEffect.AspectRatio.ToString(), false);
                    }
                    else
                    {
                        if (!this.redeffectmultiple1Applied)
                        {
                            this.redEyeEffectMultiple.RedeyeTrue = 1.0;
                            this.redEyeEffectMultiple.Center = new System.Windows.Point(this.pos.X / this.mainImage.ActualWidth, this.pos.Y / this.mainImage.ActualHeight);
                            this.redeffectmultiple1Applied = true;
                            this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                            this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                            this.SaveXml("multipleredeye1", "true", false);
                            this.SaveXml("multipleradius1", this.redEyeEffectMultiple.Radius.ToString(), false);
                            this.SaveXml("multiplecenterx1", this.redEyeEffectMultiple.Center.X.ToString(), false);
                            this.SaveXml("multiplecentery1", this.redEyeEffectMultiple.Center.Y.ToString(), false);
                            goto IL_ADB;
                        }
                        if (!this.redeffectmultiple2Applied)
                        {
                            this.redEyeEffectMultiple.RedeyeTrue1 = 1.0;
                            this.redEyeEffectMultiple.Center1 = new System.Windows.Point(this.pos.X / this.mainImage.ActualWidth, this.pos.Y / this.mainImage.ActualHeight);
                            this.redeffectmultiple2Applied = true;
                            this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                            this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                            this.SaveXml("multipleredeye2", "true", false);
                            this.SaveXml("multipleradius2", this.redEyeEffectMultiple.Radius1.ToString(), false);
                            this.SaveXml("multiplecenterx2", this.redEyeEffectMultiple.Center1.X.ToString(), false);
                            this.SaveXml("multiplecentery2", this.redEyeEffectMultiple.Center1.Y.ToString(), false);
                            goto IL_ADB;
                        }
                        if (!this.redeffectmultiple3Applied)
                        {
                            this.redEyeEffectMultiple.RedeyeTrue2 = 1.0;
                            this.redEyeEffectMultiple.Center2 = new System.Windows.Point(this.pos.X / this.mainImage.ActualWidth, this.pos.Y / this.mainImage.ActualHeight);
                            this.redeffectmultiple3Applied = true;
                            this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                            this.GrdRedEyeMultiple.Effect = this.redEyeEffectMultiple;
                            this.SaveXml("multipleredeye3", "true", false);
                            this.SaveXml("multipleradius3", this.redEyeEffectMultiple.Radius2.ToString(), false);
                            this.SaveXml("multiplecenterx3", this.redEyeEffectMultiple.Center2.X.ToString(), false);
                            this.SaveXml("multiplecentery3", this.redEyeEffectMultiple.Center2.Y.ToString(), false);
                            goto IL_ADB;
                        }
                        if (!this.redeffectmultiple4Applied)
                        {
                            this.redEyeEffectMultiple1.RedeyeTrue = 1.0;
                            this.redEyeEffectMultiple1.Center = new System.Windows.Point(this.pos.X / this.mainImage.ActualWidth, this.pos.Y / this.mainImage.ActualHeight);
                            this.redeffectmultiple4Applied = true;
                            this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                            this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                            this.SaveXml("multipleredeye4", "true", false);
                            this.SaveXml("multipleradius4", this.redEyeEffectMultiple1.Radius.ToString(), false);
                            this.SaveXml("multiplecenterx4", this.redEyeEffectMultiple1.Center.X.ToString(), false);
                            this.SaveXml("multiplecentery4", this.redEyeEffectMultiple1.Center.Y.ToString(), false);
                            goto IL_ADB;
                        }
                        if (!this.redeffectmultiple5Applied)
                        {
                            this.redEyeEffectMultiple1.RedeyeTrue1 = 1.0;
                            this.redEyeEffectMultiple1.Center1 = new System.Windows.Point(this.pos.X / this.mainImage.ActualWidth, this.pos.Y / this.mainImage.ActualHeight);
                            this.redeffectmultiple5Applied = true;
                            this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                            this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                            this.SaveXml("multipleredeye5", "true", false);
                            this.SaveXml("multipleradius5", this.redEyeEffectMultiple1.Radius1.ToString(), false);
                            this.SaveXml("multiplecenterx5", this.redEyeEffectMultiple1.Center1.X.ToString(), false);
                            this.SaveXml("multiplecentery5", this.redEyeEffectMultiple1.Center1.Y.ToString(), false);
                            goto IL_ADB;
                        }
                        if (!this.redeffectmultiple6Applied)
                        {
                            this.redEyeEffectMultiple1.RedeyeTrue2 = 1.0;
                            this.redEyeEffectMultiple1.Center2 = new System.Windows.Point(this.pos.X / this.mainImage.ActualWidth, this.pos.Y / this.mainImage.ActualHeight);
                            this.redeffectmultiple6Applied = true;
                            this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                            this.GrdRedEyeMultiple1.Effect = this.redEyeEffectMultiple1;
                            this.SaveXml("multipleredeye6", "true", false);
                            this.SaveXml("multipleradius6", this.redEyeEffectMultiple1.Radius2.ToString(), false);
                            this.SaveXml("multiplecenterx6", this.redEyeEffectMultiple1.Center2.X.ToString(), false);
                            this.SaveXml("multiplecentery6", this.redEyeEffectMultiple1.Center2.Y.ToString(), false);
                            goto IL_ADB;
                        }
                        goto IL_ADB;
                    }
                    this.SaveXml("secondradius", this.redEyeEffectSecond.Radius.ToString(), false);
                    this.SaveXml("secondcenterx", this.redEyeEffectSecond.Center.X.ToString(), false);
                    this.SaveXml("secondcentery", this.redEyeEffectSecond.Center.Y.ToString(), false);
                IL_ADB:;
                }
                BitmapSource bitmapSource = (BitmapSource)this.mainImage.Source;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void SpacingPlus_Click(object sender, RoutedEventArgs e)
        {
            collageBottonImage();
            this.SpacingPlusImg.Source = new BitmapImage(new Uri("/images/plus_new_act.png", UriKind.Relative));
            this.btnSpacingImg.Source = new BitmapImage(new Uri("/images/cSpacingAct.png", UriKind.Relative));
            this.SpacingMinusImg.Source = new BitmapImage(new Uri("/images/munis_new_act.png", UriKind.Relative));

            double thickness = 0;
            bool arg_4A_0;
            bool arg_4B_0 = arg_4A_0 = (this.CollageFour.Visibility == Visibility.Collapsed);
            bool arg_3B_0 = arg_4A_0 = (this.CollageThree.Visibility == Visibility.Collapsed);
            bool arg_5B_0 = arg_4A_0 = (this.CollageFive.Visibility == Visibility.Collapsed);
            bool arg_6B_0 = arg_4A_0 = (this.CollageSix.Visibility == Visibility.Collapsed);
            bool arg_7A_0 = arg_4A_0 = (this.CollageSeven.Visibility == Visibility.Collapsed);
            bool arg_7AA_0 = arg_4A_0 = (this.CollageSevenA.Visibility == Visibility.Collapsed);
            bool arg_7BB_0 = arg_4A_0 = (this.CollageSevenB.Visibility == Visibility.Collapsed);

            if (!arg_4B_0)
            {
                thickness = BorderFour1.BorderThickness.Bottom + 1;
                if (thickness < 15)
                {
                    this.BorderFour1.BorderThickness = new Thickness(thickness);
                    this.BorderFour2.BorderThickness = new Thickness(thickness);
                    this.BorderFour3.BorderThickness = new Thickness(thickness);
                    this.BorderFour4.BorderThickness = new Thickness(thickness);
                }
            }
            if (!arg_3B_0)
            {
                thickness = BorderThree1.BorderThickness.Bottom + 1;
                if (thickness < 15)
                {
                    this.BorderThree1.BorderThickness = new Thickness(thickness);
                    this.BorderThree2.BorderThickness = new Thickness(thickness);
                    this.BorderThree3.BorderThickness = new Thickness(thickness);
                }
            }
            if (!arg_5B_0)
            {
                thickness = BorderFive1.BorderThickness.Bottom + 1;
                if (thickness < 15)
                {
                    this.BorderFive1.BorderThickness = new Thickness(thickness);
                    this.BorderFive2.BorderThickness = new Thickness(thickness);
                    this.BorderFive3.BorderThickness = new Thickness(thickness);
                    this.BorderFive4.BorderThickness = new Thickness(thickness);
                    this.BorderFive5.BorderThickness = new Thickness(thickness);
                }
            }
            if (!arg_6B_0)
            {
                thickness = BorderSix1.BorderThickness.Bottom + 1;
                if (thickness < 15)
                {
                    this.BorderSix1.BorderThickness = new Thickness(thickness);
                    this.BorderSix2.BorderThickness = new Thickness(thickness);
                    this.BorderSix3.BorderThickness = new Thickness(thickness);
                    this.BorderSix4.BorderThickness = new Thickness(thickness);
                    this.BorderSix5.BorderThickness = new Thickness(thickness);
                    this.BorderSix6.BorderThickness = new Thickness(thickness);

                }
            }

            if (!arg_7A_0)
            {
                double thicknessPolygram = this.Polugonleft1.StrokeThickness + 1;
                if (thicknessPolygram < 15)
                {
                    this.Polugonleft1.StrokeThickness = thicknessPolygram;
                    this.Polugonleft2.StrokeThickness = thicknessPolygram;
                    this.PolygonTop.StrokeThickness = thicknessPolygram;
                    this.PolygonCenter.StrokeThickness = thicknessPolygram;
                    this.PolygonBottom.StrokeThickness = thicknessPolygram;
                    this.PolygonRight1.StrokeThickness = thicknessPolygram;
                    this.PolygonRight2.StrokeThickness = thicknessPolygram;
                }
            }
            if (!arg_7AA_0)
            {
                thickness = BorderSevenA1.BorderThickness.Bottom + 1;
                if (thickness < 15)
                {
                    this.BorderSevenA1.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA2.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA3.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA4.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA5.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA6.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA7.BorderThickness = new Thickness(thickness);
                }
            }
            if (!arg_7BB_0)
            {
                thickness = BorderSevenB1.BorderThickness.Bottom + 1;
                if (thickness < 15)
                {
                    this.BorderSevenB1.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB2.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB3.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB4.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB5.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB6.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB7.BorderThickness = new Thickness(thickness);
                }
            }
        }

        private void SpacingMinus_Click(object sender, RoutedEventArgs e)
        {

            collageBottonImage();
            this.SpacingPlusImg.Source = new BitmapImage(new Uri("/images/plus_new_act.png", UriKind.Relative));
            this.btnSpacingImg.Source = new BitmapImage(new Uri("/images/cSpacingAct.png", UriKind.Relative));
            this.SpacingMinusImg.Source = new BitmapImage(new Uri("/images/munis_new_act.png", UriKind.Relative));

            double thickness = 0;
            bool arg_4A_0;
            bool arg_4B_0 = arg_4A_0 = (this.CollageFour.Visibility == Visibility.Collapsed);
            bool arg_3B_0 = arg_4A_0 = (this.CollageThree.Visibility == Visibility.Collapsed);
            bool arg_5B_0 = arg_4A_0 = (this.CollageFive.Visibility == Visibility.Collapsed);
            bool arg_6B_0 = arg_4A_0 = (this.CollageSix.Visibility == Visibility.Collapsed);
            bool arg_7A_0 = arg_4A_0 = (this.CollageSeven.Visibility == Visibility.Collapsed);
            bool arg_7AA_0 = arg_4A_0 = (this.CollageSevenA.Visibility == Visibility.Collapsed);
            bool arg_7BB_0 = arg_4A_0 = (this.CollageSevenB.Visibility == Visibility.Collapsed);


            if (!arg_4B_0)
            {
                thickness = BorderFour1.BorderThickness.Bottom - 1;
                if (thickness > 1)
                {
                    this.BorderFour1.BorderThickness = new Thickness(thickness);
                    this.BorderFour2.BorderThickness = new Thickness(thickness);
                    this.BorderFour3.BorderThickness = new Thickness(thickness);
                    this.BorderFour4.BorderThickness = new Thickness(thickness);
                }
            }
            if (!arg_3B_0)
            {
                thickness = BorderThree1.BorderThickness.Bottom - 1;
                if (thickness > 1)
                {
                    this.BorderThree1.BorderThickness = new Thickness(thickness);
                    this.BorderThree2.BorderThickness = new Thickness(thickness);
                    this.BorderThree3.BorderThickness = new Thickness(thickness);
                }
            }
            if (!arg_5B_0)
            {
                thickness = BorderFive1.BorderThickness.Bottom - 1;
                if (thickness > 1)
                {
                    this.BorderFive1.BorderThickness = new Thickness(thickness);
                    this.BorderFive2.BorderThickness = new Thickness(thickness);
                    this.BorderFive3.BorderThickness = new Thickness(thickness);
                    this.BorderFive4.BorderThickness = new Thickness(thickness);
                    this.BorderFive5.BorderThickness = new Thickness(thickness);
                }
            }

            if (!arg_6B_0)
            {
                thickness = BorderSix1.BorderThickness.Bottom - 1;
                if (thickness > 1)
                {
                    this.BorderSix1.BorderThickness = new Thickness(thickness);
                    this.BorderSix2.BorderThickness = new Thickness(thickness);
                    this.BorderSix3.BorderThickness = new Thickness(thickness);
                    this.BorderSix4.BorderThickness = new Thickness(thickness);
                    this.BorderSix5.BorderThickness = new Thickness(thickness);
                    this.BorderSix6.BorderThickness = new Thickness(thickness);

                }
            }

            if (!arg_7A_0)
            {
                double thicknessPolygram = this.Polugonleft1.StrokeThickness - 1;
                if (thicknessPolygram > 2)
                {
                    this.Polugonleft1.StrokeThickness = thicknessPolygram;
                    this.Polugonleft2.StrokeThickness = thicknessPolygram;
                    this.PolygonTop.StrokeThickness = thicknessPolygram;
                    this.PolygonCenter.StrokeThickness = thicknessPolygram;
                    this.PolygonBottom.StrokeThickness = thicknessPolygram;
                    this.PolygonRight1.StrokeThickness = thicknessPolygram;
                    this.PolygonRight2.StrokeThickness = thicknessPolygram;
                }

            }
            if (!arg_7AA_0)
            {
                thickness = BorderSevenA1.BorderThickness.Bottom - 1;
                if (thickness > 1)
                {
                    this.BorderSevenA1.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA2.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA3.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA4.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA5.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA6.BorderThickness = new Thickness(thickness);
                    this.BorderSevenA7.BorderThickness = new Thickness(thickness);
                }
            }
            if (!arg_7BB_0)
            {
                thickness = BorderSevenB1.BorderThickness.Bottom - 1;
                if (thickness > 1)
                {
                    this.BorderSevenB1.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB2.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB3.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB4.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB5.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB6.BorderThickness = new Thickness(thickness);
                    this.BorderSevenB7.BorderThickness = new Thickness(thickness);
                }
            }

        }

        private void CollageSeven_Click(object sender, RoutedEventArgs e)
        {
            collageframe();
            this.sevenBottom.Source = new BitmapImage(new Uri("/images/collageAct_7A.png", UriKind.Relative));
            this.CollageSeven.Visibility = Visibility.Visible;
        }
        private void CollageSevenA_Click(object sender, RoutedEventArgs e)
        {
            collageframe();
            this.sevenBottomA.Source = new BitmapImage(new Uri("/images/collageAct_7B.png", UriKind.Relative));
            this.CollageSevenA.Visibility = Visibility.Visible;
        }

        private void CollageSevenB_Click(object sender, RoutedEventArgs e)
        {
            collageframe();
            this.sevenBottomB.Source = new BitmapImage(new Uri("/images/collageAct_7C.png", UriKind.Relative));
            this.CollageSevenB.Visibility = Visibility.Visible;
        }

        public void OnloadGIFAnimation(string graphicEffect, bool IsGumBallshow, List<int> listPhotoId)
        {
            do
            {
                this.IsGumBall = IsGumBallshow;
                this.gumshowDb = this.IsGumBall;
                this.RemoveGumball();
                this.IsImageDirtyState = false;
            }
            while (false);
            this.IsComingOnLoad = true;
            PhotoBusiness photoBusiness = new PhotoBusiness();
            // this.isGreenImage = isGreenImageParam;
            this.ChromaGridLeft = 0.0;
            this.ChromaGridTop = 0.0;
            this.ChromaCenterX = 0.0;
            this.ChromaCenterY = 0.0;
            this.ChromaZoomFactor = 0.0;
            this.ChromaBorderPath = string.Empty;
            this.OriginalBorder = string.Empty;
            this.BackgroundDBValue = string.Empty;
            this.BackgroundSelectedValue = string.Empty;
            this.elementForContextMenu = null;
            this.canbackgroundParent.Visibility = Visibility.Collapsed;
            this.canbackgroundRotate.RenderTransform = null;
            Panel.SetZIndex(this.imageundoGrid, 0);
            Panel.SetZIndex(this.canbackgroundParent, 4);
            Panel.SetZIndex(this.Opacitymsk, 2);
            Panel.SetZIndex(this.frm, 6);
            this.IsZoomed = false;
            this.GraphicEffect = graphicEffect;
            this.GrdsubRedEye.Visibility = Visibility.Hidden;
            this.GrdsubRedEye1.Visibility = Visibility.Hidden;
            this.GrdsubCrop.Visibility = Visibility.Hidden;
            this.GrdsubColoreffects.Visibility = Visibility.Hidden;
            this.GrdsubEffects.Visibility = Visibility.Hidden;
            this.GrdsubColorFilters.Visibility = Visibility.Hidden;
            this.GrdsubGreenScreen.Visibility = Visibility.Hidden;
            this.GrdSubGraphics.Visibility = Visibility.Hidden;
            this.GrdSubGraphics1.Visibility = Visibility.Hidden;
            this.spCollagePhotoAct.Visibility = Visibility.Visible;
            this.GrdGIFAnimation.Visibility = Visibility.Visible;
            this.btnPrintToGroup.Visibility = Visibility.Collapsed;
            this.EditPhotoImg.Source = new BitmapImage(new Uri("/images/editPhoto_iconAct.png", UriKind.Relative));
            this.collageframe();

            this.attributeWidth = (this.attributeHeight = 10.0);
            this.btnHighPreview.Visibility = ((LoginUser.IsHighResolution == false) ? Visibility.Collapsed : Visibility.Visible);
            if (!false)
            {
                this.txbPreviewHigh.Visibility = ((LoginUser.IsHighResolution == false) ? Visibility.Collapsed : Visibility.Visible);
                this._centerX = "";
                this._centerY = "";
                this.rotateangle = 0;
                this.FlipMode = 0;
                this.FlipModeY = 0;
                this.redeffectfirstApplied = false;
                this.redeffectsecondApplied = false;
                this.txtMainImage.Text = this.PhotoName;
                System.Windows.Controls.Image image = (System.Windows.Controls.Image)this.btnPrintToGroup.Content;
                LstMyItems lstMyItems = (from t in RobotImageLoader.PrintImages
                                         where t.Name == this.PhotoName
                                         select t).FirstOrDefault<LstMyItems>();
                if (lstMyItems != null)
                {
                    image.Source = new BitmapImage(new Uri("/images/print-accept.png", UriKind.Relative));
                }
                else
                {
                    image.Source = new BitmapImage(new Uri("/images/print-group.png", UriKind.Relative));
                }
                this.MyInkCanvas.SnapsToDevicePixels = true;
                this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                this.mainImage.SnapsToDevicePixels = true;
                RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
                if (!this.PrintJob)
                {
                    if (base.WindowState != WindowState.Minimized)
                    {
                        base.WindowState = WindowState.Maximized;
                    }
                }
                this.forWdht.RenderTransform = new RotateTransform();
            }
            VisualStateManager.GoToState(this.btnCrop, "Unchecked", true);
            VisualStateManager.GoToState(this.RedEye, "Unchecked", true);
            try
            {

                bool arg_B40_0 = false; //crop;
                if (7 == 0)
                {
                    // goto IL_B40;
                }

                if (!false)
                {
                    IEnumerable<string> enumerable = RobotImageLoader.LstUnlocknames.Where(delegate (string x)
                    {
                        bool result;
                        do
                        {
                            if (true && !false)
                            {
                                result = x.Equals(this.PhotoId.ToString());
                            }
                            while (false)
                            {
                            }
                        }
                        while (8 == 0);
                        return result;
                    });

                    bool flag = !this.isGreenImage;

                    if (!flag)
                    {
                        this.IsModerate = false;
                        this.EnabledAllButtons();
                        using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename)))
                        {
                            BitmapImage bitmapImage = new BitmapImage();
                            MemoryStream memoryStream = new MemoryStream();
                            fileStream.CopyTo(memoryStream);
                            memoryStream.Seek(0L, SeekOrigin.Begin);
                            fileStream.Close();
                            bitmapImage.BeginInit();
                            bitmapImage.StreamSource = memoryStream;
                            bitmapImage.EndInit();
                            this.mainImageundo.Source = (this.mainImage.Source = bitmapImage);
                            this.widthimg.Source = bitmapImage;
                            this.imgRotateCrop.Source = bitmapImage;
                            CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                            CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                            bitmapImage.Freeze();
                        }

                    }
                    bool arg_51D_0;
                    if (photoBusiness.GetModeratePhotos((long)this.PhotoId))
                    {
                        if (false)
                        {
                            //  goto IL_794;
                        }
                        arg_51D_0 = (enumerable == null || enumerable.Count<string>() <= 0);
                    }
                    else
                    {
                        arg_51D_0 = false;
                    }
                    if (arg_51D_0)
                    {
                        this.IsModerate = true;
                        this.disableAllButtons();
                        this.mainImageundo.Source = (this.mainImage.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png")));
                        this.widthimg.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png"));
                        this.imgRotateCrop.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png"));
                        this.RemoveAllGraphicsEffect();
                        this.RemoveAllShaderEffects();

                    }
                    this.mainImageundo.Source = (this.mainImage.Source = null);
                    this.canbackground.Background = null;
                    this.widthimg.Source = null;
                    this.widthimg.UpdateLayout();
                }
                this.EnabledAllButtons();
                this.IsModerate = false;
                string path = string.Empty;
                if (this.isGreenImage)
                {
                    path = (this.tempfilename.ToLower().EndsWith(".jpg") ? this.tempfilename.Replace(".jpg", ".png") : this.tempfilename);
                }
                else
                {
                    path = this.tempfilename;
                }

                foreach (var test in listPhotoId)
                {
                    this.PhotoId = test;
                    PhotoSW.CF.DataLayer.BAL.baPhotoInfo obj = PhotoSW.CF.DataLayer.BAL.baPhotoInfo.GetPhotoInfoDataById(test);
                    string imgPath = obj.PS_Photos_FileName;

                    this.listImage.Add(imgPath);
                    //using(FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, this.tempfilename)))

                    using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, imgPath)))
                    {
                        BitmapImage bitmapImage = new BitmapImage();
                        MemoryStream memoryStream = new MemoryStream();
                        fileStream.CopyTo(memoryStream);
                        memoryStream.Seek(0L, SeekOrigin.Begin);
                        fileStream.Close();
                        if (!false)
                        {
                            bitmapImage.BeginInit();
                            bitmapImage.StreamSource = memoryStream;
                            bitmapImage.EndInit();
                            this.mainImageundo.Source = bitmapImage;
                            this.widthimg.Source = bitmapImage;
                            CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                            CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                            this.imgRotateCrop.Source = bitmapImage;
                        }
                        bitmapImage.Freeze();
                    }

                    //  }
                    if (!File.Exists(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, path)))
                    {
                        goto IL_848;
                    }
                IL_794:
                    //using(FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, path)))
                    using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, imgPath)))
                    {
                        BitmapImage bitmapImage = new BitmapImage();
                        MemoryStream memoryStream = new MemoryStream();
                        fileStream.CopyTo(memoryStream);
                        memoryStream.Seek(0L, SeekOrigin.Begin);
                        fileStream.Close();
                        bitmapImage.BeginInit();
                        bitmapImage.StreamSource = memoryStream;
                        bitmapImage.EndInit();
                        ImageBrush img = new ImageBrush(bitmapImage);
                        // img = bitmapImage;                                                                       

                        if (listPhotoId.Count > 1)
                        {
                            //if (this.mainImage.Source == null)
                            //{
                            this.mainImage.Source = bitmapImage;
                            imgList.Add(mainImage);
                            //}

                        }

                        CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                        CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                        bitmapImage.Freeze();
                    }
                IL_83A:
                    this.mainImageundo.Visibility = Visibility.Hidden;
                IL_848:
                IL_8EF:
                    this.forWdht.Height = this.widthimg.Source.Height;
                    this.forWdht.Width = this.widthimg.Source.Width;
                    this.LoadPhotoAlbum();
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = new MatrixTransform());
                    this.canbackground.RenderTransform = (this.GrdBrightness.RenderTransform = null);
                    this.canbackgroundParent.Margin = (this.Opacitymsk.Margin = new Thickness(0.0, 0.0, 0.0, 0.0));
                    // this.Opacitymsk.Background = new SolidColorBrush(Colors.White);
                    if (false)
                    {
                        goto IL_B27;
                    }
                    //this.txtContent.Text = string.Empty;
                    if (this.IsModerate)
                    {
                        goto IL_9F3;
                    }
                IL_9E5:
                    this.LoadXml(this.ImageEffect);
                IL_9F3:

                    if (imgPath != null)
                    {

                        if (!Directory.Exists(System.IO.Path.Combine(this.HotFolderPath, "GIFImages")))
                        {
                            Directory.CreateDirectory(System.IO.Path.Combine(this.HotFolderPath, "GIFImages"));
                        }
                        //  File.Copy("TempGIF\\" + imgPath, System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, imgPath));
                        // string sourceFile = @"F:\jayendra\feb\Latest5feb_PhotoSW\PhotoSW\PhotoSW\bin\Debug\HotFolderPath\Thumbnails_Big\20171202\" + imgPath;
                        string sourceFile = this.HotFolderPath + "\\" + this.DateFolder + "\\" + imgPath;
                        fileHotPath = this.HotFolderPath;
                        //   string destinationFile = @"F:\jayendra\feb\Latest5feb_PhotoSW\PhotoSW\PhotoSW\bin\Debug\HotFolderPath\Thumbnails_Big\GIFImages\" + imgPath;
                        string destinationFile = this.HotFolderPath + "\\GIFImages\\" + imgPath;
                        File.Copy(sourceFile, destinationFile, true);

                    }
                    this.dragCanvas.AllowDragOutOfView = true;
                    this.GrdEffects.Visibility = Visibility.Hidden;
                    this.forWdht.HorizontalAlignment = HorizontalAlignment.Center;
                    this.forWdht.VerticalAlignment = VerticalAlignment.Center;
                    if (!this.IsModerate || !this.isGreenImage)
                    {
                        this.LoadFromDB();
                    }
                    this.dragCanvas.AllowDragging = false;
                    this.dragCanvas.IsEnabled = false;
                    this.IsEffectChange = false;
                    this.IsGraphicsChange = false;
                    this.jrotate.Visibility = Visibility.Hidden;
                    this.MyInkCanvasParent.Effect = null;
                    if (this.MyInkCanvas.Children.Count <= 1)
                    {
                        goto IL_AC8;
                    }
                IL_AA6:
                    this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                IL_AC8:
                    if (this.MyInkCanvas.Strokes.Count > 0)
                    {
                        this.MyInkCanvas.Strokes.Clear();
                    }
                    this.isChromaApplied = this.isGreenImage;
                    if (this.isChromaApplied)
                    {
                        VisualStateManager.GoToState(this.btnGreenScreen, "Checked", true);
                        goto IL_B3A;
                    }
                IL_B27:
                    VisualStateManager.GoToState(this.btnGreenScreen, "Unchecked", true);
                IL_B3A:
                    arg_B40_0 = (this.FlipMode != 0);
                IL_B40:
                    if (arg_B40_0 || this.FlipModeY != 0)
                    {
                        if (false)
                        {
                            // goto IL_9E5;
                        }
                        this.btnCrop.IsEnabled = false;
                    }
                    if (this.rotateangle > 0)
                    {
                        this.btnCrop.IsEnabled = false;
                    }
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
                this.Zomout(true);
                this.IsMoveEnabled = false;
                this.MoveImageStartStop();
                //New Added Test
                bool arg_14_0;
                bool arg_4B_0 = arg_14_0 = (this.GrdGIFAnimation.Visibility == Visibility.Visible);

                MainWindow.listGIFImage = listImage;
                string filePath = System.IO.Path.Combine(this.HotFolderPath, "GIFImages");

                this.c_photoFrame.ImageFolder = filePath;     //this.HotFolderPath;  
                this.c_photoFrame.Height = 270;
                this.c_photoFrame.Width = 385;
                this.mainImage.Visibility = Visibility.Collapsed;
            }
            // } 
        }


        //NewAdded Jayendra



        //End

        public void OnloadCollage_New(string graphicEffect, bool IsGumBallshow, List<int> listPhotoId)
        {
            do
            {
                this.IsGumBall = IsGumBallshow;
                this.gumshowDb = this.IsGumBall;
                this.RemoveGumball();
                this.IsImageDirtyState = false;
            }
            while (false);
           
            try
            {
               
                foreach (var test in listPhotoId)
                {
                    this.PhotoId = test;
                    string imgPath = string.Empty;
                    if (this.PhotoId != -1)
                    {
                        PhotoSW.CF.DataLayer.BAL.baPhotoInfo obj = PhotoSW.CF.DataLayer.BAL.baPhotoInfo.GetPhotoInfoDataById(test);
                        imgPath = obj.PS_Photos_FileName;
                        this.listImage.Add(imgPath);
                    }
                    using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, imgPath)))
                    {
                        BitmapImage bitmapImage = new BitmapImage();
                        MemoryStream memoryStream = new MemoryStream();
                        fileStream.CopyTo(memoryStream);
                        memoryStream.Seek(0L, SeekOrigin.Begin);
                        fileStream.Close();
                        if (!false)
                        {
                            bitmapImage.BeginInit();
                            bitmapImage.StreamSource = memoryStream;
                            bitmapImage.EndInit();
                            this.mainImageundo.Source = bitmapImage;
                            this.widthimg.Source = bitmapImage;
                            CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                            CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                            //  this.imgRotateCrop.Source = bitmapImage;

                        }
                        bitmapImage.Freeze();
                    }

                   
                    using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, imgPath)))
                    {
                        BitmapImage bitmapImage = new BitmapImage();
                       
                        MemoryStream memoryStream = new MemoryStream();
                        fileStream.CopyTo(memoryStream);
                        memoryStream.Seek(0L, SeekOrigin.Begin);
                        fileStream.Close();
                        bitmapImage.BeginInit();
                        bitmapImage.StreamSource = memoryStream;
                        bitmapImage.EndInit();                        

                        ImageBrush img = new ImageBrush(bitmapImage);
                        collageframe();
                        this.mainImage.Visibility = Visibility.Collapsed;
                       
                        if (listPhotoId.Count == 3)
                        {
                            this.btnCollageSeven.IsEnabled = false;
                            this.btnCollageSevenA.IsEnabled = false;
                            this.btnCollageSevenB.IsEnabled = false;
                            this.threeBottom.Source = new BitmapImage(new Uri("/images/collageAct_3.png", UriKind.Relative));
                            this.CollageThree.Visibility = Visibility.Visible;
                            if (this.mainImage3_1.Source == null)
                            {
                                this.mainImage3_1.Source = bitmapImage;
                            }
                            else if (this.mainImage3_2.Source != null)
                            {
                                this.mainImage3_3.Source = bitmapImage;
                            }
                            else if (this.mainImage3_1.Source != null)
                            {
                                this.mainImage3_2.Source = bitmapImage;
                            }
                        }

                        else if (listPhotoId.Count == 4)
                        {
                            // collageframe();
                            this.btnCollageSeven.IsEnabled = false;
                            this.btnCollageSevenA.IsEnabled = false;
                            this.btnCollageSevenB.IsEnabled = false;
                            this.fourBottom.Source = new BitmapImage(new Uri("/images/collageAct4.png", UriKind.Relative));
                            this.CollageFour.Visibility = Visibility.Visible;
                            if (this.mainImage1.Source == null)
                            {
                                this.mainImage1.Source = bitmapImage;
                                DragCanvas.SetCanBeDragged(this.mainImage1, true);
                            }
                            else if (this.mainImage3.Source != null)
                            {
                                this.mainImage4.Source = bitmapImage;
                            }
                            else if (this.mainImage2.Source != null)
                            {
                                this.mainImage3.Source = bitmapImage;
                            }
                            else if (this.mainImage1.Source != null)
                            {
                                this.mainImage2.Source = bitmapImage;
                            }
                        }

                        else if (listPhotoId.Count == 5)
                        {
                            // collageframe();
                            this.btnCollageSeven.IsEnabled = false;
                            this.btnCollageSevenA.IsEnabled = false;
                            this.btnCollageSevenB.IsEnabled = false;
                            this.fiveBottom.Source = new BitmapImage(new Uri("/images/collageAct_5.png", UriKind.Relative));
                            this.CollageFive.Visibility = Visibility.Visible;
                            if (this.mainImage5_1.Source == null)
                            {
                                this.mainImage5_1.Source = bitmapImage;
                            }
                            else if (this.mainImage5_4.Source != null)
                            {
                                this.mainImage5_5.Source = bitmapImage;
                            }
                            else if (this.mainImage5_3.Source != null)
                            {
                                this.mainImage5_4.Source = bitmapImage;
                            }
                            else if (this.mainImage5_2.Source != null)
                            {
                                this.mainImage5_3.Source = bitmapImage;
                            }
                            else if (this.mainImage5_1.Source != null)
                            {
                                this.mainImage5_2.Source = bitmapImage;
                            }
                        }

                        else if (listPhotoId.Count == 6)
                        {
                            this.btnCollageSeven.IsEnabled = false;
                            this.btnCollageSevenA.IsEnabled = false;
                            this.btnCollageSevenB.IsEnabled = false;
                            this.CollageSix.Visibility = Visibility.Visible;
                            if (this.mainImage6_1.Source == null)
                            {
                                this.mainImage6_1.Source = bitmapImage;
                            }
                            else if (this.mainImage6_5.Source != null)
                            {
                                this.mainImage6_6.Source = bitmapImage;
                            }
                            else if (this.mainImage6_4.Source != null)
                            {
                                this.mainImage6_5.Source = bitmapImage;
                            }
                            else if (this.mainImage6_3.Source != null)
                            {
                                this.mainImage6_4.Source = bitmapImage;
                            }
                            else if (this.mainImage6_2.Source != null)
                            {
                                this.mainImage6_3.Source = bitmapImage;
                            }
                            else if (this.mainImage6_1.Source != null)
                            {
                                this.mainImage6_2.Source = bitmapImage;
                            }
                        }

                        else if (listPhotoId.Count == 7)
                        {
                            // collageframe();
                            //this.CollageSevenA.Visibility = Visibility.Visible;
                            //this.CollageSevenB.Visibility = Visibility.Visible;
                            this.btnCollageSeven.IsEnabled = true;
                            this.btnCollageSevenA.IsEnabled = true;
                            this.btnCollageSevenB.IsEnabled = true;
                            this.sevenBottom.Source = new BitmapImage(new Uri("/images/collageAct_7A.png", UriKind.Relative));
                            this.CollageSeven.Visibility = Visibility.Visible;
                            // this.PolygonCenter.Fill = img;
                            if (this.mainImage7A_R1C1.Source == null)
                            {
                                this.Polugonleft1.Fill = img;
                                // this.Polugonleft1.Source = bitmapImage;
                                this.mainImage7A_R1C1.Source = bitmapImage;
                                this.mainImage7B_R1C1.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R3C2.Source != null)
                            {
                                this.Polugonleft2.Fill = img;
                                //this.Polugonleft2.Source = bitmapImage;
                                this.mainImage7A_R3C3.Source = bitmapImage;
                                this.mainImage7B_R1C2.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R3C1.Source != null)
                            {
                                this.PolygonTop.Fill = img;
                                // this.PolygonTop.Source = bitmapImage;
                                this.mainImage7A_R3C2.Source = bitmapImage;
                                this.mainImage7B_R2C3.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R2.Source != null)
                            {
                                this.PolygonCenter.Fill = img;
                                //this.PolygonCenter.Source = bitmapImage;

                                this.mainImage7A_R3C1.Source = bitmapImage;
                                this.mainImage7B_R3C1.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R1C3.Source != null)
                            {
                                this.PolygonBottom.Fill = img;
                                //this.PolygonBottom.Source = bitmapImage;
                                this.mainImage7A_R2.Source = bitmapImage;
                                this.mainImage7B_R3C2.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R1C2.Source != null)
                            {
                                this.PolygonRight1.Fill = img;
                                //this.PolygonRight1.Source = bitmapImage;
                                this.mainImage7A_R1C3.Source = bitmapImage;
                                this.mainImage7B_C2R1.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R1C1.Source != null)
                            {
                                this.PolygonRight2.Fill = img;
                                //this.PolygonRight2.Source = bitmapImage;
                                this.mainImage7A_R1C2.Source = bitmapImage;
                                this.mainImage7B_C2R2.Source = bitmapImage;
                            }
                        }
                        CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                        CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                        bitmapImage.Freeze();
                    }
                IL_83A:
                    this.mainImageundo.Visibility = Visibility.Visible;
                //  this.mainImageundo.Visibility = Visibility.Hidden;
                IL_848:
                IL_8EF:
                    // this.forWdht.Height = this.widthimg.Source.Height;   //255
                    //this.forWdht.Width = this.widthimg.Source.Width;    //384;    
                    this.forWdht.Height = 255;
                    this.forWdht.Width = 384;
                    this.LoadPhotoAlbum();
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = new MatrixTransform());
                    this.canbackground.RenderTransform = (this.GrdBrightness.RenderTransform = null);
                    this.canbackgroundParent.Margin = (this.Opacitymsk.Margin = new Thickness(0.0, 0.0, 0.0, 0.0));
                    this.Opacitymsk.Background = new SolidColorBrush(Colors.White);

                    if (false)
                    {
                        goto IL_B27;
                    }

                    if (this.IsModerate)
                    {
                        goto IL_9F3;
                    }
                IL_9E5:
                    this.LoadXml(this.ImageEffect);
                IL_9F3:

                    this.dragCanvas.AllowDragOutOfView = true;
                    this.GrdEffects.Visibility = Visibility.Hidden;
                    this.forWdht.HorizontalAlignment = HorizontalAlignment.Center;
                    this.forWdht.VerticalAlignment = VerticalAlignment.Center;
                    if (!this.IsModerate || !this.isGreenImage)
                    {
                        this.LoadFromDB();
                    }
                    this.dragCanvas.AllowDragging = false;
                    this.dragCanvas.IsEnabled = false;
                    this.IsEffectChange = false;
                    this.IsGraphicsChange = false;
                    this.jrotate.Visibility = Visibility.Hidden;
                    this.MyInkCanvasParent.Effect = null;
                    if (this.MyInkCanvas.Children.Count <= 1)
                    {
                        goto IL_AC8;
                    }
                IL_AA6:
                    this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                IL_AC8:
                    if (this.MyInkCanvas.Strokes.Count > 0)
                    {
                        this.MyInkCanvas.Strokes.Clear();
                    }
                    this.isChromaApplied = this.isGreenImage;
                    //if (this.isChromaApplied)
                    //{
                    //    VisualStateManager.GoToState(this.btnGreenScreen, "Checked", true);
                    //    goto IL_B3A;
                    //}
                IL_B27:
                    VisualStateManager.GoToState(this.btnGreenScreen, "Unchecked", true);
                //IL_B3A:



                }  // End Loop
                
              
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
                this.Zomout(true);
                this.IsMoveEnabled = false;
                this.MoveImageStart();
                this.ImageMove();

            }
            // }
        }

        public void OnloadCollage(string graphicEffect, bool IsGumBallshow, List<int> listPhotoId)
        {
            do
            {
                this.IsGumBall = IsGumBallshow;
                this.gumshowDb = this.IsGumBall;
                this.RemoveGumball();
                this.IsImageDirtyState = false;
            }
            while (false);
            this.IsComingOnLoad = true;
            this.IsRestoreCollage = true;
            PhotoBusiness photoBusiness = new PhotoBusiness();
            // this.isGreenImage = isGreenImageParam;
            this.ChromaGridLeft = 0.0;
            this.ChromaGridTop = 0.0;
            this.ChromaCenterX = 0.0;
            this.ChromaCenterY = 0.0;
            this.ChromaZoomFactor = 0.0;
            this.ChromaBorderPath = string.Empty;
            this.OriginalBorder = string.Empty;
            this.BackgroundDBValue = string.Empty;
            this.BackgroundSelectedValue = string.Empty;
            this.elementForContextMenu = null;
            this.canbackgroundParent.Visibility = Visibility.Collapsed;
            this.canbackgroundRotate.RenderTransform = null;
            Panel.SetZIndex(this.imageundoGrid, 0);
            Panel.SetZIndex(this.canbackgroundParent, 4);
            Panel.SetZIndex(this.Opacitymsk, 2); 
            Panel.SetZIndex(this.GrdCollageImg, 2);
            Panel.SetZIndex(this.frm, 6);
            this.IsZoomed = false;
            this.GraphicEffect = graphicEffect;
            this.GrdsubRedEye.Visibility = Visibility.Hidden;
            this.GrdsubRedEye1.Visibility = Visibility.Hidden;
            this.GrdsubCrop.Visibility = Visibility.Hidden;
            this.GrdsubColoreffects.Visibility = Visibility.Hidden;
            this.GrdsubEffects.Visibility = Visibility.Hidden;
            this.GrdsubColorFilters.Visibility = Visibility.Hidden;
            this.GrdsubGreenScreen.Visibility = Visibility.Hidden;
            this.GrdSubGraphics.Visibility = Visibility.Hidden;
            this.GrdSubGraphics1.Visibility = Visibility.Hidden;
            this.spCollagePhotoAct.Visibility = Visibility.Visible;
            this.GrdCollage.Visibility = Visibility.Visible;
            this.btnCollageBottom.Visibility = Visibility.Visible;
            this.btnPrintToGroup.Visibility = Visibility.Collapsed;
            this.GrdRedEyeMultiple1.Visibility = Visibility.Collapsed;
            this.EditPhotoImg.Source = new BitmapImage(new Uri("/images/editPhoto_iconAct.png", UriKind.Relative));
            ////
            //if(this.PrintJob)
            //    {
            //    this.LoadValues(redeye, crop);
            //    }
            //else
            //    {

            this.ListofPhoto = listPhotoId;
            this.attributeWidth = (this.attributeHeight = 10.0);
            this.btnHighPreview.Visibility = ((LoginUser.IsHighResolution == false) ? Visibility.Collapsed : Visibility.Visible);
            if (!false)
            {
                this.txbPreviewHigh.Visibility = ((LoginUser.IsHighResolution == false) ? Visibility.Collapsed : Visibility.Visible);
                this._centerX = "";
                this._centerY = "";
                this.rotateangle = 0;
                this.FlipMode = 0;
                this.FlipModeY = 0;
                this.redeffectfirstApplied = false;
                this.redeffectsecondApplied = false;
                this.txtMainImage.Text = this.PhotoName;
                System.Windows.Controls.Image image = (System.Windows.Controls.Image)this.btnPrintToGroup.Content;
                LstMyItems lstMyItems = (from t in RobotImageLoader.PrintImages
                                         where t.Name == this.PhotoName
                                         select t).FirstOrDefault<LstMyItems>();
                if (lstMyItems != null)
                {
                    image.Source = new BitmapImage(new Uri("/images/print-accept.png", UriKind.Relative));
                }
                else
                {
                    image.Source = new BitmapImage(new Uri("/images/print-group.png", UriKind.Relative));
                }
                this.MyInkCanvas.SnapsToDevicePixels = true;
                this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                this.mainImage.SnapsToDevicePixels = true;
                RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
                if (!this.PrintJob)
                {
                    if (base.WindowState != WindowState.Minimized)
                    {
                        base.WindowState = WindowState.Maximized;
                    }
                }
                this.forWdht.RenderTransform = new RotateTransform();
            }
            VisualStateManager.GoToState(this.btnCrop, "Unchecked", true);
            VisualStateManager.GoToState(this.RedEye, "Unchecked", true);
            try
            {
                //if(redeye)
                //    {
                //    VisualStateManager.GoToState(this.RedEye, "Checked", true);
                //    }
                bool arg_B40_0 = false; //crop;
                if (7 == 0)
                {
                    // goto IL_B40;
                }
                //if(crop)
                //    {
                //    VisualStateManager.GoToState(this.btnCrop, "Checked", true);
                //    }
                if (!false)
                {
                    IEnumerable<string> enumerable = RobotImageLoader.LstUnlocknames.Where(delegate (string x)
                    {
                        bool result;
                        do
                        {
                            if (true && !false)
                            {
                                result = x.Equals(this.PhotoId.ToString());
                            }
                            while (false)
                            {
                            }
                        }
                        while (8 == 0);
                        return result;
                    });
                    // bool flag = !crop || this.isGreenImage;
                    bool flag = !this.isGreenImage;
                    //if (3 == 0)
                    //{
                    //    goto IL_AA6;
                    //}
                    if (!flag)
                    {
                        this.IsModerate = false;
                        this.EnabledAllButtons();
                        using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename)))
                        {
                            BitmapImage bitmapImage = new BitmapImage();
                            MemoryStream memoryStream = new MemoryStream();
                            fileStream.CopyTo(memoryStream);
                            memoryStream.Seek(0L, SeekOrigin.Begin);
                            fileStream.Close();
                            bitmapImage.BeginInit();
                            bitmapImage.StreamSource = memoryStream;
                            bitmapImage.EndInit();
                            this.mainImageundo.Source = (this.mainImage.Source = bitmapImage);
                            this.widthimg.Source = bitmapImage;
                            this.imgRotateCrop.Source = bitmapImage;
                            CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                            CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                            bitmapImage.Freeze();
                        }
                        //goto IL_8EF;
                    }
                    bool arg_51D_0;
                    if (photoBusiness.GetModeratePhotos((long)this.PhotoId))
                    {
                        if (false)
                        {
                            //  goto IL_794;
                        }
                        arg_51D_0 = (enumerable == null || enumerable.Count<string>() <= 0);
                    }
                    else
                    {
                        arg_51D_0 = false;
                    }
                    if (arg_51D_0)
                    {
                        this.IsModerate = true;
                        this.disableAllButtons();
                        this.mainImageundo.Source = (this.mainImage.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png")));
                        this.widthimg.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png"));
                        this.imgRotateCrop.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png"));
                        this.RemoveAllGraphicsEffect();
                        this.RemoveAllShaderEffects();
                        //  goto IL_8EF;
                    }
                    this.mainImageundo.Source = (this.mainImage.Source = null);
                    this.canbackground.Background = null;
                    this.widthimg.Source = null;
                    this.widthimg.UpdateLayout();
                }
                this.EnabledAllButtons();
                this.IsModerate = false;
                string path = string.Empty;
                if (this.isGreenImage)
                {
                    path = (this.tempfilename.ToLower().EndsWith(".jpg") ? this.tempfilename.Replace(".jpg", ".png") : this.tempfilename);
                }
                else
                {
                    path = this.tempfilename;
                }


                foreach (var test in listPhotoId)
                {
                    this.PhotoId = test;
                    string imgPath = string.Empty;
                    if (this.PhotoId != -1)
                    {
                        PhotoSW.CF.DataLayer.BAL.baPhotoInfo obj = PhotoSW.CF.DataLayer.BAL.baPhotoInfo.GetPhotoInfoDataById(test);
                        imgPath = obj.PS_Photos_FileName;
                        this.listImage.Add(imgPath);
                    }
                    using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, imgPath)))
                    {
                        BitmapImage bitmapImage = new BitmapImage();
                        MemoryStream memoryStream = new MemoryStream();
                        fileStream.CopyTo(memoryStream);
                        memoryStream.Seek(0L, SeekOrigin.Begin);
                        fileStream.Close();
                        if (!false)
                        {
                            bitmapImage.BeginInit();
                            bitmapImage.StreamSource = memoryStream;
                            bitmapImage.EndInit();
                            this.mainImageundo.Source = bitmapImage;
                            this.widthimg.Source = bitmapImage;
                            CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                            CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                            this.imgRotateCrop.Source = bitmapImage;
                        }
                        bitmapImage.Freeze();
                    }

                    //  }
                    if (!File.Exists(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, path)))
                    {
                        goto IL_848;
                    }
                IL_794:
                    //using(FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, path)))

                    using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, imgPath)))
                    {
                        BitmapImage bitmapImage = new BitmapImage();
                        MemoryStream memoryStream = new MemoryStream();
                        fileStream.CopyTo(memoryStream);
                        memoryStream.Seek(0L, SeekOrigin.Begin);
                        fileStream.Close();
                        bitmapImage.BeginInit();
                        bitmapImage.StreamSource = memoryStream;
                        bitmapImage.EndInit();
                        ImageBrush img = new ImageBrush(bitmapImage);
                        // img = bitmapImage;
                        // this.mainImage.Source = bitmapImage;
                        collageframe();
                        this.mainImage.Visibility = Visibility.Collapsed;

                        //if(listPhotoId.Count == 2)
                        //    {
                        //    if(this.mainImageClone.Source == null)
                        //    this.mainImageClone.Source = bitmapImage;
                        //    else
                        //    this.mainImageClone2.Source = bitmapImage;
                        //    }



                        if (listPhotoId.Count == 3)
                        {
                            this.btnCollageSeven.IsEnabled = false;
                            this.btnCollageSevenA.IsEnabled = false;
                            this.btnCollageSevenB.IsEnabled = false;
                            this.threeBottom.Source = new BitmapImage(new Uri("/images/collageAct_3.png", UriKind.Relative));
                            this.CollageThree.Visibility = Visibility.Visible;
                            if (this.mainImage3_1.Source == null)
                            {
                                this.mainImage3_1.Source = bitmapImage;
                            }
                            else if (this.mainImage3_2.Source != null)
                            {
                                this.mainImage3_3.Source = bitmapImage;
                            }
                            else if (this.mainImage3_1.Source != null)
                            {
                                this.mainImage3_2.Source = bitmapImage;
                            }
                        }

                        else if (listPhotoId.Count == 4)
                        {
                            // collageframe();
                            this.btnCollageSeven.IsEnabled = false;
                            this.btnCollageSevenA.IsEnabled = false;
                            this.btnCollageSevenB.IsEnabled = false;
                            this.fourBottom.Source = new BitmapImage(new Uri("/images/collageAct4.png", UriKind.Relative));
                            this.CollageFour.Visibility = Visibility.Visible;
                            if (this.mainImage1.Source == null)
                            {
                                this.mainImage1.Source = bitmapImage;
                                DragCanvas.SetCanBeDragged(this.mainImage1, true);
                            }
                            else if (this.mainImage3.Source != null)
                            {
                                this.mainImage4.Source = bitmapImage;
                            }
                            else if (this.mainImage2.Source != null)
                            {
                                this.mainImage3.Source = bitmapImage;
                            }
                            else if (this.mainImage1.Source != null)
                            {
                                this.mainImage2.Source = bitmapImage;
                            }
                        }

                        else if (listPhotoId.Count == 5)
                        {
                            // collageframe();
                            this.btnCollageSeven.IsEnabled = false;
                            this.btnCollageSevenA.IsEnabled = false;
                            this.btnCollageSevenB.IsEnabled = false;
                            this.fiveBottom.Source = new BitmapImage(new Uri("/images/collageAct_5.png", UriKind.Relative));
                            this.CollageFive.Visibility = Visibility.Visible;
                            if (this.mainImage5_1.Source == null)
                            {
                                this.mainImage5_1.Source = bitmapImage;
                            }
                            else if (this.mainImage5_4.Source != null)
                            {
                                this.mainImage5_5.Source = bitmapImage;
                            }
                            else if (this.mainImage5_3.Source != null)
                            {
                                this.mainImage5_4.Source = bitmapImage;
                            }
                            else if (this.mainImage5_2.Source != null)
                            {
                                this.mainImage5_3.Source = bitmapImage;
                            }
                            else if (this.mainImage5_1.Source != null)
                            {
                                this.mainImage5_2.Source = bitmapImage;
                            }
                        }

                        else if (listPhotoId.Count == 6)
                        {
                            this.btnCollageSeven.IsEnabled = false;
                            this.btnCollageSevenA.IsEnabled = false;
                            this.btnCollageSevenB.IsEnabled = false;
                            this.CollageSix.Visibility = Visibility.Visible;
                            if (this.mainImage6_1.Source == null)
                            {
                                this.mainImage6_1.Source = bitmapImage;
                            }
                            else if (this.mainImage6_5.Source != null)
                            {
                                this.mainImage6_6.Source = bitmapImage;
                            }
                            else if (this.mainImage6_4.Source != null)
                            {
                                this.mainImage6_5.Source = bitmapImage;
                            }
                            else if (this.mainImage6_3.Source != null)
                            {
                                this.mainImage6_4.Source = bitmapImage;
                            }
                            else if (this.mainImage6_2.Source != null)
                            {
                                this.mainImage6_3.Source = bitmapImage;
                            }
                            else if (this.mainImage6_1.Source != null)
                            {
                                this.mainImage6_2.Source = bitmapImage;
                            }
                        }

                        else if (listPhotoId.Count == 7)
                        {
                            // collageframe();
                            //this.CollageSevenA.Visibility = Visibility.Visible;
                            //this.CollageSevenB.Visibility = Visibility.Visible;
                            this.btnCollageSeven.IsEnabled = true;
                            this.btnCollageSevenA.IsEnabled = true;
                            this.btnCollageSevenB.IsEnabled = true;
                            this.sevenBottom.Source = new BitmapImage(new Uri("/images/collageAct_7A.png", UriKind.Relative));
                            this.CollageSeven.Visibility = Visibility.Visible;
                            // this.PolygonCenter.Fill = img;
                            if (this.mainImage7A_R1C1.Source == null)
                            {
                                this.Polugonleft1.Fill = img;
                                // this.Polugonleft1.Source = bitmapImage;
                                this.mainImage7A_R1C1.Source = bitmapImage;
                                this.mainImage7B_R1C1.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R3C2.Source != null)
                            {
                                this.Polugonleft2.Fill = img;
                                //this.Polugonleft2.Source = bitmapImage;
                                this.mainImage7A_R3C3.Source = bitmapImage;
                                this.mainImage7B_R1C2.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R3C1.Source != null)
                            {
                                this.PolygonTop.Fill = img;
                                // this.PolygonTop.Source = bitmapImage;
                                this.mainImage7A_R3C2.Source = bitmapImage;
                                this.mainImage7B_R2C3.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R2.Source != null)
                            {
                                this.PolygonCenter.Fill = img;
                                //this.PolygonCenter.Source = bitmapImage;

                                this.mainImage7A_R3C1.Source = bitmapImage;
                                this.mainImage7B_R3C1.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R1C3.Source != null)
                            {
                                this.PolygonBottom.Fill = img;
                                //this.PolygonBottom.Source = bitmapImage;
                                this.mainImage7A_R2.Source = bitmapImage;
                                this.mainImage7B_R3C2.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R1C2.Source != null)
                            {
                                this.PolygonRight1.Fill = img;
                                //this.PolygonRight1.Source = bitmapImage;
                                this.mainImage7A_R1C3.Source = bitmapImage;
                                this.mainImage7B_C2R1.Source = bitmapImage;
                            }
                            else if (this.mainImage7A_R1C1.Source != null)
                            {
                                this.PolygonRight2.Fill = img;
                                //this.PolygonRight2.Source = bitmapImage;
                                this.mainImage7A_R1C2.Source = bitmapImage;
                                this.mainImage7B_C2R2.Source = bitmapImage;
                            }
                        }
                        CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                        CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                        bitmapImage.Freeze();
                    }
                IL_83A:
                    this.mainImageundo.Visibility = Visibility.Visible;
                //  this.mainImageundo.Visibility = Visibility.Hidden;
                IL_848:
                IL_8EF:
                    //this.forWdht.Height = this.widthimg.Source.Height;   //255
                    //this.forWdht.Width = this.widthimg.Source.Width;    //384;    
                    this.forWdht.Height = 255;
                    this.forWdht.Width = 380;
                    this.LoadPhotoAlbum();
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = new MatrixTransform());
                    this.canbackground.RenderTransform = (this.GrdBrightness.RenderTransform = null);
                    this.canbackgroundParent.Margin = (this.Opacitymsk.Margin = new Thickness(0.0, 0.0, 0.0, 0.0));
                    this.Opacitymsk.Background = new SolidColorBrush(Colors.White);

                    if (false)
                    {
                        goto IL_B27;
                    }
                    //this.txtContent.Text = string.Empty;
                    if (this.IsModerate)
                    {
                        goto IL_9F3;
                    }
                IL_9E5:
                    this.LoadXml(this.ImageEffect);
                IL_9F3:

                    this.dragCanvas.AllowDragOutOfView = true;
                    this.GrdEffects.Visibility = Visibility.Hidden;
                    this.forWdht.HorizontalAlignment = HorizontalAlignment.Center;
                    this.forWdht.VerticalAlignment = VerticalAlignment.Center;
                    if (!this.IsModerate || !this.isGreenImage)
                    {
                        this.LoadFromDB();
                    }
                    this.dragCanvas.AllowDragging = false;
                    this.dragCanvas.IsEnabled = false;
                    this.IsEffectChange = false;
                    this.IsGraphicsChange = false;
                    this.jrotate.Visibility = Visibility.Hidden;
                    this.MyInkCanvasParent.Effect = null;
                    if (this.MyInkCanvas.Children.Count <= 1)
                    {
                        goto IL_AC8;
                    }
                IL_AA6:
                    this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                IL_AC8:
                    if (this.MyInkCanvas.Strokes.Count > 0)
                    {
                        this.MyInkCanvas.Strokes.Clear();
                    }
                    this.isChromaApplied = this.isGreenImage;
                    if (this.isChromaApplied)
                    {
                        VisualStateManager.GoToState(this.btnGreenScreen, "Checked", true);
                        goto IL_B3A;
                    }
                IL_B27:
                    VisualStateManager.GoToState(this.btnGreenScreen, "Unchecked", true);
                IL_B3A:
                    arg_B40_0 = (this.FlipMode != 0);
                IL_B40:
                    if (arg_B40_0 || this.FlipModeY != 0)
                    {
                        if (false)
                        {
                            // goto IL_9E5;
                        }
                        this.btnCrop.IsEnabled = false;
                    }
                    if (this.rotateangle > 0)
                    {
                        this.btnCrop.IsEnabled = false;
                    }

                }  // End Loop

                //if(crop)
                //    {
                //    this.btnCrop.IsEnabled = false;
                //    }

                //if (2 == 0)
                //{
                //    goto IL_83A;
                //}
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
                this.Zomout(true);
                this.IsMoveEnabled = false;
                this.MoveImageStart();
                this.ImageMove();

            }
            // }
        }

        private void ImageMove()
        {
            if (!false)
            {

                if (this.ListofPhoto.Count == 4)
                {
                    this.dragImgCanvas.AllowDragOutOfView = true;
                    this.dragImgCanvas2.AllowDragOutOfView = true;
                    this.dragImgCanvas3.AllowDragOutOfView = true;
                    this.dragImgCanvas4.AllowDragOutOfView = true;
                    return;
                }

                if (this.ListofPhoto.Count == 5)
                {
                    this.dragmainImage5_1.AllowDragOutOfView = true;
                    this.dragmainImage5_2.AllowDragOutOfView = true;
                    this.dragmainImage5_3.AllowDragOutOfView = true;
                    this.dragmainImage5_4.AllowDragOutOfView = true;
                    this.dragmainImage5_5.AllowDragOutOfView = true;
                    return;
                }

                if (this.ListofPhoto.Count == 6)
                {
                    this.dragmainImage6_1.AllowDragOutOfView = true;
                    this.dragmainImage6_2.AllowDragOutOfView = true;
                    this.dragmainImage6_3.AllowDragOutOfView = true;
                    this.dragmainImage6_4.AllowDragOutOfView = true;
                    this.dragmainImage6_5.AllowDragOutOfView = true;
                    this.dragmainImage6_6.AllowDragOutOfView = true;
                    return;
                }


                if (this.ListofPhoto.Count == 3)
                {
                    this.dragmainImage3_1.AllowDragOutOfView = true;
                    this.dragmainImage3_2.AllowDragOutOfView = true;
                    this.dragmainImage3_3.AllowDragOutOfView = true;
                    return;
                }


                if (this.ListofPhoto.Count == 7)
                {
                    this.dragmainImage7A_R1C1.AllowDragOutOfView = true;
                    this.dragmainImage7A_R1C2.AllowDragOutOfView = true;
                    this.dragmainImage7A_R1C3.AllowDragOutOfView = true;
                    this.dragmainImage7A_R2.AllowDragOutOfView = true;
                    this.dragmainImage7A_R3C1.AllowDragOutOfView = true;
                    this.dragmainImage7A_R3C2.AllowDragOutOfView = true;
                    this.dragmainImage7A_R3C3.AllowDragOutOfView = true;

                    this.dragmainImage7B_R1C1.AllowDragOutOfView = true;
                    this.dragmainImage7B_R1C2.AllowDragOutOfView = true;
                    this.dragmainImage7B_R2C3.AllowDragOutOfView = true;
                    this.dragmainImage7B_R3C1.AllowDragOutOfView = true;
                    this.dragmainImage7B_R3C2.AllowDragOutOfView = true;
                    this.dragmainImage7B_C2R1.AllowDragOutOfView = true;
                    this.dragmainImage7B_C2R2.AllowDragOutOfView = true;

                    //this.dragmainImage7B_Test.AllowDragOutOfView = true;
                    //this.dragmainImage7Bottom_Test.AllowDragOutOfView = true;
                    //this.dragmainImage7B_CR1.AllowDragOutOfView = true;
                    return;
                }

            }

        }

        public void Onload(bool redeye, bool crop, bool isGreenImageParam, string graphicEffect, bool IsGumBallshow)
        {
            do
            {
                this.IsGumBall = IsGumBallshow;
                this.gumshowDb = this.IsGumBall;
                this.RemoveGumball();
                this.IsImageDirtyState = false;
            }
            while (false);
            this.IsComingOnLoad = true;
            PhotoBusiness photoBusiness = new PhotoBusiness();
            this.isGreenImage = isGreenImageParam;
            this.ChromaGridLeft = 0.0;
            this.ChromaGridTop = 0.0;
            this.ChromaCenterX = 0.0;
            this.ChromaCenterY = 0.0;
            this.ChromaZoomFactor = 0.0;
            this.ChromaBorderPath = string.Empty;
            this.OriginalBorder = string.Empty;
            this.BackgroundDBValue = string.Empty;
            this.BackgroundSelectedValue = string.Empty;
            this.elementForContextMenu = null;
            this.canbackgroundParent.Visibility = Visibility.Collapsed;
            this.canbackgroundRotate.RenderTransform = null;
            Panel.SetZIndex(this.imageundoGrid, 0);
            Panel.SetZIndex(this.canbackgroundParent, 4);
            Panel.SetZIndex(this.Opacitymsk, 2);
            Panel.SetZIndex(this.frm, 6);
            this.IsZoomed = false;
            this.GraphicEffect = graphicEffect;
            this.GrdsubRedEye.Visibility = Visibility.Hidden;
            this.GrdsubRedEye1.Visibility = Visibility.Hidden;
            this.GrdsubCrop.Visibility = Visibility.Hidden;
            this.GrdsubColoreffects.Visibility = Visibility.Hidden;
            this.GrdsubEffects.Visibility = Visibility.Hidden;
            this.GrdsubColorFilters.Visibility = Visibility.Hidden;
            this.GrdsubGreenScreen.Visibility = Visibility.Hidden;
            this.GrdSubGraphics.Visibility = Visibility.Hidden;
            this.GrdSubGraphics1.Visibility = Visibility.Hidden;
            this.spCollagePhotoAct.Visibility = Visibility.Collapsed;
            this.spMainImage1.Visibility = Visibility.Collapsed;
            this.spMainImage2.Visibility = Visibility.Collapsed;
            this.spMainImage3.Visibility = Visibility.Collapsed;
            this.spMainImage4.Visibility = Visibility.Collapsed;
            this.GrdCollage.Visibility = Visibility.Collapsed;
            this.btnCollageBottom.Visibility = Visibility.Collapsed;
            this.EditPhotoImg.Source = new BitmapImage(new Uri("/images/editPhoto_iconAct.png", UriKind.Relative));
            collageframe();
            if (this.PrintJob)
            {
                this.LoadValues(redeye, crop);
            }
            else
            {
                this.attributeWidth = (this.attributeHeight = 10.0);
                this.btnHighPreview.Visibility = ((LoginUser.IsHighResolution == false) ? Visibility.Collapsed : Visibility.Visible);
                if (!false)
                {
                    this.txbPreviewHigh.Visibility = ((LoginUser.IsHighResolution == false) ? Visibility.Collapsed : Visibility.Visible);
                    this._centerX = "";
                    this._centerY = "";
                    this.rotateangle = 0;
                    this.FlipMode = 0;
                    this.FlipModeY = 0;
                    this.redeffectfirstApplied = false;
                    this.redeffectsecondApplied = false;
                    this.txtMainImage.Text = this.PhotoName;
                    System.Windows.Controls.Image image = (System.Windows.Controls.Image)this.btnPrintToGroup.Content;
                    LstMyItems lstMyItems = (from t in RobotImageLoader.PrintImages
                                             where t.Name == this.PhotoName
                                             select t).FirstOrDefault<LstMyItems>();
                    if (lstMyItems != null)
                    {
                        image.Source = new BitmapImage(new Uri("/images/print-accept.png", UriKind.Relative));
                    }
                    else
                    {
                        image.Source = new BitmapImage(new Uri("/images/print-group.png", UriKind.Relative));
                    }
                    this.MyInkCanvas.SnapsToDevicePixels = true;
                    this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
                    this.mainImage.SnapsToDevicePixels = true;
                    RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
                    if (!this.PrintJob)
                    {
                        if (base.WindowState != WindowState.Minimized)
                        {
                            base.WindowState = WindowState.Maximized;
                        }
                    }
                    this.forWdht.RenderTransform = new RotateTransform();
                }
                VisualStateManager.GoToState(this.btnCrop, "Unchecked", true);
                VisualStateManager.GoToState(this.RedEye, "Unchecked", true);
                try
                {
                    if (redeye)
                    {
                        VisualStateManager.GoToState(this.RedEye, "Checked", true);
                    }
                    bool arg_B40_0 = crop;
                    if (7 == 0)
                    {
                        goto IL_B40;
                    }
                    if (crop)
                    {
                        VisualStateManager.GoToState(this.btnCrop, "Checked", true);
                    }
                    if (!false)
                    {
                        IEnumerable<string> enumerable = RobotImageLoader.LstUnlocknames.Where(delegate (string x)
                        {
                            bool result;
                            do
                            {
                                if (true && !false)
                                {
                                    result = x.Equals(this.PhotoId.ToString());
                                }
                                while (false)
                                {
                                }
                            }
                            while (8 == 0);
                            return result;
                        });
                        bool flag = !crop || this.isGreenImage;
                        //if (3 == 0)
                        //{
                        //    goto IL_AA6;
                        //}
                        if (!flag)
                        {
                            this.IsModerate = false;
                            this.EnabledAllButtons();
                            using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename)))
                            {
                                BitmapImage bitmapImage = new BitmapImage();
                                MemoryStream memoryStream = new MemoryStream();
                                fileStream.CopyTo(memoryStream);
                                memoryStream.Seek(0L, SeekOrigin.Begin);
                                fileStream.Close();
                                bitmapImage.BeginInit();
                                bitmapImage.StreamSource = memoryStream;
                                bitmapImage.EndInit();
                                this.mainImageundo.Source = (this.mainImage.Source = bitmapImage);
                                this.widthimg.Source = bitmapImage;
                                this.imgRotateCrop.Source = bitmapImage;
                                CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                                CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                                bitmapImage.Freeze();
                            }
                            goto IL_8EF;
                        }
                        bool arg_51D_0;
                        if (photoBusiness.GetModeratePhotos((long)this.PhotoId))
                        {
                            if (false)
                            {
                                goto IL_794;
                            }
                            arg_51D_0 = (enumerable == null || enumerable.Count<string>() <= 0);
                        }
                        else
                        {
                            arg_51D_0 = false;
                        }
                        if (arg_51D_0)
                        {
                            this.IsModerate = true;
                            this.disableAllButtons();
                            this.mainImageundo.Source = (this.mainImage.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png")));
                            this.widthimg.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png"));
                            this.imgRotateCrop.Source = new BitmapImage(new Uri(this.HotFolderPath + "Locked.png"));
                            this.RemoveAllGraphicsEffect();
                            this.RemoveAllShaderEffects();
                            goto IL_8EF;
                        }
                        this.mainImageundo.Source = (this.mainImage.Source = null);
                        this.canbackground.Background = null;
                        this.widthimg.Source = null;
                        this.widthimg.UpdateLayout();
                    }
                    this.EnabledAllButtons();
                    this.IsModerate = false;
                    string path = string.Empty;
                    if (this.isGreenImage)
                    {
                        path = (this.tempfilename.ToLower().EndsWith(".jpg") ? this.tempfilename.Replace(".jpg", ".png") : this.tempfilename);
                    }
                    else
                    {
                        path = this.tempfilename;
                    }
                    if (crop)
                    {
                        using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename)))
                        {
                            BitmapImage bitmapImage = new BitmapImage();
                            MemoryStream memoryStream = new MemoryStream();
                            fileStream.CopyTo(memoryStream);
                            memoryStream.Seek(0L, SeekOrigin.Begin);
                            fileStream.Close();
                            bitmapImage.BeginInit();
                            bitmapImage.StreamSource = memoryStream;
                            bitmapImage.EndInit();
                            this.mainImageundo.Source = bitmapImage;
                            this.widthimg.Source = bitmapImage;
                            CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                            CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                            this.imgRotateCrop.Source = bitmapImage;
                            bitmapImage.Freeze();
                        }
                    }
                    else
                    {
                        using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, this.tempfilename)))
                        {
                            BitmapImage bitmapImage = new BitmapImage();
                            MemoryStream memoryStream = new MemoryStream();
                            fileStream.CopyTo(memoryStream);
                            memoryStream.Seek(0L, SeekOrigin.Begin);
                            fileStream.Close();
                            if (!false)
                            {
                                bitmapImage.BeginInit();
                                bitmapImage.StreamSource = memoryStream;
                                bitmapImage.EndInit();
                                this.mainImageundo.Source = bitmapImage;

                                this.widthimg.Source = bitmapImage;
                                //this.widthimg.Width = this.widthimg.Source.Width * 2;
                                //this.widthimg.Height = this.widthimg.Source.Height * 2;
                                CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                                CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                                this.imgRotateCrop.Source = bitmapImage;
                            }
                            bitmapImage.Freeze();
                        }
                    }
                    if (!File.Exists(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, path)))
                    {
                        goto IL_848;
                    }
                IL_794:
                    using (FileStream fileStream = File.OpenRead(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, path)))
                    {
                        BitmapImage bitmapImage = new BitmapImage();
                        MemoryStream memoryStream = new MemoryStream();
                        fileStream.CopyTo(memoryStream);
                        memoryStream.Seek(0L, SeekOrigin.Begin);
                        fileStream.Close();
                        bitmapImage.BeginInit();
                        bitmapImage.StreamSource = memoryStream;
                        bitmapImage.EndInit();
                        this.mainImage.Source = bitmapImage;
                        CroppingAdorner.s_dpiX = bitmapImage.DpiX;
                        CroppingAdorner.s_dpiY = bitmapImage.DpiY;
                        bitmapImage.Freeze();
                    }
                IL_83A:
                    this.mainImageundo.Visibility = Visibility.Hidden;
                    this.mainImage.Visibility = Visibility.Visible;
                    this.c_photoFrame.Visibility = Visibility.Collapsed;
                IL_848:
                IL_8EF:
                    this.forWdht.Height = this.widthimg.Source.Height;
                    this.forWdht.Width = this.widthimg.Source.Width;
                    this.LoadPhotoAlbum();
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = new MatrixTransform());
                    this.canbackground.RenderTransform = (this.GrdBrightness.RenderTransform = null);
                    this.canbackgroundParent.Margin = (this.Opacitymsk.Margin = new Thickness(0.0, 0.0, 0.0, 0.0));
                    //this.Opacitymsk.Background = new SolidColorBrush(Colors.Transparent);
                    if (false)
                    {
                        goto IL_B27;
                    }
                    //this.txtContent.Text = string.Empty;
                    if (this.IsModerate)
                    {
                        goto IL_9F3;
                    }
                IL_9E5:
                    this.LoadXml(this.ImageEffect);
                IL_9F3:
                    this.dragCanvas.AllowDragOutOfView = true;
                    this.GrdEffects.Visibility = Visibility.Hidden;
                    this.forWdht.HorizontalAlignment = HorizontalAlignment.Center;
                    this.forWdht.VerticalAlignment = VerticalAlignment.Center;
                    if (!this.IsModerate || !this.isGreenImage)
                    {
                        this.LoadFromDB();
                    }
                    this.dragCanvas.AllowDragging = false;
                    this.dragCanvas.IsEnabled = false;
                    this.IsEffectChange = false;
                    this.IsGraphicsChange = false;
                    this.jrotate.Visibility = Visibility.Hidden;
                    this.MyInkCanvasParent.Effect = null;
                    if (this.MyInkCanvas.Children.Count <= 1)
                    {
                        goto IL_AC8;
                    }
                IL_AA6:
                    this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                IL_AC8:
                    if (this.MyInkCanvas.Strokes.Count > 0)
                    {
                        this.MyInkCanvas.Strokes.Clear();
                    }
                    this.isChromaApplied = this.isGreenImage;
                    if (this.isChromaApplied)
                    {
                        VisualStateManager.GoToState(this.btnGreenScreen, "Checked", true);
                        goto IL_B3A;
                    }
                IL_B27:
                    VisualStateManager.GoToState(this.btnGreenScreen, "Unchecked", true);
                IL_B3A:
                    arg_B40_0 = (this.FlipMode != 0);
                IL_B40:
                    if (arg_B40_0 || this.FlipModeY != 0)
                    {
                        if (false)
                        {
                            // goto IL_9E5;
                        }
                        this.btnCrop.IsEnabled = false;
                    }
                    if (this.rotateangle > 0)
                    {
                        this.btnCrop.IsEnabled = false;
                    }
                    if (crop)
                    {
                        this.btnCrop.IsEnabled = false;
                    }
                    //if (2 == 0)
                    //{
                    //    goto IL_83A;
                    //}
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                finally
                {
                    MemoryManagement.FlushMemory();
                    this.Zomout(true);
                    this.IsMoveEnabled = false;
                    this.MoveImageStartStop();

                }
            }
        }

        private void CmbGroup1_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var selectedValue = CmbGroup1.SelectedValue;
            seconds = CmbGroup1.SelectedIndex + 1;

            //  PhotoFrame photoframe = new PhotoFrame();
            string str = Convert.ToString(CmbGroup1.SelectionBoxItem);
            if (seconds == 1)
            {
                c_photoFrame.Interval = TimeSpan.FromSeconds(seconds);
            }
            else if (seconds == 2)
            {
                c_photoFrame.Interval = TimeSpan.FromSeconds(seconds);
            }
            else if (seconds == 3)
            {
                c_photoFrame.Interval = TimeSpan.FromSeconds(seconds);
            }
            else if (seconds == 4)
            {
                c_photoFrame.Interval = TimeSpan.FromSeconds(seconds);
            }
            else if (seconds == 5)
            {
                c_photoFrame.Interval = TimeSpan.FromSeconds(seconds);
            }
        }

        //      PhotoFrame photoframe1 = new PhotoFrame();   

        private void CmbGroup2_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var selectedValue = CmbGroup2.SelectedValue;
            int Content = CmbGroup2.SelectedIndex;
            if (Content == 0)
            {
                this.c_photoFrame.Visibility = Visibility.Visible;
                this.mainImage.Visibility = Visibility.Collapsed;
                MainWindow.dropdownGiFAnimation = 0;
            }
            if (Content == 1)
            {
                //  this.c_photoFrame.Visibility = Visibility.Collapsed;
                //  this.mainImage.Visibility = Visibility.Visible;
                this.c_photoFrame.Visibility = Visibility.Visible;
                this.mainImage.Visibility = Visibility.Collapsed;
                MainWindow.dropdownGiFAnimation = 1;

                //  Animations.CircleAnimation circleAnimationHelper = new Animations.CircleAnimation();
                //   circleAnimationHelper.AnimationCompleted += new Action(circleAnimationHelper_AnimationCompleted);
                //foreach(var img in imgList)
                //      {
                //      mainImage = img;
                //      circleAnimationHelper.MakeCircleAnimation((FrameworkElement)mainImage, 400, 300, new TimeSpan(0, 0, 2));
                //      }                
            }
            if (Content == 2)
            {
                this.c_photoFrame.Visibility = Visibility.Visible;
                this.mainImage.Visibility = Visibility.Collapsed;
                MainWindow.dropdownGiFAnimation = 2;
                //  MainWindow.dropdownGiFAnimation = 400;
            }
            if (Content == 3)
            {
                this.c_photoFrame.Visibility = Visibility.Visible;
                this.mainImage.Visibility = Visibility.Collapsed;
                MainWindow.dropdownGiFAnimation = 3;
            }
            if (Content == 4)
            {
                this.c_photoFrame.Visibility = Visibility.Visible;
                this.mainImage.Visibility = Visibility.Collapsed;
                MainWindow.dropdownGiFAnimation = 4;
            }
        }

        ///////////////////// //ProgressBar  ///////////////////////////

        private void InitializeBackgroundWorker()
        {
            try
            {
                WorkerThread.WorkerReportsProgress = true;
                WorkerThread.DoWork += new DoWorkEventHandler(WorkerThread_DoWork);
                WorkerThread.ProgressChanged += new ProgressChangedEventHandler(WorkerThread_ProgressChanged);
                WorkerThread.RunWorkerCompleted += new RunWorkerCompletedEventHandler(WorkerThread_RunWorkerCompleted);

                WorkerThread.RunWorkerAsync();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        void WorkerThread_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                //PBar.Value = PBar.Maximum;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void WorkerThread_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            try
            {
                //PBar.Value = e.ProgressPercentage;

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        void WorkerThread_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {

                for (int i = 0; i < 100; i++)
                {
                    Thread.Sleep(50);

                    WorkerThread.ReportProgress(i);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        ///////////////////////    //End    //////////////////////////////////

        private void collageBottonImage()
        {
            this.btnRotateCollageImg.Source = new BitmapImage(new Uri("/images/cRotate.png", UriKind.Relative));
            this.cRotateMinsImg.Source = new BitmapImage(new Uri("/images/munis_new.png", UriKind.Relative));
            this.cRotatePlusImg.Source = new BitmapImage(new Uri("/images/plus_new.png", UriKind.Relative));
            this.btnSpacingImg.Source = new BitmapImage(new Uri("/images/cSpacing.png", UriKind.Relative));
            this.SpacingMinusImg.Source = new BitmapImage(new Uri("/images/munis_new.png", UriKind.Relative));
            this.SpacingPlusImg.Source = new BitmapImage(new Uri("/images/plus_new.png", UriKind.Relative));
        }
        private void collageframe()
        {
            this.CollageFour.Visibility = Visibility.Collapsed;
            this.CollageFive.Visibility = Visibility.Collapsed;
            this.CollageThree.Visibility = Visibility.Collapsed;
            this.CollageSix.Visibility = Visibility.Collapsed;
            this.CollageSevenA.Visibility = Visibility.Collapsed;
            this.CollageSevenB.Visibility = Visibility.Collapsed;
            this.CollageSeven.Visibility = Visibility.Collapsed;
            this.sevenBottom.Source = new BitmapImage(new Uri("/images/collage_7A.png", UriKind.Relative));
            this.sevenBottomA.Source = new BitmapImage(new Uri("/images/collage_7B.png", UriKind.Relative));
            this.sevenBottomB.Source = new BitmapImage(new Uri("/images/collage_7C.png", UriKind.Relative));
        }
        private void OnMenuItemClick(object sender, RoutedEventArgs e)
        {
            if (false)
            {
                goto IL_66;
            }
            bool flag = this.elementForContextMenu != null;
        IL_19:
            if (!flag && !false)
            {
                return;
            }
            string text = ((MenuItem)e.Source).Header.ToString();
            bool arg_C4_0;
            int expr_56 = (arg_C4_0 = (this.elementForContextMenu is TextBox)) ? 1 : 0;
            int arg_C4_1;
            int expr_59 = arg_C4_1 = 0;
            if (expr_59 != 0)
            {
                goto IL_C4;
            }
            if (expr_56 == expr_59)
            {
                return;
            }
        IL_66:
            if (text.ToLower() == "delete")
            {
                if (-1 == 0)
                {
                    return;
                }
                TextBox textBox = (TextBox)this.elementForContextMenu;
                flag = (textBox == null);
                if (!flag)
                {
                    this.dragCanvas.Children.Remove(textBox);
                    if (!true)
                    {
                        goto IL_19;
                    }
                }
            }
            arg_C4_0 = (text.ToLower() == "edit");
            arg_C4_1 = 0;
        IL_C4:
            if ((arg_C4_0 ? 1 : 0) != arg_C4_1)
            {
                if (3 == 0)
                {
                    goto IL_66;
                }
                TextBox textBox = (TextBox)this.elementForContextMenu;
                if (textBox != null)
                {
                    textBox.Focus();
                    OuterGlowBitmapEffect outerGlowBitmapEffect = new OuterGlowBitmapEffect();
                    outerGlowBitmapEffect.Noise = 1.0;
                    outerGlowBitmapEffect.GlowSize = 30.0;
                    if (!false)
                    {
                        outerGlowBitmapEffect.GlowColor = Colors.LimeGreen;
                    }
                    outerGlowBitmapEffect.Opacity = 0.4;
                    this.txtContent.Focus();
                }
            }
        }

        private void PastingHandler(object sender, DataObjectPastingEventArgs e)
        {
            bool arg_5A_0;
            bool expr_8B = arg_5A_0 = e.DataObject.GetDataPresent(typeof(string));
            if (5 != 0)
            {
                bool flag = !expr_8B;
                bool arg_27_0 = flag;
                while (!arg_27_0)
                {
                    string text;
                    do
                    {
                        text = (string)e.DataObject.GetData(typeof(string));
                    }
                    while (false);
                    bool expr_4D = arg_27_0 = MainWindow.IsTextAllowed(text);
                    if (!false)
                    {
                        flag = expr_4D;
                    IL_56:
                        if (!false)
                        {
                            arg_5A_0 = flag;
                            goto IL_5A;
                        }
                        return;
                    }
                }
                e.CancelCommand();
                if (5 != 0)
                {
                    return;
                }
                // goto IL_56;
            }
        IL_5A:
            if (!arg_5A_0)
            {
                e.CancelCommand();
            }
        }

        private void PrevRec()
        {
            long num = 0L;
            this.GetNewMaxId(out num);
            int arg_11D_0;
            if (RobotImageLoader._objnewincrement != null && RobotImageLoader._objnewincrement.Count > 0)
            {
                arg_11D_0 = ((RobotImageLoader._objnewincrement.Count != 0 && num != (long)RobotImageLoader._objnewincrement[0].PhotoId) ? 1 : 0);
            }
            else
            {
                arg_11D_0 = 1;
            }
        IL_54:
            bool flag = arg_11D_0 != 0;
            if (!flag)
            {
                RobotImageLoader.currentCount = 0;
                if (!false)
                {
                    MessageBox.Show("No more records found!", "PhotoSW i-Mix", MessageBoxButton.OK, MessageBoxImage.Asterisk);
                    this.IsMoreImages = false;
                    goto IL_D5;
                }
            }
            else
            {
                flag = (string.Compare(RobotImageLoader.SearchCriteria, "Group", true) != 0);
            }
            if (!flag)
            {
                RobotImageLoader.currentCount = 0;
                MessageBox.Show("No more records found!", "PhotoSW i-Mix", MessageBoxButton.OK, MessageBoxImage.Asterisk);
                this.IsMoreImages = false;
                goto IL_D5;
            }
            int expr_C4 = arg_11D_0 = 1;
            if (expr_C4 == 0)
            {
                goto IL_54;
            }
            RobotImageLoader.IsNextPage = (expr_C4 != 0);
        IL_CF:
            RobotImageLoader.LoadImages();
        IL_D5:
            if (3 != 0)
            {
                return;
            }
            goto IL_CF;
        }

        private void print6by8_Click(object sender, RoutedEventArgs e)
        {
            // using (IEnumerator enumerator = Application.Current.Windows.GetEnumerator())
            IEnumerator enumerator = Application.Current.Windows.GetEnumerator();
            try
            {
                while (true)
                {
                IL_51:
                    bool flag = enumerator.MoveNext();
                    Window window;
                    while (8 != 0)
                    {
                        if (!flag)
                        {
                            goto Block_8;
                        }
                        if (7 != 0)
                        {
                            window = (Window)enumerator.Current;
                            while (true)
                            {
                                bool arg_42_0;
                                bool expr_30 = arg_42_0 = (window.Title == "ClientView");
                                if (7 == 0)
                                {
                                    goto IL_42;
                                }
                                flag = !expr_30;
                            IL_3D:
                                if (false)
                                {
                                    continue;
                                }
                                arg_42_0 = flag;
                            IL_42:
                                if (arg_42_0)
                                {
                                    break;
                                }
                                if (!false)
                                {
                                    goto IL_48;
                                }
                                goto IL_3D;
                            }
                            goto IL_51;
                        }
                    }
                IL_48:
                    ClientView clientView = (ClientView)window;
                }
            Block_8:;
            }//
            catch
            {
            }
            finally
            {
                ((IDisposable)enumerator).Dispose();
            }
            PrinterBusniess printerBusniess;
            if (2 != 0)
            {
                printerBusniess = new PrinterBusniess();
            }
            printerBusniess.SetPrinterLog(this.PhotoId, LoginUser.UserId, 1);
        }

        private void print8by10_Click(object sender, RoutedEventArgs e)
        {
            //using (IEnumerator enumerator = Application.Current.Windows.GetEnumerator())
            IEnumerator enumerator = Application.Current.Windows.GetEnumerator();
            try
            {
                while (true)
                {
                IL_51:
                    bool flag = enumerator.MoveNext();
                    Window window;
                    while (8 != 0)
                    {
                        if (!flag)
                        {
                            goto Block_8;
                        }
                        if (7 != 0)
                        {
                            window = (Window)enumerator.Current;
                            while (true)
                            {
                                bool arg_42_0;
                                bool expr_30 = arg_42_0 = (window.Title == "ClientView");
                                if (7 == 0)
                                {
                                    goto IL_42;
                                }
                                flag = !expr_30;
                            IL_3D:
                                if (false)
                                {
                                    continue;
                                }
                                arg_42_0 = flag;
                            IL_42:
                                if (arg_42_0)
                                {
                                    break;
                                }
                                if (!false)
                                {
                                    goto IL_48;
                                }
                                goto IL_3D;
                            }
                            goto IL_51;
                        }
                    }
                IL_48:
                    ClientView clientView = (ClientView)window;
                }
            Block_8:;
            }//
            catch
            {
            }
            finally
            {
                ((IDisposable)enumerator).Dispose();
            }
            PrinterBusniess printerBusniess;
            if (2 != 0)
            {
                printerBusniess = new PrinterBusniess();
            }
            printerBusniess.SetPrinterLog(this.PhotoId, LoginUser.UserId, 2);
        }

        private void radio_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                bool arg_2E_0;
                bool expr_78 = arg_2E_0 = base.IsInitialized;
                bool flag;
                bool arg_18_0;
                if (!false)
                {
                    flag = expr_78;
                    arg_18_0 = flag;
                    goto IL_18;
                }
            IL_2D:
                flag = !arg_2E_0;
                if (5 == 0)
                {
                    continue;
                }
                bool expr_A0 = arg_18_0 = flag;
                if (!false)
                {
                    if (!expr_A0)
                    {
                        if (false)
                        {
                            break;
                        }
                        this.attribute.StylusTip = StylusTip.Ellipse;
                    }
                    if (sender == this.rectangularRadio)
                    {
                        this.attribute.StylusTip = StylusTip.Rectangle;
                    }
                    this.UpdateControlVisuals();
                    break;
                }
            IL_18:
                if (arg_18_0)
                {
                    arg_2E_0 = (sender == this.ellipticalRadio);
                    goto IL_2D;
                }
                return;
            }
        }

        private void rdbBackgroundGreen_Checked(object sender, RoutedEventArgs e)
        {
            if (!false)
            {
                if (base.IsLoaded)
                {
                    this.btnStartMove.IsEnabled = false;
                    if (-1 == 0)
                    {
                        goto IL_59;
                    }
                }
                this.GrdGreenScreenDefault.IsHitTestVisible = false;
            }
        IL_41:
            System.Windows.Media.Color color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFFFFFFF");
            this.removebackGround();
        IL_59:
            bool? isChecked = this.rdbRevert.IsChecked;
            int arg_7D_0;
            int arg_B5_0 = (!isChecked.GetValueOrDefault()) ? (arg_7D_0 = 0) : (arg_7D_0 = (isChecked.HasValue ? 1 : 0));
            bool flag;
            while (!false)
            {
                flag = (arg_7D_0 == 0);
                if (5 == 0)
                {
                    goto IL_41;
                }
                if (!flag)
                {
                    this.Button_Click_Revert(sender, e);
                    return;
                }
                isChecked = this.rdbErase.IsChecked;
                arg_B5_0 = ((!isChecked.GetValueOrDefault()) ? (arg_7D_0 = 0) : (arg_7D_0 = (isChecked.HasValue ? 1 : 0)));
                if (!false)
                {
                    break;
                }
            }
            flag = (arg_B5_0 == 0);
            if (!true)
            {
                goto IL_41;
            }
            if (!flag)
            {
                this.Button_Click_Erase(sender, e);
                return;
            }
        }

        private void rdbForgroundGreen_Checked(object sender, RoutedEventArgs e)
        {
            if (base.IsLoaded)
            {
                UIElement expr_1F = this.btnStartMove;
                bool expr_24 = true;
                if (!false)
                {
                    expr_1F.IsEnabled = expr_24;
                }
            }
            this.MyInkCanvas.Visibility = Visibility.Visible;
            this.GrdGreenScreenDefault.IsHitTestVisible = true;
            System.Windows.Media.Color color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFFFFFFF");
            this.removebackGround();
            bool? isChecked = this.rdbRevert.IsChecked;
            int arg_8B_0;
            if (isChecked.GetValueOrDefault())
            {
                if (false)
                {
                    goto IL_A8;
                }
                arg_8B_0 = (isChecked.HasValue ? 1 : 0);
            }
            else
            {
                arg_8B_0 = 0;
            }
            int arg_8B_1 = 0;
        IL_8B:
            if (arg_8B_0 != arg_8B_1)
            {
                this.Button_Click_Revert(sender, e);
                return;
            }
            isChecked = this.rdbErase.IsChecked;
        IL_A8:
            int arg_C0_0 = (!isChecked.GetValueOrDefault()) ? (arg_8B_0 = 0) : (arg_8B_0 = (isChecked.HasValue ? 1 : 0));
            int expr_BD = arg_8B_1 = 0;
            if (expr_BD != 0)
            {
                goto IL_8B;
            }
            if (arg_C0_0 != expr_BD)
            {
                this.Button_Click_Erase(sender, e);
            }
        }

        private void Red_Click(object sender, RoutedEventArgs e)
        {
            if (-1 != 0 && 8 != 0 && true)
            {
                if (7 == 0)
                {
                    return;
                }
                this.primaryColor = "#FF0000";
                this.primaryColorName = "Red";
            }
            this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.primaryColor);
        }

        private void redeyeremove_Click(object sender, RoutedEventArgs e)
        {
            this.dragCanvas.IsEnabled = true;
            this.RedeyePreview.Visibility = Visibility.Collapsed;
            this.ellipse.Visibility = Visibility.Collapsed;
            bool flag;
            bool expr_27F;
            while (true)
            {
                this.redeyecircle.Visibility = Visibility.Visible;
                // this.GrdFirst.Visibility = Visibility.Collapsed;
                this.mainImage.Cursor = Cursors.None;
                this.SetRedeye = true;
                this.move = true;
                flag = this.redeffectfirstApplied;
                bool arg_70_0 = flag;
                while (true)
                {
                    if (!arg_70_0)
                    {
                        this.redEyeEffect.Radius = ContantValueForMainWindow.RedEyeSize;
                        if (7 == 0)
                        {
                            break;
                        }
                        this.redEyeEffect.RedeyeTrue = 0.0;
                        this.redEyeEffect.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                    }
                    if (this.redeffectsecondApplied)
                    {
                        goto IL_11B;
                    }
                    this.redEyeEffectSecond.Radius = ContantValueForMainWindow.RedEyeSize;
                    if (5 != 0)
                    {
                        this.redEyeEffectSecond.RedeyeTrue = 0.0;
                        this.redEyeEffectSecond.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                        goto IL_11B;
                    }
                IL_27E:
                    expr_27F = (arg_70_0 = this.redeffectmultiple5Applied);
                    if (6 != 0)
                    {
                        goto Block_11;
                    }
                    continue;
                IL_11B:
                    if (!this.redeffectmultiple1Applied)
                    {
                        this.redEyeEffectMultiple.Radius = ContantValueForMainWindow.RedEyeSize;
                        this.redEyeEffectMultiple.RedeyeTrue = 0.0;
                        this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                    }
                IL_170:
                    if (!this.redeffectmultiple2Applied)
                    {
                        this.redEyeEffectMultiple.Radius1 = ContantValueForMainWindow.RedEyeSize;
                        this.redEyeEffectMultiple.RedeyeTrue1 = 0.0;
                        if (false)
                        {
                            break;
                        }
                        this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                    }
                    if (!this.redeffectmultiple3Applied)
                    {
                        goto IL_1D5;
                    }
                IL_220:
                    flag = this.redeffectmultiple4Applied;
                    if (false)
                    {
                        goto IL_16E;
                    }
                    if (flag)
                    {
                        goto IL_27E;
                    }
                    if (!false)
                    {
                        this.redEyeEffectMultiple1.Radius = ContantValueForMainWindow.RedEyeSize;
                        this.redEyeEffectMultiple1.RedeyeTrue = 0.0;
                        this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                        goto IL_27E;
                    }
                IL_1D5:
                    this.redEyeEffectMultiple.Radius2 = ContantValueForMainWindow.RedEyeSize;
                    this.redEyeEffectMultiple.RedeyeTrue2 = 0.0;
                    this.redEyeEffectMultiple.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                    goto IL_220;
                IL_16E:
                    goto IL_170;
                }
            }
        Block_11:
            flag = expr_27F;
            while (!flag)
            {
                this.redEyeEffectMultiple1.Radius1 = ContantValueForMainWindow.RedEyeSize;
                if (true)
                {
                    this.redEyeEffectMultiple1.RedeyeTrue1 = 0.0;
                    this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight;
                    break;
                }
            }
            bool arg_2E2_0 = this.redeffectmultiple6Applied;
            bool expr_2E3;
            do
            {
                flag = arg_2E2_0;
                expr_2E3 = (arg_2E2_0 = flag);
            }
            while (false);
            if (!expr_2E3)
            {
                this.redEyeEffectMultiple1.Radius2 = ContantValueForMainWindow.RedEyeSize;
                this.redEyeEffectMultiple1.RedeyeTrue2 = 0.0;
                this.redEyeEffectMultiple1.AspectRatio = this.mainImage.ActualWidth / this.mainImage.ActualHeight + 0.1;
            }
        }

        private void ReloadAllGraphicsEffect()
        {
            try
            {
                List<UIElement> list;
                if (!false)
                {
                    this.imageundoGrid.Background = null;
                    list = new List<UIElement>();
                    if (false)
                    {
                        goto IL_27D;
                    }
                }
                IEnumerator enumerator = this.dragCanvas.Children.GetEnumerator();
                bool flag;
                UIElement uIElement;
                try
                {
                    while (true)
                    {
                        flag = enumerator.MoveNext();
                        if (!flag)
                        {
                            break;
                        }
                        uIElement = (UIElement)enumerator.Current;
                        bool arg_5D_0 = uIElement is Grid;
                        int arg_5D_1 = 0;
                        int expr_70;
                        int expr_73;
                        while (true)
                        {
                            flag = ((arg_5D_0 ? 1 : 0) == arg_5D_1);
                            if (!flag)
                            {
                                break;
                            }
                            expr_70 = ((arg_5D_0 = (uIElement is Ellipse)) ? 1 : 0);
                            expr_73 = (arg_5D_1 = 0);
                            if (expr_73 == 0)
                            {
                                goto Block_13;
                            }
                        }
                        continue;
                        continue;
                    Block_13:
                        flag = (expr_70 == expr_73);
                        if (flag)
                        {
                            flag = !(uIElement is System.Windows.Shapes.Rectangle);
                            if (flag)
                            {
                                flag = !(uIElement is System.IO.Path);
                                if (flag)
                                {
                                    list.Add(uIElement);
                                }
                            }
                        }
                    }
                }
                finally
                {
                    IDisposable disposable = enumerator as IDisposable;
                    flag = (disposable == null);
                    if (!flag)
                    {
                        disposable.Dispose();
                    }
                }
                using (List<UIElement>.Enumerator enumerator2 = list.GetEnumerator())
                {
                    while (true)
                    {
                        flag = enumerator2.MoveNext();
                        if (false || !flag)
                        {
                            break;
                        }
                        uIElement = enumerator2.Current;
                        this.dragCanvas.Children.Remove(uIElement);
                    }
                }
                list = new List<UIElement>();
                enumerator = this.frm.Children.GetEnumerator();
                try
                {
                    while (true)
                    {
                        flag = enumerator.MoveNext();
                        if (!flag)
                        {
                            break;
                        }
                        uIElement = (UIElement)enumerator.Current;
                        flag = !(uIElement is OpaqueClickableImage);
                        if (!flag)
                        {
                            list.Add(uIElement);
                        }
                    }
                }
                finally
                {
                    IDisposable disposable = enumerator as IDisposable;
                    flag = (disposable == null);
                    if (!flag)
                    {
                        disposable.Dispose();
                    }
                }
                using (List<UIElement>.Enumerator enumerator2 = list.GetEnumerator())
                {
                    if (7 != 0)
                    {
                        goto IL_1D6;
                    }
                IL_1C3:
                    this.frm.Children.Remove(uIElement);
                IL_1D6:
                    flag = enumerator2.MoveNext();
                    if (flag)
                    {
                        uIElement = enumerator2.Current;
                        goto IL_1C3;
                    }
                }
                flag = (this.FlipMode == 0 && this.FlipModeY == 0);
            IL_20C:
                if (!flag)
                {
                    this._ZoomFactor = 1.0;
                    this.zoomTransform.CenterX = Convert.ToDouble(this._centerX);
                }
                else
                {
                    this._ZoomFactor = 1.0;
                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    this.zoomTransform.ScaleX = this._ZoomFactor;
                    this.zoomTransform.ScaleY = this._ZoomFactor;
                    this.transformGroup = new TransformGroup();
                    this.rotateTransform = new RotateTransform();
                    this.zoomTransform = new ScaleTransform();
                    this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = null);
                    if (6 != 0)
                    {
                        Canvas.SetLeft(this.GrdBrightness, 0.0);
                        Canvas.SetTop(this.GrdBrightness, 0.0);
                        Canvas.SetLeft(this.Opacitymsk, 0.0);
                        Canvas.SetTop(this.Opacitymsk, 0.0);
                        goto IL_42F;
                    }
                }
                this.zoomTransform.CenterY = Convert.ToDouble(this._centerY);
            IL_250:
                if (false)
                {
                    goto IL_20C;
                }
                this.zoomTransform.ScaleX = -1.0;
                this.zoomTransform.ScaleY = 1.0;
            IL_27D:
                this.translateTransform = new TranslateTransform();
                this.rotateTransform = new RotateTransform();
                this.transformGroup = new TransformGroup();
                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                if (8 == 0)
                {
                    goto IL_250;
                }
                Canvas.SetLeft(this.GrdBrightness, 0.0);
                Canvas.SetTop(this.GrdBrightness, 0.0);
                Canvas.SetLeft(this.Opacitymsk, 0.0);
                Canvas.SetTop(this.Opacitymsk, 0.0);
            IL_42F:;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        public void RemoveAllBorders()
        {
            List<UIElement> list;
            if (!false)
            {
                list = new List<UIElement>();
            }
            UIElement uIElement;
            // using (IEnumerator enumerator = this.dragCanvas.Children.GetEnumerator())
            IEnumerator enumerator = this.dragCanvas.Children.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    uIElement = (UIElement)enumerator.Current;
                    if (uIElement.Uid.StartsWith("brdr"))
                    {
                        list.Add(uIElement);
                    }
                    else if (uIElement is TextBox)
                    {
                        if (!false)
                        {
                            TextBox textBox = (TextBox)uIElement;
                            textBox.BorderBrush = null;
                        }
                    }
                }
            }
            catch
            {
            }
            finally
            {
                ((IDisposable)enumerator).Dispose();
            }
            List<UIElement>.Enumerator enumerator2 = list.GetEnumerator();
            try
            {
                if (!false)
                {
                    goto IL_22F;
                }
            IL_DF:
                double num = Convert.ToDouble(uIElement.GetValue(Canvas.TopProperty));
                double num2 = Convert.ToDouble(uIElement.GetValue(Canvas.LeftProperty));
                string[] array = new string[1];
                if (false)
                {
                    goto IL_DF;
                }
                array[0] = "@#@";
                string[] separator = array;
                string text = uIElement.Uid.ToString().Split(separator, StringSplitOptions.None)[1];
                string uriString = "D:\\\\Projects\\\\DigiPhoto\\\\Images\\\\" + text.ToString();
                RotateTransform rotateTransform = uIElement.RenderTransform as RotateTransform;
                OpaqueClickableImage opaqueClickableImage = new OpaqueClickableImage();
                opaqueClickableImage.Source = new BitmapImage(new Uri(uriString));
                if (!false)
                {
                    opaqueClickableImage.SetValue(Canvas.TopProperty, num);
                    if (3 == 0)
                    {
                        goto IL_22D;
                    }
                    opaqueClickableImage.SetValue(Canvas.LeftProperty, num2);
                    opaqueClickableImage.MouseLeftButtonUp += new MouseButtonEventHandler(this.SelectObject);
                    if (rotateTransform == null)
                    {
                        goto IL_200;
                    }
                }
                opaqueClickableImage.RenderTransform = new RotateTransform
                {
                    CenterX = 0.0,
                    CenterY = 0.0,
                    Angle = rotateTransform.Angle
                };
            IL_200:
                this.dragCanvas.Children.Remove(uIElement);
                this.dragCanvas.Children.Add(opaqueClickableImage);
                opaqueClickableImage.Source = null;
            IL_22D:
            IL_22F:
                if (enumerator2.MoveNext())
                {
                    uIElement = enumerator2.Current;
                    goto IL_DF;
                }
            }
            finally
            {
                ((IDisposable)enumerator2).Dispose();
                while (false)
                {
                }
            }
        }

        private void RemoveAllGraphicsEffect()
        {
            try
            {
                this.imageundoGrid.Background = null;
                List<UIElement> list = new List<UIElement>();
                IEnumerator enumerator = this.dragCanvas.Children.GetEnumerator();
                try
                {
                    while (enumerator.MoveNext())
                    {
                        UIElement uIElement = (UIElement)enumerator.Current;
                        if (!(uIElement is Grid))
                        {
                            if (!(uIElement is Ellipse))
                            {
                                if (!(uIElement is System.Windows.Shapes.Rectangle))
                                {
                                    if (!(uIElement is System.IO.Path))
                                    {
                                        list.Add(uIElement);
                                    }
                                }
                            }
                        }
                    }
                }
                finally
                {
                    IDisposable disposable = enumerator as IDisposable;
                    bool flag = disposable == null;
                    if (false || !flag)
                    {
                        disposable.Dispose();
                    }
                }
                using (List<UIElement>.Enumerator enumerator2 = list.GetEnumerator())
                {
                    while (true)
                    {
                        bool flag = enumerator2.MoveNext();
                        if (6 != 0)
                        {
                            if (!flag)
                            {
                                break;
                            }
                            UIElement uIElement = enumerator2.Current;
                            if (5 != 0)
                            {
                                this.dragCanvas.Children.Remove(uIElement);
                            }
                        }
                    }
                }
                list = new List<UIElement>();
                //using (IEnumerator enumerator3 = this.frm.Children.GetEnumerator())
                IEnumerator enumerator3 = this.frm.Children.GetEnumerator();
                try
                {
                    while (true)
                    {
                        while (enumerator3.MoveNext())
                        {
                            UIElement uIElement = (UIElement)enumerator3.Current;
                            if (true)
                            {
                                if (uIElement is OpaqueClickableImage)
                                {
                                    list.Add(uIElement);
                                }
                            }
                        }
                        break;
                    }
                }
                catch
                {
                }
                finally
                {
                    ((IDisposable)enumerator3).Dispose();
                }
                List<UIElement>.Enumerator enumerator4 = list.GetEnumerator();
                try
                {
                    while (enumerator4.MoveNext())
                    {
                        UIElement uIElement = enumerator4.Current;
                        this.frm.Children.Remove(uIElement);
                    }
                }
                finally
                {
                    if (-1 != 0)
                    {
                        ((IDisposable)enumerator4).Dispose();
                    }
                }
                this._ZoomFactor = 1.0;
                while (this.zoomTransform != null)
                {
                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    if (5 != 0)
                    {
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                        if (5 != 0)
                        {
                            this.zoomTransform.ScaleX = this._ZoomFactor;
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.zoomTransform = new ScaleTransform();
                        }
                        this.transformGroup = new TransformGroup();
                        this.rotateTransform = new RotateTransform();
                        this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = null);
                        this.GrdBrightness.RenderTransform = null;
                        this.canbackground.RenderTransform = null;
                        Canvas.SetLeft(this.GrdBrightness, 0.0);
                        Canvas.SetTop(this.GrdBrightness, 0.0);
                        Canvas.SetLeft(this.Opacitymsk, 0.0);
                        Canvas.SetTop(this.Opacitymsk, 0.0);
                        Canvas.SetLeft(this.canbackground, 0.0);
                        Canvas.SetTop(this.canbackground, 0.0);
                        Canvas.SetLeft(this.canbackgroundParent, 0.0);
                        Canvas.SetTop(this.canbackgroundParent, 0.0);
                        break;
                    }
                }
            }
            catch (Exception serviceException)
            {
                if (!false)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
        }

        private void RemoveAllShaderEffects()
        {
            try
            {
                this.GrdInvert.Effect = null;
                do
                {
                    if (!false)
                    {
                        this.GrdSharpen.Effect = null;
                        UIElement expr_2F = this.GrdSketchGranite;
                        Effect expr_34 = null;
                        if (-1 != 0)
                        {
                            expr_2F.Effect = expr_34;
                        }
                        while (true)
                        {
                            this.GrdEmboss.Effect = null;
                            this.Grdcartoonize.Effect = null;
                            this.GrdGreyScale.Effect = null;
                            while (true)
                            {
                                this.GrdHueShift.Effect = null;
                                this.Grdcolorfilter.Effect = null;
                                this.GrdBrightness.Effect = null;
                                if (6 == 0)
                                {
                                    break;
                                }
                                if (2 != 0)
                                {
                                    goto Block_4;
                                }
                            }
                        }
                    Block_4:
                        this.GrdSepia.Effect = null;
                        this.GrdUnderWater.Effect = null;
                    }
                    this.GrdRedEyeFirst.Effect = null;
                    this.GrdRedEyeSecond.Effect = null;
                    this.GrdRedEyeMultiple.Effect = null;
                    this.GrdRedEyeMultiple1.Effect = null;
                }
                while (false);
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void removebackGround()
        {
            int arg_141_0;
            int expr_11 = arg_141_0 = ((this.GrdsubGreenScreen.Visibility == Visibility.Visible) ? 1 : 0);
            int arg_141_1;
            int expr_14 = arg_141_1 = 0;
            int arg_10C_0;
            if (expr_14 == 0)
            {
                if (expr_11 != expr_14)
                {
                    if (this.imageundoGrid.Background != null)
                    {
                        this.imageundoGrid.Background.Opacity = 0.0;
                    }
                }
                else
                {
                    bool arg_7B_0 = this.imageundoGrid.Background == null;
                    bool expr_A9;
                    do
                    {
                        if (!arg_7B_0)
                        {
                            this.imageundoGrid.Background.Opacity = 1.0;
                        }
                        if (8 == 0)
                        {
                            goto IL_67;
                        }
                        bool flag = !this.graphicsBorderApplied;
                        expr_A9 = (arg_7B_0 = flag);
                    }
                    while (7 == 0);
                    if (!expr_A9)
                    {
                        bool arg_C4_0 = this.imageundoGrid.Background == null;
                        if (!false)
                        {
                            if (!arg_C4_0)
                            {
                                this.imageundoGrid.Background.Opacity = 0.0;
                            }
                            this.graphicsBorderApplied = false;
                            VisualStateManager.GoToState(this.btnBackground, "Unchecked", true);
                        }
                        arg_10C_0 = this.dragCanvas.Children.Count;
                        goto IL_10B;
                    }
                }
            IL_67:
                return;
            }
            goto IL_141;
        IL_10B:
            if (arg_10C_0 > 4 || (this._ZoomFactor >= 0.5 && this._ZoomFactor != 1.0))
            {
                goto IL_171;
            }
            arg_141_0 = this.frm.Children.Count;
            arg_141_1 = 1;
        IL_141:
            if (arg_141_0 >= arg_141_1 || this.canbackground.Children.Count > 1)
            {
                goto IL_171;
            }
            bool arg_176_0 = (arg_10C_0 = ((this.jrotate.Angle == 0.0) ? 1 : 0)) != 0;
        IL_16C:
            if (8 != 0)
            {
                goto IL_172;
            }
            goto IL_190;
        IL_171:
            arg_176_0 = ((arg_10C_0 = 0) != 0);
        IL_172:
            if (false)
            {
                goto IL_16C;
            }
            if (!arg_176_0)
            {
                return;
            }
            arg_10C_0 = (VisualStateManager.GoToState(this.btnAddgraphics, "Unchecked", true) ? 1 : 0);
        IL_190:
            if (false)
            {
                goto IL_10B;
            }
        }

        private void RemoveBorder(string FileName, string selectedborder, int ProductType, object sender)
        {
            List<UIElement> list = new List<UIElement>();
            if (this.previouscounter == this.lstFrame.SelectedIndex)
            {
                this.previouscounter = -1;
                IEnumerator enumerator = this.frm.Children.GetEnumerator();
                try
                {
                    while (enumerator.MoveNext())
                    {
                        UIElement uIElement = (UIElement)enumerator.Current;
                        if (uIElement.Uid.StartsWith("frame"))
                        {
                            list.Add(uIElement);
                        }
                    }
                }
                finally
                {
                    IDisposable disposable;
                    do
                    {
                        disposable = (enumerator as IDisposable);
                        if (disposable == null)
                        {
                            goto IL_B4;
                        }
                    }
                    while (false);
                    disposable.Dispose();
                IL_B4:;
                }
                using (List<UIElement>.Enumerator enumerator2 = list.GetEnumerator())
                {
                    while (true)
                    {
                    IL_160:
                        bool flag = enumerator2.MoveNext();
                        while (flag)
                        {
                            UIElement uIElement = enumerator2.Current;
                            this.frm.Children.Remove(uIElement);
                            selectedborder = string.Empty;
                            this.graphicsframeApplied = false;
                            VisualStateManager.GoToState(this.btnBorder, "Unchecked", true);
                            this.forWdht.Height = this.GrdSize.ActualHeight;
                            this.forWdht.Width = this.GrdSize.ActualWidth;
                            do
                            {
                                this.forWdht.InvalidateArrange();
                            }
                            while (false);
                            this.forWdht.InvalidateMeasure();
                            if (!false)
                            {
                                this.forWdht.InvalidateVisual();
                                this.Zomout(true);
                                goto IL_160;
                            }
                        }
                        break;
                    }
                }
                if (this._ZoomFactor == 0.95)
                {
                    this._ZoomFactor = 1.0;
                    if (this.zoomTransform != null && this._ZoomFactor >= 0.5)
                    {
                        bool arg_1EB_0;
                        if (this.FlipMode == 0)
                        {
                            if (false)
                            {
                                goto IL_2DC;
                            }
                            arg_1EB_0 = (this.FlipModeY == 0);
                        }
                        else
                        {
                            arg_1EB_0 = false;
                        }
                        if (arg_1EB_0)
                        {
                            goto IL_2DC;
                        }
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    IL_235:
                        this.zoomTransform.ScaleX = this._ZoomFactor;
                        if (6 == 0)
                        {
                            goto IL_294;
                        }
                        this.zoomTransform.ScaleY = this._ZoomFactor;
                        this.transformGroup = new TransformGroup();
                        this.transformGroup.Children.Add(this.zoomTransform);
                    IL_27D:
                        this.transformGroup.Children.Add(this.translateTransform);
                    IL_294:
                        this.transformGroup.Children.Add(this.rotateTransform);
                        this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                        this.IsGraphicsChange = true;
                        goto IL_3D0;
                    IL_2DC:
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                        if (!false)
                        {
                            this.zoomTransform.ScaleX = this._ZoomFactor;
                            if (false)
                            {
                                goto IL_235;
                            }
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (4 == 0)
                            {
                                goto IL_27D;
                            }
                            this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                        }
                        this.IsGraphicsChange = true;
                    IL_3D0:
                        this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
                    }
                }
            }
        }

        private void RemoveCropFromCur()
        {
            try
            {
                if (3 == 0)
                {
                    goto IL_54;
                }
            IL_05:
                System.Windows.Documents.AdornerLayer adornerLayer = System.Windows.Documents.AdornerLayer.GetAdornerLayer(this._felCur);
                System.Windows.Documents.AdornerLayer expr_68 = adornerLayer;
                System.Windows.Documents.Adorner expr_14 = this._clp;
                if (!false)
                {
                    expr_68.Remove(expr_14);
                }
                while (true)
                {
                    adornerLayer.ReleaseAllTouchCaptures();
                    if (!false)
                    {
                        this._felCur.ReleaseAllTouchCaptures();
                        this._clp.ReleaseAllTouchCaptures();
                        break;
                    }
                }
                this._clp.ReleaseResources(this._felCur);
            IL_54:
                if (false)
                {
                    goto IL_05;
                }
            }
            catch (Exception serviceException)
            {
                string message;
                if (!false)
                {
                    message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                }
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }
        private void RemoveGumball()
        {
            List<UIElement> list = new List<UIElement>();
            IEnumerator enumerator = this.spGumball.Children.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    UIElement uIElement = (UIElement)enumerator.Current;
                    if (3 == 0)
                    {
                        break;
                    }
                    if (3 != 0 && uIElement is TextBox)
                    {
                        list.Add(uIElement);
                    }
                }
            }
            finally
            {
                IDisposable disposable = enumerator as IDisposable;
                if (disposable != null)
                {
                    disposable.Dispose();
                }
            IL_85:
                if (false)
                {
                    goto IL_85;
                }
            }
            do
            {
                foreach (UIElement uIElement in list)
                {
                    this.spGumball.Children.Remove(uIElement);
                }
                Canvas.SetLeft(this.grdGumball, 0.0);
                Canvas.SetTop(this.grdGumball, 0.0);
                while (7 != 0)
                {
                    this.btnGumBall.Visibility = Visibility.Collapsed;
                    if (3 != 0)
                    {
                        this.txtGumBall.Visibility = Visibility.Collapsed;
                        break;
                    }
                }
            }
            while (false);
        }

        private void cropPopup()
        {
            this.btnrotateAct.Visibility = Visibility.Collapsed;
            this.btnantirotateAct.Visibility = Visibility.Collapsed;
            this.btnflipAct.Visibility = Visibility.Collapsed;
            this.btnSelectReverseAct.Visibility = Visibility.Collapsed;
            this.btnselect8By11Act.Visibility = Visibility.Collapsed;
            this.btnselectAct.Visibility = Visibility.Collapsed;
            this.btnselectedAct.Visibility = Visibility.Collapsed;
            this.btnSelectCrop4by6Act.Visibility = Visibility.Collapsed;
            this.btnenlargeplusAct.Visibility = Visibility.Collapsed;
            this.btnenlargeminusAct.Visibility = Visibility.Collapsed;
            this.btnSelectCrop5by7Act.Visibility = Visibility.Collapsed;
        }
        private void luminosityPopup()
        {
            this.brightImg1.Source = new BitmapImage(new Uri("/images/plus_new.png", UriKind.Relative));
            this.brightImg2.Source = new BitmapImage(new Uri("/images/brightness_red.png", UriKind.Relative));
            this.brightImg3.Source = new BitmapImage(new Uri("/images/munis_new.png", UriKind.Relative));
            this.ContrastImg1.Source = new BitmapImage(new Uri("/images/plus_new.png", UriKind.Relative));
            this.ContrastImg2.Source = new BitmapImage(new Uri("/images/contrast_red.png", UriKind.Relative));
            this.ContrastImg3.Source = new BitmapImage(new Uri("/images/munis_new.png", UriKind.Relative));
            this.SharpnessImg2.Source = new BitmapImage(new Uri("/images/sharpness_red.png", UriKind.Relative));
            this.OkButtoncolorAct.Visibility = Visibility.Collapsed;
            this.btnLuminosityRestore.Visibility = Visibility.Collapsed;
        }

        private void chromaKeyPopup()
        {
            this.btnColorAct.Visibility = Visibility.Collapsed;
            this.btnBackGroundAct.Visibility = Visibility.Collapsed;
            this.btnChromaUndoAct.Visibility = Visibility.Collapsed;
            this.btnChromaRedoAct.Visibility = Visibility.Collapsed;
            this.btnChromaZoomInAct.Visibility = Visibility.Collapsed;
            this.btnChromaZoomOutAct.Visibility = Visibility.Collapsed;
            this.btnCollageZoomInAct.Visibility = Visibility.Collapsed;
            this.btnCollageZoomOutAct.Visibility = Visibility.Collapsed;
            this.ColorGrid1.Visibility = Visibility.Collapsed;
        }

        private void redEyesPopup()
        {
            this.RedEye1Act.Visibility = Visibility.Collapsed;
            this.btnincreasecircleAct.Visibility = Visibility.Collapsed;
            this.btndecreasecircleAct.Visibility = Visibility.Collapsed;
            this.btnredeyeRestoreAct.Visibility = Visibility.Collapsed;
            this.RedMinusAct.Visibility = Visibility.Collapsed;
            this.RedPlusAct.Visibility = Visibility.Collapsed;
        }
        private void effectPopup()
        {
            this.btnSharpenAct.Visibility = Visibility.Collapsed;
            this.btnDefoggerAct.Visibility = Visibility.Collapsed;
            this.btnGreyScaleAct.Visibility = Visibility.Collapsed;
            this.btnDigiMagicAct.Visibility = Visibility.Collapsed;
            this.CartoonizeAct.Visibility = Visibility.Collapsed;
            this.btnEdgeDetectAct.Visibility = Visibility.Collapsed;
            this.btnSepiaAct.Visibility = Visibility.Collapsed;
            this.btnUnderWaterAct.Visibility = Visibility.Collapsed;
            this.btnundocoloreffectsAct.Visibility = Visibility.Collapsed;
            this.btnMirrorAct.Visibility = Visibility.Collapsed;
            this.btnRestoreAct.Visibility = Visibility.Collapsed;
        }
        private void templatePopup()
        {
            this.btnGraphicsTextAct.Visibility = Visibility.Collapsed;
            this.btnBorderAct.Visibility = Visibility.Collapsed;
            this.btnBackgroundAct.Visibility = Visibility.Collapsed;
            this.btngraphicsAct.Visibility = Visibility.Collapsed;
            this.btnBringToFrontAct.Visibility = Visibility.Collapsed;
            this.btnSendToBackAct.Visibility = Visibility.Collapsed;
            this.btnZoomInAct.Visibility = Visibility.Collapsed;
            this.btnZoomOutAct.Visibility = Visibility.Collapsed;
            this.btnrotateGraphicsAct.Visibility = Visibility.Collapsed;
            this.btnRestoreGraphicsAct.Visibility = Visibility.Collapsed;
            this.btndeleteAct.Visibility = Visibility.Collapsed;
            this.GrdSubGraphics.Visibility = Visibility.Collapsed;
        }
        private void CollapsePopUp()
        {
            this.btnLuminosityActivate.Visibility = Visibility.Collapsed;
            this.btnTemplateActivate.Visibility = Visibility.Collapsed;
            this.btnChromaActive.Visibility = Visibility.Collapsed;
            this.btnCropActivate.Visibility = Visibility.Collapsed;
            this.btnEffectsActivate.Visibility = Visibility.Collapsed;
            this.btnRedEyeActive.Visibility = Visibility.Collapsed;
            this.btnMoveActivate.Visibility = Visibility.Collapsed;
            this.btnZoomInActivate.Visibility = Visibility.Collapsed;
            this.btnZoomOutActivate.Visibility = Visibility.Collapsed;
            this.btnDeleteActivate.Visibility = Visibility.Collapsed;
            this.btnExittoSearchActivate.Visibility = Visibility.Collapsed;

            //this.GrdsubColoreffects.Visibility = Visibility.Hidden;
            //this.GrdsubGreenScreen.Visibility = Visibility.Hidden;
            //this.GrdsubRedEye.Visibility = Visibility.Hidden;
            //this.GrdSubGraphics.Visibility = Visibility.Hidden;

            this.GrdsubColoreffects.Visibility = Visibility.Collapsed;
            this.GrdsubGreenScreen.Visibility = Visibility.Collapsed;
            this.GrdsubRedEye.Visibility = Visibility.Hidden;
            this.GrdsubRedEye1.Visibility = Visibility.Hidden;
            this.GrdSubGraphics.Visibility = Visibility.Collapsed;
            this.GrdSubGraphics1.Visibility = Visibility.Collapsed;
            this.GrdsubCrop.Visibility = Visibility.Collapsed;
            this.GrdsubEffects.Visibility = Visibility.Hidden;
            this.GrdChromaKeyNewScreen.Visibility = Visibility.Collapsed;
            this.GrdEffects.Visibility = Visibility.Collapsed;
            this.GrdSPSEdition.Visibility = Visibility.Collapsed;

            this.btnKeepTop.Visibility = Visibility.Collapsed;
            this.btnKeepBottom.Visibility = Visibility.Collapsed;
            this.btnCollageBottom.Visibility = Visibility.Collapsed;
            this.GrdCollage.Visibility = Visibility.Collapsed;
        }
        private void RemoveRedEye(int x1, int x2, int y1, int y2)
        {
        }
        private void RemoveRedEye_Click(object sender, RoutedEventArgs e)
        {
            CollapsePopUp();
            this.btnRedEyeActive.Visibility = Visibility.Visible;
            // PopupButton.IsChecked = true;
            if (8 != 0)
            {
                this.GrdsubRedEye.Visibility = Visibility.Visible;
                this.GrdsubRedEye1.Visibility = Visibility.Visible;
                this.dragCanvas.IsEnabled = true;
                this.RedeyePreview.Visibility = Visibility.Visible;
                if (4 == 0)
                {
                    goto IL_87;
                }
                this.GrdsubMain.Visibility = Visibility.Visible;
                do
                {
                    this.ellipse.Visibility = Visibility.Collapsed;
                    if (5 == 0)
                    {
                        return;
                    }
                    this.redeyecircle.Visibility = Visibility.Visible;
                    //  this.GrdFirst.Visibility = Visibility.Collapsed;
                }
                while (-1 == 0);
                this.mainImage.Cursor = Cursors.None;
            }
            this.SetRedeye = true;
        IL_87:
            this.move = true;
            this.ForRedeye.Source = null;
        }
        private void RemoveRedEyeinternal_Click(object sender, RoutedEventArgs e)
        {
            bool arg_63_0;
            this.redEyesPopup();
            this.RedEye1Act.Visibility = Visibility.Visible;
            bool expr_06 = arg_63_0 = this.redeffectfirstApplied;
            bool arg_122_0;
            if (!false)
            {
                if (!expr_06 || !this.redeffectsecondApplied || !this.redeffectmultiple1Applied || !this.redeffectmultiple2Applied || !this.redeffectmultiple3Applied)
                {
                    goto IL_67;
                }
            IL_40:
                if (this.redeffectmultiple4Applied && this.redeffectmultiple5Applied)
                {
                    arg_63_0 = this.redeffectmultiple6Applied;
                    goto IL_62;
                }
            IL_67:
                if (!false)
                {
                    arg_122_0 = true;
                    goto IL_6B;
                }
                goto IL_40;
            }
        IL_62:
            arg_122_0 = !arg_63_0;
        IL_6B:
            if (!arg_122_0)
            {
                this.RedeyePreview.Visibility = Visibility.Collapsed;
            }
            else
            {
                this.GrdsubRedEye.Visibility = Visibility.Visible;
                this.GrdsubRedEye1.Visibility = Visibility.Visible;
                this.dragCanvas.IsEnabled = true;
                this.RedeyePreview.Visibility = Visibility.Visible;
                this.GrdsubMain.Visibility = Visibility.Visible;
                this.ellipse.Visibility = Visibility.Collapsed;
                this.redeyecircle.Visibility = Visibility.Visible;
                //// this.GrdFirst.Visibility = Visibility.Collapsed;
                this.mainImage.Cursor = Cursors.None;
                this.SetRedeye = true;
                this.move = true;
            }
        }
        private void RepeatButton_MouseWheel(object sender, MouseWheelEventArgs e)
        {
            bool arg_0C_0;
            bool arg_18_0 = arg_0C_0 = (e.Delta > 0);
            while (true)
            {
                bool flag;
                if (!false)
                {
                    flag = !arg_0C_0;
                    goto IL_10;
                }
            IL_15:
                if (!false)
                {
                    if (arg_18_0)
                    {
                        this.ZoomOutButton_Click(sender, new RoutedEventArgs());
                        if (4 != 0)
                        {
                            goto IL_3A;
                        }
                    }
                    this.ZoomInButton_Click(sender, new RoutedEventArgs());
                    goto IL_24;
                }
                continue;
            IL_10:
                if (-1 != 0)
                {
                    arg_18_0 = (arg_0C_0 = flag);
                    goto IL_15;
                }
            IL_3A:
                if (!false)
                {
                    break;
                }
                goto IL_10;
            IL_24:
                goto IL_3A;
            }
        }
        private void RepeatButton_MouseWheel_1(object sender, MouseWheelEventArgs e)
        {
            bool arg_0C_0;
            bool arg_18_0 = arg_0C_0 = (e.Delta > 0);
            while (true)
            {
                bool flag;
                if (!false)
                {
                    flag = !arg_0C_0;
                    goto IL_10;
                }
            IL_15:
                if (!false)
                {
                    if (arg_18_0)
                    {
                        this.ZoomOutButton_Click1(sender, new RoutedEventArgs());
                        if (4 != 0)
                        {
                            goto IL_3A;
                        }
                    }
                    this.ZoomInButton_Click1(sender, new RoutedEventArgs());
                    goto IL_24;
                }
                continue;
            IL_10:
                if (-1 != 0)
                {
                    arg_18_0 = (arg_0C_0 = flag);
                    goto IL_15;
                }
            IL_3A:
                if (!false)
                {
                    break;
                }
                goto IL_10;
            IL_24:
                goto IL_3A;
            }
        }
        private void RepeatButton_MouseWheel_2(object sender, MouseWheelEventArgs e)
        {
            bool arg_0C_0;
            bool arg_18_0 = arg_0C_0 = (e.Delta > 0);
            while (true)
            {
                bool flag;
                if (!false)
                {
                    flag = !arg_0C_0;
                    goto IL_10;
                }
            IL_15:
                if (!false)
                {
                    if (arg_18_0)
                    {
                        this.AntiRotateButton_Click(sender, new RoutedEventArgs());
                        if (4 != 0)
                        {
                            goto IL_3A;
                        }
                    }
                    this.RotateInButton_Click(sender, new RoutedEventArgs());
                    goto IL_24;
                }
                continue;
            IL_10:
                if (-1 != 0)
                {
                    arg_18_0 = (arg_0C_0 = flag);
                    goto IL_15;
                }
            IL_3A:
                if (!false)
                {
                    break;
                }
                goto IL_10;
            IL_24:
                goto IL_3A;
            }
        }
        private void ResetZOrder()
        {
            int num;
            int i;
            while (!false)
            {
                num = 0;
                if (7 != 0)
                {
                    i = 0;
                    break;
                }
            }
            while (i < this.dragCanvas.Children.Count)
            {
                if (this.dragCanvas.Children[i].Visibility == Visibility.Visible)
                {
                    Panel.SetZIndex(this.dragCanvas.Children[i], num++);
                }
                i++;
            }
        }
        private void ResizeForWdth(double Height, double Width)
        {
            if (8 != 0)
            {
                try
                {
                    int arg_11A_0;
                    int expr_110 = arg_11A_0 = this.frm.Children.Count;
                    if (4 != 0)
                    {
                        arg_11A_0 = ((expr_110 != 0) ? 1 : 0);
                    }
                    if (arg_11A_0 == 0)
                    {
                        while (true)
                        {
                            if (Height <= Width)
                            {
                                goto IL_63;
                            }
                            double num = Width / Height;
                        IL_6A:
                            if (this.forWdht.Height > this.forWdht.Width)
                            {
                                this.forWdht.Width = this.forWdht.Height * num;
                                if (!false)
                                {
                                    goto IL_CA;
                                }
                                goto IL_AD;
                            }
                            else if (8 != 0)
                            {
                                goto IL_AD;
                            }
                        IL_D5:
                            this.forWdht.InvalidateMeasure();
                            this.forWdht.InvalidateVisual();
                            if (!false)
                            {
                                break;
                            }
                            continue;
                        IL_CA:
                            this.forWdht.InvalidateArrange();
                            goto IL_D5;
                        IL_AD:
                            if (true)
                            {
                                this.forWdht.Height = this.forWdht.Width * num;
                                goto IL_CA;
                            }
                        IL_63:
                            num = Height / Width;
                            goto IL_6A;
                        }
                        this.Zomout(true);
                    }
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    if (3 != 0)
                    {
                    }
                }
            }
        }
        private void ResizeWPFImage(BitmapSource sourceImage, int maxHeight, string saveToPath)
        {
            try
            {
                using (FileStream fileStream = new FileStream(saveToPath, FileMode.Create, FileAccess.ReadWrite))
                {
                    new JpegBitmapEncoder
                    {
                        QualityLevel = 94,
                        Frames =
                {
                    BitmapFrame.Create(sourceImage)
                }
                    }.Save(fileStream);
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }
        private void ResizeWPFImage(string sourceImage, int maxHeight, string saveToPath)
        {
            try
            {
                if (!false)
                {
                    BitmapImage bitmapImage = new BitmapImage();
                    BitmapImage bitmapImage2 = new BitmapImage();
                    using (FileStream fileStream = File.OpenRead(sourceImage.ToString()))
                    {
                        MemoryStream memoryStream = new MemoryStream();
                        fileStream.CopyTo(memoryStream);
                        memoryStream.Seek(0L, SeekOrigin.Begin);
                        fileStream.Close();
                        bitmapImage.BeginInit();
                        bitmapImage.StreamSource = memoryStream;
                        do
                        {
                            bitmapImage.EndInit();
                            bitmapImage.Freeze();
                        }
                        while (false);
                        int decodePixelWidth = 0;
                        int decodePixelHeight;
                        if (8 != 0)
                        {
                            decodePixelHeight = 0;
                            if (bitmapImage.Width >= bitmapImage.Height)
                            {
                                decimal d = Convert.ToDecimal(bitmapImage.Width) / Convert.ToDecimal(bitmapImage.Height);
                                decodePixelWidth = maxHeight;
                                decodePixelHeight = Convert.ToInt32(maxHeight / d);
                            }
                            else
                            {
                                decimal d = Convert.ToDecimal(bitmapImage.Height) / Convert.ToDecimal(bitmapImage.Width);
                                int arg_EF_0 = maxHeight;
                                do
                                {
                                    decodePixelHeight = arg_EF_0;
                                    arg_EF_0 = maxHeight;
                                }
                                while (6 == 0);
                                decodePixelWidth = Convert.ToInt32(maxHeight / d);
                            }
                        }
                        memoryStream.Seek(0L, SeekOrigin.Begin);
                        bitmapImage2.BeginInit();
                        bitmapImage2.StreamSource = memoryStream;
                        bitmapImage2.DecodePixelWidth = decodePixelWidth;
                        bitmapImage2.DecodePixelHeight = decodePixelHeight;
                        bitmapImage2.EndInit();
                        bitmapImage2.Freeze();
                    }
                    FileStream fileStream2 = new FileStream(saveToPath, FileMode.Create, FileAccess.ReadWrite);
                    try
                    {
                        JpegBitmapEncoder jpegBitmapEncoder;
                        if (8 != 0)
                        {
                            jpegBitmapEncoder = new JpegBitmapEncoder();
                            jpegBitmapEncoder.QualityLevel = 88;
                            jpegBitmapEncoder.Frames.Add(BitmapFrame.Create(bitmapImage2));
                        }
                        jpegBitmapEncoder.Save(fileStream2);
                    }
                    finally
                    {
                        bool flag = fileStream2 == null;
                        do
                        {
                            if (!flag)
                            {
                                ((IDisposable)fileStream2).Dispose();
                            }
                        }
                        while (false);
                    }
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                do
                {
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (5 == 0);
            }
        }
        private void right()
        {
            if (4 != 0)
            {
                this.x += 2.0;
                if (!false)
                {
                    Canvas.SetLeft(this.dragCanvas, this.x);
                }
            }
        }

        private void CollageRotateMins_Click(object sender, RoutedEventArgs e)
        {
            collageBottonImage();
            this.cRotatePlusImg.Source = new BitmapImage(new Uri("/images/plus_new_act.png", UriKind.Relative));
            this.btnRotateCollageImg.Source = new BitmapImage(new Uri("/images/cRotateAct.png", UriKind.Relative));
            this.cRotateMinsImg.Source = new BitmapImage(new Uri("/images/munis_new_act.png", UriKind.Relative));
            CollageAntiRotate(-1);
        }

        private void CollageAntiRotate(int angle)
        {
            bool arg_16_0 = angle != 0;
            if (5 != 0)
            {
                bool flag = angle == -1;
                arg_16_0 = flag;
            }
            if (!arg_16_0)
            {
                this.rotateangle = angle;
            }
            this.IMGFrame.RenderTransformOrigin = new System.Windows.Point(0.5, 0.5);
            RotateTransform rotateTransform = new RotateTransform();
            int num = this.rotateangle;
            try
            {
                int num2 = this.rotateangle;
                int arg_6F_0;
                if (num2 <= 90)
                {
                    arg_6F_0 = num2;
                }
                else
                {
                    int expr_7C = arg_6F_0 = num2;
                    if (!false)
                    {
                        if (expr_7C != 180)
                        {
                            goto IL_88;
                        }
                        goto IL_D1;
                    }
                }
                int arg_75_0;
                if (arg_6F_0 != 0)
                {
                    arg_75_0 = num2;
                }
                else
                {
                    if (6 != 0)
                    {
                        rotateTransform.Angle = 270.0;
                        this.rotateangle = 270;
                        goto IL_10A;
                    }
                    goto IL_D1;
                }
            IL_73:
                if (arg_75_0 != 90)
                {
                    goto IL_10A;
                }
                rotateTransform.Angle = 0.0;
                this.rotateangle = 0;
                goto IL_10A;
            IL_88:
                int expr_88 = arg_75_0 = num2;
                if (false)
                {
                    goto IL_73;
                }
                if (expr_88 != 270)
                {
                    goto IL_10A;
                }
                rotateTransform.Angle = 180.0;
                this.rotateangle = 180;
                goto IL_10A;
            IL_D1:
                rotateTransform.Angle = 90.0;
                this.rotateangle = 90;
            IL_10A:
                this.IMGFrame.LayoutTransform = rotateTransform;
                if (2 == 0)
                {
                    goto IL_88;
                }
            }
            catch (Exception serviceException)
            {
                string message;
                do
                {
                    message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                }
                while (false);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                if (!false)
                {
                    this.LogOperation(new LogObject
                    {
                        value = (float)num,
                        opName = "antirotate"
                    });
                    if (this.rotateangle > 0)
                    {
                        this.IsEffectChange = true;
                        VisualStateManager.GoToState(this.btnrotate, "Checked", true);
                        VisualStateManager.GoToState(this.btnantirotate, "Checked", true);
                        // this.RedEye.IsEnabled = false;
                        this.btnCollageBottom.Visibility = Visibility.Collapsed;
                        goto IL_1EA;
                    }
                    VisualStateManager.GoToState(this.btnrotate, "Unchecked", true);
                    VisualStateManager.GoToState(this.btnantirotate, "Unchecked", true);
                }
                this.btnCollageBottom.Visibility = Visibility.Visible;
            // this.RedEye.IsEnabled = true;
            IL_1EA:;
            }
        }


        private void CollageRotatePlus_Click(object sender, RoutedEventArgs e)
        {
            collageBottonImage();
            this.cRotatePlusImg.Source = new BitmapImage(new Uri("/images/plus_new_act.png", UriKind.Relative));
            this.btnRotateCollageImg.Source = new BitmapImage(new Uri("/images/cRotateAct.png", UriKind.Relative));
            this.cRotateMinsImg.Source = new BitmapImage(new Uri("/images/munis_new_act.png", UriKind.Relative));
            this.CollageRotate(-1);
        }

        private void EnlargeReducePlus_Click(object sender, RoutedEventArgs e)
        {
            this.IsImageDirtyState = true;
            //CollapsePopUp();
            this.chromaKeyPopup();
            this.templatePopup();
            this.btnChromaZoomInAct.Visibility = Visibility.Collapsed;
            this.btnZoomInAct.Visibility = Visibility.Visible;
            this.btnZoomInActivate.Visibility = Visibility.Collapsed;
            this.btnZoomOutActivate.Visibility = Visibility.Collapsed;
            DependencyObject expr_12 = this.mainImage;
            EdgeMode expr_17 = EdgeMode.Aliased;
            if (!false)
            {
                RenderOptions.SetEdgeMode(expr_12, expr_17);
            }
            try
            {
                try
                {
                    this.CmbProductType.Visibility = Visibility.Collapsed;
                    bool flag = this.elementForContextMenu != null;
                    bool arg_50_0;
                    bool arg_AF_0 = arg_50_0 = flag;
                    while (6 != 0)
                    {
                        Button button;
                        TransformGroup transformGroup;
                        TransformGroup transformGroup2;
                        RotateTransform rotateTransform;
                        ScaleTransform scaleTransform;
                        if (!arg_50_0)
                        {
                            if (7 != 0)
                            {
                                if (this._ZoomFactor >= this._maxZoomFactor)
                                {
                                    this._ZoomFactor = 4.0;
                                    this.IsGraphicsChange = true;
                                    return;
                                }
                                this._ZoomFactor += 0.010;
                                // this._ZoomFactor += 0.025;
                                flag = (this.zoomTransform == null);
                                arg_AF_0 = flag;
                                break;
                            }
                        }
                        else
                        {
                            flag = !(this.elementForContextMenu is Button);
                            if (flag)
                            {
                                goto IL_700;
                            }
                            button = (Button)this.elementForContextMenu;
                            bool expr_497 = arg_50_0 = (arg_AF_0 = (button.Tag == null));
                            if (8 == 0)
                            {
                                continue;
                            }
                            if (!expr_497)
                            {
                                this._GraphicsZoomFactor = Convert.ToDouble(button.Tag.ToString());
                                this._GraphicsZoomFactor += 0.025;
                            }
                            else
                            {
                                this._GraphicsZoomFactor = 1.0;
                            }
                        IL_4E6:
                            transformGroup = new TransformGroup();
                            transformGroup2 = (this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup);
                            rotateTransform = new RotateTransform();
                            scaleTransform = new ScaleTransform();
                            if (transformGroup2 == null)
                            {
                                goto IL_61A;
                            }
                            if (transformGroup2.Children.Count > 0)
                            {
                                if (transformGroup2.Children[0] is ScaleTransform)
                                {
                                    scaleTransform = (ScaleTransform)transformGroup2.Children[0];
                                }
                                else if (transformGroup2.Children[0] is RotateTransform)
                                {
                                    rotateTransform = (RotateTransform)transformGroup2.Children[0];
                                }
                            }
                            if (transformGroup2.Children.Count <= 1)
                            {
                                goto IL_619;
                            }
                            if (!(transformGroup2.Children[1] is ScaleTransform))
                            {
                                if (transformGroup2.Children[1] is RotateTransform)
                                {
                                    rotateTransform = (RotateTransform)transformGroup2.Children[1];
                                    goto IL_618;
                                }
                                goto IL_618;
                            }
                        }
                        scaleTransform = (ScaleTransform)transformGroup2.Children[1];
                    IL_618:
                    IL_619:
                    IL_61A:
                        flag = (scaleTransform != null);
                    IL_624:
                        if (!flag)
                        {
                            scaleTransform = new ScaleTransform();
                            scaleTransform.ScaleX = this._GraphicsZoomFactor;
                            scaleTransform.ScaleY = this._GraphicsZoomFactor;
                        IL_64C:
                            scaleTransform.CenterX = 0.0;
                            scaleTransform.CenterY = 0.0;
                            if (7 == 0)
                            {
                            IL_461:
                            IL_463:
                                goto IL_700;
                            }
                        }
                        else
                        {
                            scaleTransform.ScaleX = this._GraphicsZoomFactor;
                            scaleTransform.ScaleY = this._GraphicsZoomFactor;
                            scaleTransform.CenterX = 0.0;
                            scaleTransform.CenterY = 0.0;
                        }
                        transformGroup.Children.Add(scaleTransform);
                        if (rotateTransform != null)
                        {
                            transformGroup.Children.Add(rotateTransform);
                        }
                        button.Tag = this._GraphicsZoomFactor.ToString();
                        button.RenderTransform = transformGroup;
                        this.elementForContextMenu = button;
                    IL_700:
                        this.IsGraphicsChange = true;
                        if (this._ZoomFactor >= 1.0)
                        {
                            this.attribute.Width = this.attributeWidth / this._ZoomFactor;
                            this.attribute.Height = this.attributeHeight / this._ZoomFactor;
                        }
                        else
                        {
                            this.attribute.Width = this.attributeWidth * this._ZoomFactor;
                            this.attribute.Height = this.attributeHeight * this._ZoomFactor;
                        }
                        goto IL_7D3;
                    }
                    if (arg_AF_0)
                    {
                        //goto IL_463;
                    }
                    if (-1 != 0)
                    {
                        if (this.FlipMode != 0 || this.FlipModeY != 0)
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = this._ZoomFactor;
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            if (false)
                            {
                                //goto IL_4E6;
                            }
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                            }
                            else
                            {
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                                this.MyInkCanvas.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            }
                            this.IsGraphicsChange = true;
                        }
                        else
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = this._ZoomFactor;
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                                if (3 == 0)
                                {
                                    //goto IL_64C;
                                }
                            }
                            else
                            {
                                this.MyInkCanvas.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            }
                            this.IsGraphicsChange = true;
                        }
                        this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
                        //goto IL_461;
                    }
                    //goto IL_624;
                }
                catch (Exception ex)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(ex);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    MessageBox.Show(ex.Message);
                }
            IL_7D3:
                while (!true)
                {
                }
            }
            finally
            {
                MemoryManagement.FlushMemory();
                if (!false)
                {
                }
            }
            this.IsGreenCorrection = false;

        }

        private void EnlargeReduceMinus_Click(object sender, RoutedEventArgs e)
        {
            this.chromaKeyPopup();
            // this.CollapsePopUp();
            this.templatePopup();
            this.btnChromaZoomOut.Visibility = Visibility.Collapsed;
            this.btnZoomOutAct.Visibility = Visibility.Visible;
            this.IsImageDirtyState = true;
            this.btnZoomInActivate.Visibility = Visibility.Collapsed;
            this.btnZoomOutActivate.Visibility = Visibility.Collapsed;
            UIElement expr_12 = this.CmbProductType;
            Visibility expr_17 = Visibility.Collapsed;
            if (6 != 0)
            {
                expr_12.Visibility = expr_17;
            }
            RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
            try
            {
                Button button;
                TransformGroup transformGroup;
                RotateTransform rotateTransform;
                ScaleTransform scaleTransform;
                if (this.elementForContextMenu == null)
                {
                    if (this._ZoomFactor < 0.525)
                    {
                        this._ZoomFactor = 0.5;
                        return;
                    }
                    //  this._ZoomFactor -= 0.025;
                    this._ZoomFactor -= 0.010;
                    if (this.zoomTransform == null || this._ZoomFactor < 0.5)
                    {
                        goto IL_420;
                    }
                    if (this.FlipMode == 0 && this.FlipModeY == 0)
                    {
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                        this.zoomTransform.ScaleX = this._ZoomFactor;
                        this.zoomTransform.ScaleY = this._ZoomFactor;
                        this.transformGroup = new TransformGroup();
                        this.transformGroup.Children.Add(this.zoomTransform);
                        this.transformGroup.Children.Add(this.translateTransform);
                        this.transformGroup.Children.Add(this.rotateTransform);
                        if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                        {
                            this.GrdGreenScreenDefault3.RenderTransform = null;
                            this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                            this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                        }
                        else
                        {
                            this.MyInkCanvas.RenderTransform = null;
                            this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                        }
                        this.IsGraphicsChange = true;
                        goto IL_3F4;
                    }
                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    this.zoomTransform.ScaleX = this._ZoomFactor;
                    if (false)
                    {
                        goto IL_5F7;
                    }
                    this.zoomTransform.ScaleY = this._ZoomFactor;
                    this.transformGroup = new TransformGroup();
                    this.transformGroup.Children.Add(this.zoomTransform);
                    this.transformGroup.Children.Add(this.translateTransform);
                    this.transformGroup.Children.Add(this.rotateTransform);
                    if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                    {
                        this.GrdGreenScreenDefault3.RenderTransform = null;
                        if (-1 != 0)
                        {
                            this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                            this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                            goto IL_265;
                        }
                        goto IL_5A7;
                    }
                }
                else
                {
                    if (!(this.elementForContextMenu is Button))
                    {
                        goto IL_69D;
                    }
                    button = (Button)this.elementForContextMenu;
                    if (button.Tag != null)
                    {
                        this._GraphicsZoomFactor = Convert.ToDouble(button.Tag.ToString());
                    }
                    if (this._GraphicsZoomFactor < 0.625)
                    {
                        return;
                    }
                    this._GraphicsZoomFactor -= 0.025;
                    transformGroup = new TransformGroup();
                    TransformGroup transformGroup2 = this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup;
                    rotateTransform = new RotateTransform();
                    scaleTransform = new ScaleTransform();
                    if (transformGroup2 == null)
                    {
                        goto IL_5E3;
                    }
                    if (transformGroup2.Children.Count > 0)
                    {
                        if (transformGroup2.Children[0] is ScaleTransform)
                        {
                            scaleTransform = (ScaleTransform)transformGroup2.Children[0];
                        }
                        else if (transformGroup2.Children[0] is RotateTransform)
                        {
                            rotateTransform = (RotateTransform)transformGroup2.Children[0];
                        }
                    }
                    if (transformGroup2.Children.Count <= 1)
                    {
                        goto IL_5DC;
                    }
                    if (transformGroup2.Children[1] is ScaleTransform)
                    {
                        scaleTransform = (ScaleTransform)transformGroup2.Children[1];
                        goto IL_5A7;
                    }
                    if (transformGroup2.Children[1] is RotateTransform)
                    {
                        rotateTransform = (RotateTransform)transformGroup2.Children[1];
                        goto IL_5DB;
                    }
                    goto IL_5DB;
                }
            IL_233:
                this.MyInkCanvas.RenderTransform = null;
                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
            IL_265:
                this.IsGraphicsChange = true;
            IL_3F4:
                this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
            IL_420:
                goto IL_69D;
            IL_5A7:
            IL_5DB:
            IL_5DC:
                if (false)
                {
                    goto IL_233;
                }
            IL_5E3:
                if (scaleTransform == null)
                {
                    return;
                }
            IL_5F7:
                scaleTransform.ScaleX -= 0.025;
                scaleTransform.ScaleY -= 0.025;
                scaleTransform.CenterX = 0.0;
                scaleTransform.CenterY = 0.0;
                transformGroup.Children.Add(scaleTransform);
                if (rotateTransform != null)
                {
                    transformGroup.Children.Add(rotateTransform);
                }
                button.Tag = this._GraphicsZoomFactor;
                button.RenderTransform = transformGroup;
                this.elementForContextMenu = button;
                this.IsGraphicsChange = true;
            IL_69D:
                if (this._ZoomFactor >= 1.0)
                {
                    this.attribute.Width = this.attributeWidth / this._ZoomFactor;
                    this.attribute.Height = this.attributeHeight / this._ZoomFactor;
                }
                else
                {
                    this.attribute.Width = this.attributeWidth * this._ZoomFactor;
                    this.attribute.Height = this.attributeHeight * this._ZoomFactor;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
            this.IsGreenCorrection = false;

        }
        private void CollageRotate(int angle)
        {
            UIElement expr_06 = this.IMGFrame;
            System.Windows.Point expr_234 = new System.Windows.Point(0.5, 0.5);
            if (8 != 0)
            {
                expr_06.RenderTransformOrigin = expr_234;
            }
            RotateTransform expr_248 = new RotateTransform();
            RotateTransform rotateTransform;
            if (3 != 0)
            {
                rotateTransform = expr_248;
            }
            int num = this.rotateangle;
            if (angle != -1)
            {
                rotateTransform.Angle = (double)angle;
                if (4 != 0)
                {
                    this.IMGFrame.LayoutTransform = rotateTransform;
                    this.rotateangle = 360 - angle;
                    int arg_89_0 = this.rotateangle;
                    int arg_89_1 = 360;
                    int expr_89;
                    int expr_8C;
                    do
                    {
                        expr_89 = (arg_89_0 = ((arg_89_0 == arg_89_1) ? 1 : 0));
                        expr_8C = (arg_89_1 = 0);
                    }
                    while (expr_8C != 0);
                    if (expr_89 == expr_8C)
                    {
                        goto IL_9E;
                    }
                }
                this.rotateangle = 0;
            IL_9E:;
            }
            else
            {
                try
                {
                    int num2 = this.rotateangle;
                    if (num2 <= 90)
                    {
                        if (num2 != 0)
                        {
                            if (num2 == 90)
                            {
                                rotateTransform.Angle = 180.0;
                                if (8 != 0)
                                {
                                    this.rotateangle = 180;
                                }
                            }
                        }
                        else
                        {
                            rotateTransform.Angle = 90.0;
                            this.rotateangle = 90;
                        }
                    }
                    else
                    {
                        if (!false)
                        {
                            if (num2 == 180)
                            {
                                rotateTransform.Angle = 270.0;
                                goto IL_128;
                            }
                            if (num2 != 270)
                            {
                                goto IL_D9;
                            }
                            if (4 == 0)
                            {
                                goto IL_161;
                            }
                        }
                        rotateTransform.Angle = 360.0;
                        this.rotateangle = 0;
                    }
                IL_D9:
                    goto IL_152;
                IL_128:
                    this.rotateangle = 270;
                IL_152:
                    if (false)
                    {
                        goto IL_128;
                    }
                    this.IMGFrame.LayoutTransform = rotateTransform;
                IL_161:;
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                finally
                {
                    this.LogOperation(new LogObject
                    {
                        value = (float)num,
                        opName = "rotate"
                    });
                    if (this.rotateangle > 0)
                    {
                        this.IsEffectChange = true;
                        VisualStateManager.GoToState(this.btnrotate, "Checked", true);
                        VisualStateManager.GoToState(this.btnantirotate, "Checked", true);
                        if (2 != 0)
                        {
                            // this.RedEye.IsEnabled = false;
                            this.btnCollageBottom.Visibility = Visibility.Collapsed;
                            goto IL_229;
                        }
                    }
                    VisualStateManager.GoToState(this.btnrotate, "Unchecked", true);
                    VisualStateManager.GoToState(this.btnantirotate, "Unchecked", true);
                    this.btnCollageBottom.Visibility = Visibility.Visible;
                //  this.RedEye.IsEnabled = true;
                IL_229:;
                }
            }
        }

        private void Rotate(int angle)
        {
            UIElement expr_06 = this.GrdRotate;
            System.Windows.Point expr_234 = new System.Windows.Point(0.5, 0.5);
            if (8 != 0)
            {
                expr_06.RenderTransformOrigin = expr_234;
            }
            RotateTransform expr_248 = new RotateTransform();
            RotateTransform rotateTransform;
            if (3 != 0)
            {
                rotateTransform = expr_248;
            }
            int num = this.rotateangle;
            if (angle != -1)
            {
                rotateTransform.Angle = (double)angle;
                if (4 != 0)
                {
                    this.GrdRotate.LayoutTransform = rotateTransform;
                    this.rotateangle = 360 - angle;
                    int arg_89_0 = this.rotateangle;
                    int arg_89_1 = 360;
                    int expr_89;
                    int expr_8C;
                    do
                    {
                        expr_89 = (arg_89_0 = ((arg_89_0 == arg_89_1) ? 1 : 0));
                        expr_8C = (arg_89_1 = 0);
                    }
                    while (expr_8C != 0);
                    if (expr_89 == expr_8C)
                    {
                        goto IL_9E;
                    }
                }
                this.rotateangle = 0;
            IL_9E:;
            }
            else
            {
                try
                {
                    int num2 = this.rotateangle;
                    if (num2 <= 90)
                    {
                        if (num2 != 0)
                        {
                            if (num2 == 90)
                            {
                                rotateTransform.Angle = 180.0;
                                if (8 != 0)
                                {
                                    this.rotateangle = 180;
                                }
                            }
                        }
                        else
                        {
                            rotateTransform.Angle = 90.0;
                            this.rotateangle = 90;
                        }
                    }
                    else
                    {
                        if (!false)
                        {
                            if (num2 == 180)
                            {
                                rotateTransform.Angle = 270.0;
                                goto IL_128;
                            }
                            if (num2 != 270)
                            {
                                goto IL_D9;
                            }
                            if (4 == 0)
                            {
                                goto IL_161;
                            }
                        }
                        rotateTransform.Angle = 360.0;
                        this.rotateangle = 0;
                    }
                IL_D9:
                    goto IL_152;
                IL_128:
                    this.rotateangle = 270;
                IL_152:
                    if (false)
                    {
                        goto IL_128;
                    }
                    this.GrdRotate.LayoutTransform = rotateTransform;
                IL_161:;
                }
                catch (Exception serviceException)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                finally
                {
                    this.LogOperation(new LogObject
                    {
                        value = (float)num,
                        opName = "rotate"
                    });
                    if (this.rotateangle > 0)
                    {
                        this.IsEffectChange = true;
                        VisualStateManager.GoToState(this.btnrotate, "Checked", true);
                        VisualStateManager.GoToState(this.btnantirotate, "Checked", true);
                        if (2 != 0)
                        {
                            this.RedEye.IsEnabled = false;
                            goto IL_229;
                        }
                    }
                    VisualStateManager.GoToState(this.btnrotate, "Unchecked", true);
                    VisualStateManager.GoToState(this.btnantirotate, "Unchecked", true);
                    this.RedEye.IsEnabled = true;
                IL_229:;
                }
            }
        }

        private void RotateInButton_Click(object sender, RoutedEventArgs e)
        {
            while (true)
            {
                while (true)
                {
                    this.CmbProductType.Visibility = Visibility.Collapsed;
                    if (!false)
                    {
                        bool arg_5B_0;
                        bool expr_54 = arg_5B_0 = this.jrotate.IsVisible;
                        if (!false)
                        {
                            arg_5B_0 = !expr_54;
                        }
                        if (!arg_5B_0)
                        {
                            this.jrotate.Angle += 5.0;
                        }
                    }
                IL_3D:
                    if (false)
                    {
                        break;
                    }
                    if (!false)
                    {
                        if (true)
                        {
                            return;
                        }
                        break;
                    }
                    goto IL_3D;
                }
            }
        }

        private void SaveChangesToDB(string input)
        {
            try
            {
                if (8 == 0)
                {
                    goto IL_60;
                }
                bool flag = this.IsGumBall == this.gumshowDb;
                if (flag)
                {
                    goto IL_60;
                }
                if (5 == 0)
                {
                    goto IL_1AF;
                }
                if (!this.gumshowDb)
                {
                    this.ShowhidePlayerScore(Visibility.Collapsed);
                    goto IL_5D;
                }
            IL_47:
                this.ShowhidePlayerScore(Visibility.Visible);
            IL_5D:
                goto IL_68;
            IL_60:
                this.ShowhidePlayerScore(Visibility.Visible);
            IL_68:


                RenderTargetBitmap source = this.CaptureScreenForGreenScreen(this.forWdht, CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, false);
                if (this.IsGraphicsChange || this.isChromaApplied)
                {
                    this.SaveintoDB(input);
                }
                if (!this.IsGIFAnimationChanged)
                {
                    using (FileStream fileStream = new FileStream("Temp\\" + this.tempfilename, FileMode.Create, FileAccess.ReadWrite))
                    {

                        new JpegBitmapEncoder
                        {
                            QualityLevel = 95,
                            Frames =
                    {
                    BitmapFrame.Create(source)
                    }
                        }.Save(fileStream);
                    }

                }

                //File.Copy("Temp\\" + this.tempfilename, System.IO.Path.Combine(this.HotFolderPath, "EditedImages", this.tempfilename), true);
                //this.ResizeWPFImage("Temp\\" + this.tempfilename, 250, System.IO.Path.Combine(this.ThumnailFolderPath, this.DateFolder, this.tempfilename));
                //this.ResizeWPFImage("Temp\\" + this.tempfilename, 1200, System.IO.Path.Combine(this.BigThumnailFolderPath, this.DateFolder, this.tempfilename));

                if (this.IsCollageChanged)
                {
                    if (!Directory.Exists(System.IO.Path.Combine(this.HotFolderPath, "CollageImages")))
                    {
                        Directory.CreateDirectory(System.IO.Path.Combine(this.HotFolderPath, "CollageImages"));
                    }
                    string CollageFile = "";
                    System.Windows.Forms.SaveFileDialog dlg = new System.Windows.Forms.SaveFileDialog();
                   // dlg.FileName = "Document";
                    dlg.Filter = "JPeg Image|*.jpg|Bitmap Image|*.bmp|Gif Image|*.gif";
                    System.Windows.Forms.DialogResult dr = dlg.ShowDialog();
                    if (dr == System.Windows.Forms.DialogResult.OK)
                    {
                        CollageFile = dlg.FileName;                                          
                    }

                    if(CollageFile != "")
                    {
                        File.Copy("Temp\\" + this.tempfilename, System.IO.Path.Combine(CollageFile), true);
                        goto CF_01;
                    }

                    File.Copy("Temp\\" + this.tempfilename, System.IO.Path.Combine(this.HotFolderPath, "CollageImages", this.tempfilename), true);

                    PhotoSW.CF.DataLayer.BAL.baPhotoInfo obj = new PhotoSW.CF.DataLayer.BAL.baPhotoInfo();
                    string filename = this.tempfilename;
                    string changeFile = "";
                    filename = filename.Replace(filename, "Collage.jpg");

                   

                    // obj.
                    // PhotoSW.CF.DataLayer.BAL.baPhotoInfo.UpdateCollage(this.PhotoId);
                    PhotoSW.IMIX.Business.PhotoBusiness photoBusiness = new PhotoBusiness();
                    //int count = RobotImageLoader.GroupImages.Count;

                    obj = photoBusiness.GetPhotoCollagebyPhotoId(this.PhotoId);

                    int maxId = PhotoSW.CF.DataLayer.BAL.baPhotoInfo.MaxId();
                    changeFile = "Collage" + maxId + ".jpg";
                    obj.PS_Photos_FileName = changeFile;
                    obj.PS_Photo_ID = maxId + 1;
                    obj.IsCollageShow = true;
                    obj.IsActive = true;

                    PhotoSW.CF.DataLayer.BAL.baPhotoInfo.Insert(obj);

                    File.Copy("Temp\\" + this.tempfilename, System.IO.Path.Combine(this.HotFolderPath, "EditedImages", changeFile), true);
                    this.ResizeWPFImage("Temp\\" + this.tempfilename, 250, System.IO.Path.Combine(this.ThumnailFolderPath, this.DateFolder, changeFile));
                    this.ResizeWPFImage("Temp\\" + this.tempfilename, 1200, System.IO.Path.Combine(this.BigThumnailFolderPath, this.DateFolder, changeFile));

                }
                else if (this.IsGIFAnimationChanged)
                {
                    /////////////// //Test Gif/////////

                    int width = 128;
                    int height = width;
                    int stride = width / 8;
                    byte[] pixels = new byte[height * stride];

                    BitmapPalette myPalette = BitmapPalettes.WebPalette;

                    //  BitmapSource image = BitmapSource.Create( width,height,96,96,PixelFormats.Indexed1,myPalette, pixels,stride);

                    //using(FileStream fileStream = new FileStream("Temp\\" + this.tempfilename, FileMode.Create, FileAccess.ReadWrite))
                    //    {

                    //    foreach(var image in this.listImage)
                    //        {
                    //        GifBitmapEncoder encoder = new GifBitmapEncoder();
                    //        encoder.Frames.Add(BitmapFrame.Create(source));
                    //        encoder.Save(fileStream);

                    //        }
                    //    }


                    int duration;
                    string filePath = System.IO.Path.Combine(this.HotFolderPath, this.DateFolder);
                    switch (seconds)
                    {
                        case 1:
                            duration = 1000;
                            break;
                        case 2:
                            duration = 2000;
                            break;
                        case 3:
                            duration = 3000;
                            break;
                        case 4:
                            duration = 4000;
                            break;
                        case 5:
                            duration = 5000;
                            break;
                        default:
                            duration = 1000;
                            break;
                    }

                    /* create Gif */
                    //you should replace filepath
                    string pathgif = System.IO.Path.Combine(this.HotFolderPath, "GIFImages");
                    if (!Directory.Exists(System.IO.Path.Combine(this.HotFolderPath, "GIFImages")))
                    {
                        Directory.CreateDirectory(System.IO.Path.Combine(this.HotFolderPath, "GIFImages"));
                    }
                    // String outputFilePath ="Temp\\Ainmation.gif";
                    String outputFilePath = pathgif + "\\Ainmation.gif";
                    AnimatedGifEncoder e1 = new AnimatedGifEncoder();
                    e1.Start(outputFilePath);
                    e1.SetDelay(duration);
                    //-1:no repeat,0:always repeat
                    e1.SetRepeat(0);
                    for (int i = 0, count = this.listImage.Count; i < count; i++)
                    {
                        e1.AddFrame(System.Drawing.Image.FromFile(filePath + "//" + this.listImage[i]));
                    }
                    e1.Finish();

                    ////////// End  //////////////////////// 


                    // File.Copy("Temp\\" + this.tempfilename, System.IO.Path.Combine(this.HotFolderPath, "GIFImages", this.tempfilename), true);

                    PhotoSW.CF.DataLayer.BAL.baPhotoInfo obj = new PhotoSW.CF.DataLayer.BAL.baPhotoInfo();
                    string filename = this.tempfilename;
                    string changeFile = "";
                    filename = filename.Replace(filename, "animation.gif");

                    PhotoSW.IMIX.Business.PhotoBusiness photoBusiness = new PhotoBusiness();
                    //int count = RobotImageLoader.GroupImages.Count;
                    obj = photoBusiness.GetPhotoCollagebyPhotoId(this.PhotoId);

                    int maxId = PhotoSW.CF.DataLayer.BAL.baPhotoInfo.MaxId();

                    changeFile = "animation" + maxId + ".gif";
                    obj.PS_Photos_FileName = changeFile;
                    obj.PS_Photo_ID = maxId + 1;
                    obj.IsActive = true;
                    obj.IsCollageShow = true;
                    PhotoSW.CF.DataLayer.BAL.baPhotoInfo.Insert(obj);

                    //  File.Copy("Temp\\" + this.tempfilename, System.IO.Path.Combine(this.HotFolderPath, "EditedImages", changeFile), true);
                    File.Copy("Temp\\" + this.tempfilename, System.IO.Path.Combine(this.HotFolderPath, "GIFImages", changeFile), true);
                    this.ResizeWPFImage("Temp\\" + this.tempfilename, 250, System.IO.Path.Combine(this.ThumnailFolderPath, this.DateFolder, changeFile));
                    this.ResizeWPFImage("Temp\\" + this.tempfilename, 1200, System.IO.Path.Combine(this.BigThumnailFolderPath, this.DateFolder, changeFile));
                }
                else
                {
                    File.Copy("Temp\\" + this.tempfilename, System.IO.Path.Combine(this.HotFolderPath, "EditedImages", this.tempfilename), true);
                    this.ResizeWPFImage("Temp\\" + this.tempfilename, 250, System.IO.Path.Combine(this.ThumnailFolderPath, this.DateFolder, this.tempfilename));
                    this.ResizeWPFImage("Temp\\" + this.tempfilename, 1200, System.IO.Path.Combine(this.BigThumnailFolderPath, this.DateFolder, this.tempfilename));
                }

                ////  Add by jayendra
                //  this.ResizeWPFImage("Temp\\" + this.tempfilename, 1200, System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, this.tempfilename));
                /////////////////////////////////////////////
                CF_01:
                FileInfo fileInfo = new FileInfo("Temp\\" + this.tempfilename);
                flag = !this.gumshowDb;
            IL_1AF:
                if (!flag)
                {
                    do
                    {
                        this.ShowhidePlayerScore(Visibility.Collapsed);
                    }
                    while (5 == 0);
                    if (!Directory.Exists(System.IO.Path.Combine(this.HotFolderPath, "EditedImages", "RideCDUSB")))
                    {
                        Directory.CreateDirectory(System.IO.Path.Combine(this.HotFolderPath, "EditedImages", "RideCDUSB"));
                    }
                    fileInfo.CopyTo(System.IO.Path.Combine(this.HotFolderPath, "EditedImages", "RideCDUSB", this.tempfilename), true);
                    if (-1 == 0)
                    {
                        goto IL_47;
                    }
                    source = this.CaptureScreenForGreenScreen(this.forWdht, CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, false);
                    FileStream fileStream = new FileStream("Temp\\" + this.tempfilename, FileMode.Create, FileAccess.ReadWrite);
                    try
                    {
                        new JpegBitmapEncoder
                        {
                            QualityLevel = 95,
                            Frames =
                    {
                        BitmapFrame.Create(source)
                    }
                        }.Save(fileStream);
                    }
                    finally
                    {
                        if (3 != 0)
                        {
                            bool arg_28A_0 = fileStream == null;
                            bool expr_28C;
                            do
                            {
                                flag = arg_28A_0;
                                expr_28C = (arg_28A_0 = flag);
                            }
                            while (5 == 0);
                            if (!expr_28C)
                            {
                                ((IDisposable)fileStream).Dispose();
                            }
                        }
                    }
                    File.Copy("Temp\\" + this.tempfilename, System.IO.Path.Combine(this.HotFolderPath, "EditedImages", this.tempfilename), true);
                }
                fileInfo.Delete();
            }
            catch (Exception ex)
            {
                do
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(ex);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    MessageBox.Show(ex.Message);
                }
                while (false);
            }
            finally
            {
                if (true)
                {
                    MemoryManagement.FlushMemory();
                }
            }
        }

        public void SaveCropEffectsintoDB()
        {
            if (4 != 0)
            {
                PhotoBusiness photoBusiness = new PhotoBusiness();
                photoBusiness.SaveCroppedPhotoInfo((long)this.PhotoId, true, this.ImageEffect);
            }
        }

        private void SaveCropNRedEyeImage(BitmapSource mainImageSouce, string operation)
        {
            try
            {
                while (true)
                {
                    if (false)
                    {
                        goto IL_89;
                    }
                    PhotoBusiness photoBusiness;
                    if (!false)
                    {
                        photoBusiness = new PhotoBusiness();
                        using (FileStream fileStream = new FileStream(System.IO.Path.Combine(this.CropFolderPath, this.tempfilename), FileMode.Create))
                        {
                            new JpegBitmapEncoder
                            {
                                QualityLevel = 98,
                                Frames =
                        {
                            BitmapFrame.Create(mainImageSouce)
                        }
                            }.Save(fileStream);
                            DisposableResource disposableResource = new DisposableResource(fileStream);
                            disposableResource.DoSomethingWithResource();
                        }
                        goto IL_89;
                    }
                IL_A1:
                    bool arg_96_0;
                    if (8 != 0)
                    {
                        arg_96_0 = photoBusiness.SaveIsCropedPhotos((long)this.PhotoId, true, operation);
                        goto IL_BB;
                    }
                    continue;
                IL_95:
                    bool expr_96 = arg_96_0 = !arg_96_0;
                    if (5 != 0)
                    {
                        if (!expr_96)
                        {
                            goto IL_A1;
                        }
                        break;
                    }
                IL_BB:
                    if (!false)
                    {
                        break;
                    }
                    goto IL_95;
                IL_89:
                    arg_96_0 = (operation != "Crop");
                    goto IL_95;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
                if (!false)
                {
                }
            }
        }

        public void SaveEffectsintoDB()
        {
            PhotoBusiness expr_1C = new PhotoBusiness();
            PhotoBusiness photoBusiness;
            if (!false)
            {
                photoBusiness = expr_1C;
            }
            photoBusiness.SetEffectsonPhoto(this.ImageEffect, this.PhotoId, this.gumshowDb);
        }

        private void SaveGreenScreenImage()
        {
            RenderTargetBitmap source;
            while (true)
            {
                RenderTargetBitmap expr_E0 = this.CaptureScreenForPNGImage(this.forWdht, CroppingAdorner.s_dpiX, CroppingAdorner.s_dpiY, false);
                if (8 != 0)
                {
                    source = expr_E0;
                }
                bool arg_FC_0;
                if (this.isChromaApplied)
                {
                    arg_FC_0 = !this.IsGreenRemove;
                    goto IL_4C;
                }
                if (!false)
                {
                    if (true)
                    {
                        arg_FC_0 = true;
                        goto IL_4C;
                    }
                    goto IL_5A;
                }
            IL_C9:
                if (!false)
                {
                    break;
                }
                continue;
            IL_5A:
                FileStream fileStream = new FileStream(System.IO.Path.Combine(this.HotFolderPath, this.DateFolder, this.tempfilename.Replace(".jpg", ".png")), FileMode.Create, FileAccess.ReadWrite);
                try
                {
                    PngBitmapEncoder pngBitmapEncoder = new PngBitmapEncoder();
                    if (false)
                    {
                        goto IL_B1;
                    }

                // IL_A8:
                //pngBitmapEncoder.Frames.Add(BitmapFrame.Create(source));
                //// IL_A8:
                //pngBitmapEncoder.Save(fileStream);
                // Jayendra
                IL_A8:
                    if (source != null)
                    {
                        pngBitmapEncoder.Frames.Add(BitmapFrame.Create(source));
                        // IL_A8:
                        pngBitmapEncoder.Save(fileStream);
                    }
                ///////////
                IL_B1:
                    if (false)
                    {
                        goto IL_A8;
                    }
                }
                finally
                {
                    while (fileStream != null)
                    {
                        if (4 != 0)
                        {
                            ((IDisposable)fileStream).Dispose();
                            break;
                        }
                    }
                }
                goto IL_C9;
            IL_4C:
                if (!arg_FC_0)
                {
                    goto IL_5A;
                }
                break;
            }
            source = null;
        }

        private void SaveintoDB(string input)
        {
            if (2 != 0)
            {
                try
                {
                    PhotoBusiness photoBusiness;
                    do
                    {
                        photoBusiness = new PhotoBusiness();
                    }
                    while (7 == 0);
                    photoBusiness.UpdateLayering(this.PhotoId, input);
                    while (false)
                    {
                    }
                }
                catch (Exception serviceException)
                {
                    while (-1 == 0)
                    {
                    }
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    do
                    {
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                    while (-1 == 0);
                }
            }
        }

        private void SaveOnImageChange()
        {
            bool flag = false;
            try
            {
                this.EffectsSender = null;
                this.CmbProductType.Visibility = Visibility.Collapsed;
                if (!this.redeffectfirstApplied)
                {
                    UIElement expr_3F = this.GrdRedEyeFirst;
                    Effect expr_44 = null;
                    if (!false)
                    {
                        expr_3F.Effect = expr_44;
                    }
                }
                else
                {
                    flag = true;
                }
                bool flag2 = this.redeffectsecondApplied;
                string input;
                bool arg_2B0_0;
                bool arg_26C_0;
                while (true)
                {
                    if (!flag2)
                    {
                        this.GrdRedEyeSecond.Effect = null;
                    }
                    else
                    {
                        flag = true;
                    }
                    if (!this.redeffectmultiple1Applied)
                    {
                        this.GrdRedEyeMultiple.Effect = null;
                    }
                    else
                    {
                        flag = true;
                    }
                    if (!this.redeffectmultiple2Applied)
                    {
                        this.redEyeEffectMultiple.Radius1 = 0.0;
                    }
                    else
                    {
                        flag = true;
                    }
                    bool arg_B7_0 = this.redeffectmultiple3Applied;
                    bool expr_17E;
                    while (true)
                    {
                        if (!arg_B7_0)
                        {
                            this.redEyeEffectMultiple.Radius2 = 0.0;
                        }
                        else
                        {
                            flag = true;
                        }
                        if (!this.redeffectmultiple4Applied)
                        {
                            this.GrdRedEyeMultiple1.Effect = null;
                        }
                        else
                        {
                            flag = true;
                        }
                        if (!this.redeffectmultiple5Applied)
                        {
                            this.redEyeEffectMultiple1.Radius1 = 0.0;
                        }
                        else
                        {
                            flag = true;
                        }
                        if (!this.redeffectmultiple6Applied)
                        {
                            this.redEyeEffectMultiple1.Radius2 = 0.0;
                        }
                        else
                        {
                            flag = true;
                        }
                        this.imageundoGrid.IsHitTestVisible = true;
                        if (this.isChromaApplied || !this.IsGreenRemove)
                        {
                            break;
                        }
                        flag2 = (this.MyInkCanvas.Children.Count <= 1);
                        expr_17E = (arg_B7_0 = flag2);
                        if (!false)
                        {
                            goto Block_13;
                        }
                    }
                IL_1D8:
                    input = string.Empty;
                    if (this.IsGumBall != this.gumshowDb)
                    {
                        this.IsEffectChange = true;
                    }
                    bool flag3 = false;
                    bool expr_1FE = arg_2B0_0 = this.IsGraphicsChange;
                    if (8 == 0)
                    {
                        goto IL_2B0;
                    }
                    bool arg_21B_0;
                    if (!expr_1FE)
                    {
                        bool expr_20C = arg_26C_0 = this.isChromaApplied;
                        if (!true)
                        {
                            goto IL_26B;
                        }
                        arg_21B_0 = !expr_20C;
                    }
                    else
                    {
                        arg_21B_0 = false;
                    }
                    if (!arg_21B_0)
                    {
                        input = this.SaveXaml(ref flag3);
                    }
                    flag2 = (flag3 || this.isChromaApplied);
                    if (!flag2)
                    {
                        flag2 = this.gumballRestore;
                        if (!flag2)
                        {
                            input = null;
                        }
                        this.ShowhidePlayerScore(Visibility.Collapsed);
                    }
                    if (true)
                    {
                        break;
                    }
                    continue;
                Block_13:
                    if (!expr_17E)
                    {
                        this.MyInkCanvas.Children.RemoveRange(1, this.MyInkCanvas.Children.Count);
                    }
                    if (this.MyInkCanvas.Strokes.Count > 0)
                    {
                        this.MyInkCanvas.Strokes.Clear();
                    }
                    goto IL_1D8;
                }
                bool arg_272_0;
                if (this.IsEffectChange)
                {
                    arg_272_0 = false;
                    goto IL_271;
                }
                arg_26C_0 = this.IsGraphicsChange;
            IL_26B:
                arg_272_0 = !arg_26C_0;
            IL_271:
                if (!arg_272_0)
                {
                    flag = true;
                }
                bool arg_295_0;
                if (!this.IsModerate)
                {
                    arg_295_0 = !this.IsEffectChange;
                }
                else
                {
                    if (false)
                    {
                        goto IL_385;
                    }
                    arg_295_0 = true;
                }
                if (!arg_295_0)
                {
                    this.SaveEffectsintoDB();
                }
                if (this.IsModerate)
                {
                    goto IL_2C9;
                }
                arg_2B0_0 = this.IsGraphicsChange;
            IL_2B0:
                bool arg_2CB_0 = !arg_2B0_0 && !this.IsEffectChange && !this.IsChromaChanged;
                goto IL_2CA;
            IL_2C9:
                arg_2CB_0 = true;
            IL_2CA:
                if (!arg_2CB_0)
                {
                    this.SaveChangesToDB(input);
                }
                bool arg_303_0;
                if (this.isChromaApplied)
                {
                    if (4 == 0)
                    {
                        goto IL_38D;
                    }
                    if (!this.IsModerate)
                    {
                        arg_303_0 = (!this.IsChromaChanged && !flag);
                        goto IL_302;
                    }
                }
                arg_303_0 = true;
            IL_302:
                if (!arg_303_0)
                {
                    if (this.IsChromaChanged)
                    {
                        this.IsChromaChanged = false;
                    }
                    if (4 == 0)
                    {
                        goto IL_2C9;
                    }
                }
                this.ChromaGridLeft = 0.0;
                this.ChromaGridTop = 0.0;
                this.ChromaCenterX = 0.0;
                this.ChromaCenterY = 0.0;
                this.ChromaZoomFactor = 0.0;
                this.ChromaBorderPath = string.Empty;
                this.OriginalBorder = string.Empty;
            IL_385:
                this.IsImageDirtyState = false;
            IL_38D:;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
                GC.AddMemoryPressure(10000L);
                this.lstStrip.Items.Refresh();
                this.lstStrip.UpdateLayout();
                while (false)
                {
                }
            }
        }

        private string SaveXaml(ref bool graphicsChange)
        {
            StringBuilder stringBuilder = new StringBuilder();
            string result;
            try
            {
                string xml = System.Windows.Markup.XamlWriter.Save(this.Opacitymsk);
                XmlDocument xmlDocument = new XmlDocument();
                xmlDocument.LoadXml(xml);
                StringBuilder stringBuilder2 = new StringBuilder();
                string text = "-1";
                string text2 = "-1";
                string text3 = "-1";
                string text4 = "-1";
                string text5 = "-1";
                foreach (object current in xmlDocument.ChildNodes[0].Attributes)
                {
                    string text6 = ((XmlAttribute)current).Name.ToLower();
                    if (text6 != null)
                    {
                        if (!(text6 == "canvas.left"))
                        {
                            if (text6 == "canvas.top")
                            {
                                text2 = ((XmlAttribute)current).Value.ToString();
                            }
                        }
                        else
                        {
                            text = ((XmlAttribute)current).Value.ToString();
                        }
                    }
                }
                graphicsChange = true;
                if (text == "-1" && text2 == "-1")
                {
                    graphicsChange = false;
                }
                if (text == "0" && text2 == "0")
                {
                    graphicsChange = false;
                }
                XmlReader xmlReader = XmlReader.Create(new StringReader(xmlDocument.InnerXml.ToString()));
                while (xmlReader.Read())
                {
                    if (xmlReader.NodeType == XmlNodeType.Element)
                    {
                        string text6 = xmlReader.Name.ToString().ToLower();
                        if (text6 != null)
                        {
                            if (text6 == "rotatetransform")
                            {
                                if (xmlReader.GetAttribute("Angle") != null)
                                {
                                    text3 = xmlReader.GetAttribute("Angle").ToString();
                                }
                            }
                        }
                    }
                }
                string xml2 = System.Windows.Markup.XamlWriter.Save(this.canbackground);
                XmlDocument xmlDocument2 = new XmlDocument();
                xmlDocument2.LoadXml(xml2);
                XmlReader xmlReader2 = XmlReader.Create(new StringReader(xmlDocument2.InnerXml.ToString()));
                while (xmlReader2.Read())
                {
                    if (xmlReader2.NodeType == XmlNodeType.Element)
                    {
                        string text6 = xmlReader2.Name.ToString().ToLower();
                        if (text6 != null)
                        {
                            if (text6 == "scaletransform")
                            {
                                if (xmlReader2.GetAttribute("CenterX") != null)
                                {
                                    text4 = xmlReader2.GetAttribute("CenterX").ToString();
                                }
                                if (xmlReader2.GetAttribute("CenterY") != null)
                                {
                                    text5 = xmlReader2.GetAttribute("CenterY").ToString();
                                }
                            }
                        }
                    }
                }
                string text7 = string.Empty;
                if (this.imageundoGrid.Background != null && (BitmapImage)((ImageBrush)this.imageundoGrid.Background).ImageSource != null)
                {
                    string text8 = ((BitmapImage)((ImageBrush)this.imageundoGrid.Background).ImageSource).UriSource.LocalPath.ToString();
                    int num = text8.Split(new char[]
                {
                    '\\'
                }).Count<string>();
                        text7 = text8.Split(new char[]
                {
                    '\\'
                })[num - 1].ToString();
                    graphicsChange = true;
                }
                string text9 = string.Empty;
                foreach (object current2 in this.frm.Children)
                {
                    if (current2 is System.Windows.Controls.Image)
                    {
                        System.Windows.Controls.Image image = (System.Windows.Controls.Image)current2;
                        if (image.Uid.ToString() == "frame")
                        {
                            string text8 = image.Source.ToString();
                            int num = text8.Split(new char[]
                    {
                        '/'
                    }).Count<string>();
                            text9 = text8.Split(new char[]
                    {
                        '/'
                    })[num - 1].ToString();
                            graphicsChange = true;
                        }
                    }
                }
                if (this.jrotate.Angle != 0.0 || (this._ZoomFactor >= 0.5 && this._ZoomFactor != 1.0) || !string.IsNullOrEmpty(text9) || !string.IsNullOrEmpty(text7))
                {
                    graphicsChange = true;
                }
                int zIndex = Panel.GetZIndex(this.frm);
                stringBuilder.Append(string.Concat(new object[]
                {
                    "<photo  producttype = '",
                    this.specproductType,
                    "' frmZindex = '",
                    zIndex,
                    "' zoomfactor = '",
                    this._ZoomFactor,
                    "' border='",
                    text9,
                    "' bg='",
                    text7,
                    "' canvasleft='",
                    text,
                    "' canvastop='",
                    text2,
                    "' rotatetransform='",
                    text3,
                    "' scalecentrex='",
                    text4,
                    "' scalecentrey='",
                    text5,
                    "'>"
                }));
                foreach (object current3 in this.dragCanvas.Children)
                {
                    if (current3 is Button)
                    {
                        graphicsChange = true;
                        Button button = (Button)current3;
                        string text10 = "-1";
                        try
                        {
                            text10 = ((RotateTransform)button.RenderTransform).Angle.ToString();
                        }
                        catch (Exception)
                        {
                        }
                        int num2 = (int)button.GetValue(Panel.ZIndexProperty);
                        double top = Canvas.GetTop(button);
                        double left = Canvas.GetLeft(button);
                        string text11 = ((System.Windows.Controls.Image)button.Content).Source.ToString();
                        int num = text11.Split(new char[]
                        {
                            '/'
                        }).Count<string>();
                                text11 = text11.Split(new char[]
                        {
                            '/'
                        })[num - 1].ToString();
                        TransformGroup transformGroup = button.GetValue(UIElement.RenderTransformProperty) as TransformGroup;
                        RotateTransform rotateTransform = new RotateTransform();
                        ScaleTransform scaleTransform = new ScaleTransform();
                        if (transformGroup != null)
                        {
                            int arg_6E4_0 = (transformGroup.Children.Count > 0) ? 1 : 0;
                            int arg_6E4_1 = 0;
                            int expr_771;
                            int expr_777;
                            do
                            {
                                if (arg_6E4_0 != arg_6E4_1)
                                {
                                    if (transformGroup.Children[0] is ScaleTransform)
                                    {
                                        scaleTransform = (ScaleTransform)transformGroup.Children[0];
                                    }
                                    else if (transformGroup.Children[0] is RotateTransform)
                                    {
                                        rotateTransform = (RotateTransform)transformGroup.Children[0];
                                        text10 = rotateTransform.Angle.ToString();
                                    }
                                }
                                expr_771 = (arg_6E4_0 = transformGroup.Children.Count);
                                expr_777 = (arg_6E4_1 = 1);
                            }
                            while (expr_777 == 0);
                            if (expr_771 > expr_777)
                            {
                                if (transformGroup.Children[1] is ScaleTransform)
                                {
                                    scaleTransform = (ScaleTransform)transformGroup.Children[1];
                                }
                                else if (transformGroup.Children[1] is RotateTransform)
                                {
                                    rotateTransform = (RotateTransform)transformGroup.Children[1];
                                    text10 = rotateTransform.Angle.ToString();
                                }
                            }
                        }
                        stringBuilder.Append(string.Concat(new object[]
                {
                    "<graphics zindex ='",
                    num2,
                    "' wthsource ='",
                    button.Width,
                    "' source ='",
                    text11,
                    "' angle='",
                    text10,
                    "' top ='",
                    top,
                    "' left='",
                    left,
                    "' scalex ='",
                    scaleTransform.ScaleX.ToString(),
                    "' scaley ='",
                    scaleTransform.ScaleY.ToString(),
                    "' zoomfactor = '",
                    button.Tag.ToString(),
                    "'></graphics>"
                }));
                    }
                    if (current3 is TextBox)
                    {
                        graphicsChange = true;
                        TextBox textBox = (TextBox)current3;
                        if (!textBox.Name.StartsWith("Player"))
                        {
                            string text12 = textBox.Text;
                            text12 = text12.Replace("&", "&amp;");
                            text12 = text12.Replace("<", "&lt;");
                            text12 = text12.Replace(">", "&gt;");
                            text12 = text12.Replace("\"", "&quot;");
                            text12 = text12.Replace("'", "&apos;");
                            string xml3 = System.Windows.Markup.XamlWriter.Save(textBox);
                            xmlDocument2 = new XmlDocument();
                            xmlDocument2.LoadXml(xml3);
                            string text13 = "-1";
                            string text14 = "-1";
                            string text15 = "-1";
                            string text16 = "-1";
                            string text17 = "-1";
                            string text18 = "-1";
                            int num2 = (int)textBox.GetValue(Panel.ZIndexProperty);
                            foreach (object current in xmlDocument2.ChildNodes[0].Attributes)
                            {
                                string text6 = ((XmlAttribute)current).Name.ToLower();
                                if (text6 != null)
                                {
                                    if (!(text6 == "canvas.left"))
                                    {
                                        if (!(text6 == "canvas.top"))
                                        {
                                            if (!(text6 == "foreground"))
                                            {
                                                if (!(text6 == "fontfamily"))
                                                {
                                                    if (text6 == "fontsize")
                                                    {
                                                        text17 = ((XmlAttribute)current).Value.ToString();
                                                    }
                                                }
                                                else
                                                {
                                                    text16 = ((XmlAttribute)current).Value.ToString();
                                                }
                                            }
                                            else
                                            {
                                                text15 = ((XmlAttribute)current).Value.ToString();
                                            }
                                        }
                                        else
                                        {
                                            text14 = ((XmlAttribute)current).Value.ToString();
                                        }
                                    }
                                    else
                                    {
                                        text13 = ((XmlAttribute)current).Value.ToString();
                                    }
                                }
                            }
                            xmlReader2 = XmlReader.Create(new StringReader(xmlDocument2.InnerXml.ToString()));
                            while (xmlReader2.Read())
                            {
                                if (xmlReader2.NodeType == XmlNodeType.Element)
                                {
                                    string text6 = xmlReader2.Name.ToString().ToLower();
                                    if (text6 != null)
                                    {
                                        if (text6 == "rotatetransform")
                                        {
                                            if (xmlReader2.GetAttribute("Angle") != null)
                                            {
                                                text18 = xmlReader2.GetAttribute("Angle").ToString();
                                            }
                                        }
                                    }
                                }
                            }
                            stringBuilder.Append(string.Concat(new object[]
                            {
                                "<textbox zindex ='",
                                num2,
                                "'  text ='",
                                text12,
                                "' angle='",
                                text18,
                                "' top ='",
                                text14,
                                "' left='",
                                text13,
                                "' foreground='",
                                text15,
                                "' _fontfamily='",
                                text16,
                                "'  fontsize='",
                                text17,
                                "' ></textbox>"
                            }));
                        }
                    }
                    string name = ((FrameworkElement)current3).Name;
                    if (name.Equals("grdGumball"))
                    {
                        this.gumballRestore = true;
                        stringBuilder.Append(this.GumBallAppend);
                    }
                }
                stringBuilder.Append("</photo>");
                result = stringBuilder.ToString();
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                result = stringBuilder.ToString();
            }
            return result;
        }

        public void SaveXml(string operation, string value, bool childnode)
        {
            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(this.ImageEffect);
            if (!childnode)
            {
                XmlNodeList xmlNodeList = xmlDocument.SelectNodes("//image");
                switch (operation)
                {
                    case "colourValue":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            if (value != "restore" && value != "none")
                            {
                                xmlElement.SetAttribute("colourvalue", value);
                            }
                            else if (value != "none")
                            {
                                xmlElement.SetAttribute("colourvalue", "##");
                            }
                        }
                        break;
                    case "brightness":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("brightness", value);
                        }
                        break;
                    case "contrast":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("contrast", value);
                        }
                        break;
                    case "rotatewidth":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("rotatewidth", value);
                        }
                        break;
                    case "rotateheight":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("rotateheight", value);
                        }
                        break;
                    case "rotate":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("rotate", value);
                        }
                        break;
                    case "_centerx":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("_centerx", value);
                        }
                        break;
                    case "_centery":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("_centery", value);
                        }
                        break;
                    case "Crop":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("Crop", value);
                        }
                        break;
                    case "firstredeye":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("firstredeye", value);
                        }
                        break;
                    case "firstradius":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("firstradius", value);
                        }
                        break;
                    case "Aspectratiofirstredeye":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("Aspectratiofirstredeye", value);
                        }
                        break;
                    case "Aspectratiosecondredeye":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("Aspectratiosecondredeye", value);
                        }
                        break;
                    case "firstcenterx":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("firstcenterx", value);
                        }
                        break;
                    case "firstcentery":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("firstcentery", value);
                        }
                        break;
                    case "secondredeye":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("secondredeye", value);
                        }
                        break;
                    case "secondradius":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("secondradius", value);
                        }
                        break;
                    case "secondcenterx":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("secondcenterx", value);
                        }
                        break;
                    case "secondcentery":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("secondcentery", value);
                        }
                        break;
                    case "multipleredeye1":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multipleredeye1", value);
                        }
                        break;
                    case "multipleradius1":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multipleradius1", value);
                        }
                        break;
                    case "multiplecenterx1":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecenterx1", value);
                        }
                        break;
                    case "multiplecentery1":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecentery1", value);
                        }
                        break;
                    case "multipleredeye2":
                        // using (IEnumerator enumerator = xmlNodeList.GetEnumerator())
                        IEnumerator enumerator = xmlNodeList.GetEnumerator();
                        try
                        {
                            if (!false)
                            {
                                goto IL_B85;
                            }
                        IL_B76:
                            XmlElement xmlElement;
                            xmlElement.SetAttribute("multipleredeye2", value);
                        IL_B85:
                            if (enumerator.MoveNext())
                            {
                                xmlElement = (XmlElement)enumerator.Current;
                                goto IL_B76;
                            }
                        }
                        catch
                        {
                        }
                        finally
                        {
                            ((IDisposable)enumerator).Dispose();
                        }
                        break;
                    case "multipleradius2":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multipleradius2", value);
                        }
                        break;
                    case "multiplecenterx2":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecenterx2", value);
                        }
                        break;
                    case "multiplecentery2":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecentery2", value);
                        }
                        break;
                    case "multipleredeye3":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multipleredeye3", value);
                        }
                        break;
                    case "multipleradius3":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multipleradius3", value);
                        }
                        break;
                    case "multiplecenterx3":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecenterx3", value);
                        }
                        break;
                    case "multiplecentery3":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecentery3", value);
                        }
                        break;
                    case "multipleredeye4":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multipleredeye4", value);
                        }
                        break;
                    case "multipleradius4":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multipleradius4", value);
                        }
                        break;
                    case "multiplecenterx4":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecenterx4", value);
                        }
                        break;
                    case "multiplecentery4":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecentery4", value);
                        }
                        break;
                    case "multipleredeye5":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multipleredeye5", value);
                        }
                        break;
                    case "multipleradius5":
                        {
                            IEnumerator enumerator1 = xmlNodeList.GetEnumerator();
                            try
                            {
                                while (enumerator1.MoveNext())
                                {
                                    XmlElement xmlElement = (XmlElement)enumerator1.Current;
                                    xmlElement.SetAttribute("multipleradius5", value);
                                }
                            }
                            finally
                            {
                                IDisposable disposable = enumerator1 as IDisposable;
                                bool arg_1010_0;
                                bool expr_1009 = arg_1010_0 = (disposable == null);
                                if (5 != 0)
                                {
                                    bool flag = expr_1009;
                                    arg_1010_0 = flag;
                                }
                                if (!arg_1010_0)
                                {
                                    disposable.Dispose();
                                }
                            }
                            break;
                        }
                    case "multiplecenterx5":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecenterx5", value);
                        }
                        break;
                    case "multiplecentery5":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecentery5", value);
                        }
                        break;
                    case "multipleredeye6":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multipleredeye6", value);
                        }
                        break;
                    case "multipleradius6":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multipleradius6", value);
                        }
                        break;
                    case "multiplecenterx6":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecenterx6", value);
                        }
                        break;
                    case "multiplecentery6":
                        foreach (XmlElement xmlElement in xmlNodeList)
                        {
                            xmlElement.SetAttribute("multiplecentery6", value);
                        }
                        break;
                }
            }
            else
            {
                XmlNodeList xmlNodeList = xmlDocument.SelectNodes("//image//effects");
                if (operation == "greyscale")
                {
                    IEnumerator enumerator = xmlNodeList.GetEnumerator();
                    try
                    {
                        while (enumerator.MoveNext())
                        {
                            XmlElement xmlElement = (XmlElement)enumerator.Current;
                            bool arg_1283_0;
                            bool expr_126D = arg_1283_0 = (value != "restore");
                            if (false)
                            {
                                goto IL_1282;
                            }
                            if (expr_126D)
                            {
                                arg_1283_0 = (value != "none");
                                goto IL_1282;
                            }
                            bool arg_1289_0 = true;
                        IL_1288:
                            if (!arg_1289_0)
                            {
                                xmlElement.SetAttribute("greyscale", value);
                            }
                            continue;
                        IL_1282:
                            arg_1289_0 = !arg_1283_0;
                            goto IL_1288;
                        }
                    }
                    finally
                    {
                        do
                        {
                            IDisposable disposable = enumerator as IDisposable;
                            if (disposable != null)
                            {
                                disposable.Dispose();
                            }
                        }
                        while (false);
                    }
                }
                if (operation == "sepia")
                {
                    foreach (XmlElement xmlElement in xmlNodeList)
                    {
                        bool arg_1318_0;
                        if (!(value != "restore"))
                        {
                            arg_1318_0 = true;
                            goto IL_1317;
                        }
                        if (!false)
                        {
                            arg_1318_0 = !(value != "none");
                            goto IL_1317;
                        }
                        continue;
                    IL_1317:
                        if (!arg_1318_0)
                        {
                            xmlElement.SetAttribute("sepia", value);
                        }
                    }
                }
                if (operation == "defog")
                {
                    //using (IEnumerator enumerator = xmlNodeList.GetEnumerator())
                    IEnumerator enumerator = xmlNodeList.GetEnumerator();
                    try
                    {
                        while (true)
                        {
                            while (enumerator.MoveNext())
                            {
                                if (!false)
                                {
                                    XmlElement xmlElement = (XmlElement)enumerator.Current;
                                    if (value != "restore" && value != "none")
                                    {
                                        xmlElement.SetAttribute("defog", value);
                                    }
                                }
                            }
                            break;
                        }
                    }
                    catch (Exception)
                    {
                    }
                    finally
                    {
                        // ((IDisposable)enumerator).Dispose();
                    }
                }
                if (operation == "underwater")
                {
                    foreach (XmlElement xmlElement in xmlNodeList)
                    {
                        if (value != "restore" && value != "none")
                        {
                            xmlElement.SetAttribute("underwater", value);
                        }
                    }
                }
                if (operation == "digimagic")
                {
                    foreach (XmlElement xmlElement in xmlNodeList)
                    {
                        if (value != "restore" && value != "none")
                        {
                            xmlElement.SetAttribute("digimagic", value);
                        }
                    }
                }
                if (operation == "emboss")
                {
                    foreach (XmlElement xmlElement in xmlNodeList)
                    {
                        if (value != "restore" && value != "none")
                        {
                            xmlElement.SetAttribute("emboss", value);
                        }
                    }
                }
                if (operation == "invert")
                {
                    foreach (XmlElement xmlElement in xmlNodeList)
                    {
                        if (value != "restore" && value != "none")
                        {
                            xmlElement.SetAttribute("invert", value);
                        }
                    }
                }
                if (operation == "granite")
                {
                    foreach (XmlElement xmlElement in xmlNodeList)
                    {
                        if (value != "restore" && value != "none")
                        {
                            xmlElement.SetAttribute("granite", value);
                        }
                    }
                }
                if (operation == "cartoon")
                {
                    foreach (XmlElement xmlElement in xmlNodeList)
                    {
                        if (value != "restore" && value != "none")
                        {
                            xmlElement.SetAttribute("cartoon", value);
                        }
                    }
                }
                if (operation == "hue")
                {
                    foreach (XmlElement xmlElement in xmlNodeList)
                    {
                        bool arg_1766_0;
                        if (value != "restore")
                        {
                            if (false)
                            {
                                continue;
                            }
                            arg_1766_0 = !(value != "none");
                        }
                        else
                        {
                            arg_1766_0 = true;
                        }
                        if (!arg_1766_0)
                        {
                            xmlElement.SetAttribute("hue", value);
                        }
                    }
                }
                if (operation == "sharpen")
                {
                    foreach (XmlElement xmlElement in xmlNodeList)
                    {
                        if (value != "restore" && value != "none")
                        {
                            xmlElement.SetAttribute("sharpen", value);
                        }
                    }
                }
            }
            this.ImageEffect = xmlDocument.InnerXml.ToString();
        }

        private void SearchImages()
        {
            bool arg_157_0;
            bool expr_20 = arg_157_0 = !(this.txtImageId.Text.Trim() == "");
            if (!true)
            {
                goto IL_156;
            }
            if (!expr_20)
            {
                if (!false)
                {
                    this.txtImageId.Text = "0";
                    RobotImageLoader.IsZeroSearchNeeded = true;
                    RobotImageLoader.currentCount = 0;
                }
            }
            if (string.IsNullOrEmpty(this.txtImageId.Text.Trim()))
            {
                return;
            }
            RobotImageLoader.RFID = this.txtImageId.Text;
            RobotImageLoader.SearchCriteria = "PhotoId";
            bool flag = !(this.txtImageId.Text != "0");
            if (false)
            {
                goto IL_19D;
            }
            if (flag)
            {
                goto IL_1FC;
            }
            PhotoBusiness photoBusiness = new PhotoBusiness();
            int arg_CA_0 = LoginUser.PageCountGrid;
        IL_CA:
            int noOfImg = arg_CA_0;
            List<PhotoInfo> source = (from t in photoBusiness.GetAllPhotosforSearch(LoginUser.DefaultSubstores, Convert.ToInt64(this.txtImageId.Text.Trim()), noOfImg, LoginUser.IsPhotographerSerailSearchActive, RobotImageLoader.StartIndexRFID, RobotImageLoader._rfidSearch, this.NewReord, out this.MaxPhotoIdCriteria, out this.MinPhotoIdCriteria, RobotImageLoader.MediaTypes)
                                      orderby t.DG_Photos_pkey descending
                                      select t).ToList<PhotoInfo>();
            List<PhotoInfo> list = new List<PhotoInfo>();
            if (LoginUser.IsPhotographerSerailSearchActive)
            {
                goto IL_19D;
            }
            arg_157_0 = (RobotImageLoader._rfidSearch == 0);
        IL_156:
            flag = !arg_157_0;
            if (!flag)
            {
                if (false)
                {
                    goto IL_1FC;
                }
                list = (from T in source
                        where T.DG_Photos_RFID == RobotImageLoader.RFID
                        select T).ToList<PhotoInfo>();
            }
            else
            {
                list = source.ToList<PhotoInfo>();
            }
            goto IL_1A5;
        IL_19D:
            list = source.ToList<PhotoInfo>();
        IL_1A5:
            int expr_1A6 = arg_CA_0 = list.Count;
            if (false)
            {
                goto IL_CA;
            }
            flag = (expr_1A6 != 0);
            if (!flag)
            {
                MessageBox.Show("Wrong ImageId!");
                this.txtImageId.Text = "0";
                RobotImageLoader.RFID = this.txtImageId.Text;
            }
            RobotImageLoader.PhotoId = this.txtImageId.Text;
        IL_1FC:
            SearchResult searchResult = null;
            //  using (IEnumerator enumerator = Application.Current.Windows.GetEnumerator())
            IEnumerator enumerator = Application.Current.Windows.GetEnumerator();
            try
            {
                if (!false)
                {
                    goto IL_251;
                }
                goto IL_23E;
            IL_224:
                Window window;
                if (2 != 0)
                {
                    flag = !(window.Title == "View/Order Station");
                }
            IL_23E:
                if (false)
                {
                    goto IL_224;
                }
                if (!flag)
                {
                    searchResult = (SearchResult)window;
                }
            IL_251:
                flag = enumerator.MoveNext();
                if (flag)
                {
                    window = (Window)enumerator.Current;
                    goto IL_224;
                }
            }
            catch
            {
            }
            finally
            {
            }
            if (searchResult == null)
            {
                searchResult = new SearchResult();
            }
            searchResult.pagename = "";
            searchResult.Show();
            searchResult.LoadWindow();
            this.txtImageId.Clear();
            base.Hide();
        }

        private void SelectObject(object sender, MouseButtonEventArgs e)
        {
            try
            {
                if (e.LeftButton == MouseButtonState.Released)
                {
                    this.RemoveAllBorders();
                    if (sender is Button)
                    {
                        this.elementForContextMenu = (Button)sender;
                        this.IsSelectedMainImage = false;
                        RotateTransform rotateTransform = this.elementForContextMenu.GetValue(FrameworkElement.LayoutTransformProperty) as RotateTransform;
                        if (rotateTransform != null)
                        {
                            this.jrotate.Angle = rotateTransform.Angle;
                        }
                    }
                    else
                    {
                        RotateTransform rotateTransform;
                        bool arg_2FA_0;
                        object obj;
                        int num3;
                        if (sender is TextBox)
                        {
                            TextBox textBox = (TextBox)sender;
                            double num = Convert.ToDouble(textBox.GetValue(Canvas.TopProperty));
                            double num2 = Convert.ToDouble(textBox.GetValue(Canvas.LeftProperty));
                            textBox.BorderBrush = System.Windows.Media.Brushes.OrangeRed;
                            this.elementForContextMenu = textBox;
                            this.txtContent.Text = textBox.Text;
                            this.txtContent.Focus();
                            textBox.Focus();
                            this.IsSelectedMainImage = false;
                            textBox.Style = (Style)base.FindResource("SearchIDTB");
                            rotateTransform = (textBox.GetValue(UIElement.RenderTransformProperty) as RotateTransform);
                            bool expr_13F = arg_2FA_0 = (rotateTransform == null);
                            if (!false)
                            {
                                if (!expr_13F)
                                {
                                    this.jrotate.Angle = rotateTransform.Angle;
                                }
                                else
                                {
                                    this.jrotate.Angle = 0.0;
                                }
                                this.cmbFont.SelectedItem = textBox.FontFamily;
                                this.CmbFontSize.Text = textBox.FontSize.ToString();
                                this.CmbColor.Text = ((SolidColorBrush)textBox.Foreground).ToString();
                                goto IL_344;
                            }
                        }
                        else
                        {
                            if (sender is System.Windows.Controls.Image)
                            {
                                obj = (System.Windows.Controls.Image)sender;
                                this.IsSelectedMainImage = false;
                                num3 = 0;
                                goto IL_335;
                            }
                            goto IL_344;
                        }
                    IL_2FA:
                        if (!arg_2FA_0)
                        {
                            this.jrotate.Angle = rotateTransform.Angle;
                        }
                        else
                        {
                            this.jrotate.Angle = 0.0;
                        }
                    IL_32E:
                        num3++;
                    IL_335:
                        if (num3 < 3)
                        {
                            obj = VisualTreeHelper.GetParent(obj as DependencyObject);
                            bool arg_210_0 = obj is Button;
                            int arg_210_1 = 0;
                            while ((arg_210_0 ? 1 : 0) != arg_210_1)
                            {
                                this.elementForContextMenu = (UIElement)obj;
                                TransformGroup transformGroup = this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup;
                                rotateTransform = new RotateTransform();
                                if (transformGroup != null)
                                {
                                    if (transformGroup.Children.Count > 0)
                                    {
                                        if (transformGroup.Children[0] is RotateTransform)
                                        {
                                            rotateTransform = (RotateTransform)transformGroup.Children[0];
                                        }
                                    }
                                    int expr_2AF = (arg_210_0 = (transformGroup.Children.Count > 1)) ? 1 : 0;
                                    int expr_2B2 = arg_210_1 = 0;
                                    if (expr_2B2 != 0)
                                    {
                                        continue;
                                    }
                                    if (expr_2AF != expr_2B2)
                                    {
                                        if (transformGroup.Children[1] is RotateTransform)
                                        {
                                            rotateTransform = (RotateTransform)transformGroup.Children[1];
                                        }
                                    }
                                }
                                arg_2FA_0 = (rotateTransform == null);
                                goto IL_2FA;
                            }
                            goto IL_32E;
                        }
                    }
                IL_344:;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void SendToBack_Click(object sender, RoutedEventArgs e)
        {
            this.templatePopup();
            this.btnSendToBackAct.Visibility = Visibility.Visible;
            PopupButton.IsChecked = false;
            UIElement expr_06 = this.CmbProductType;
            Visibility expr_0B = Visibility.Collapsed;
            if (!false)
            {
                expr_06.Visibility = expr_0B;
            }
            int arg_139_0;
            if (this.elementForContextMenu == null)
            {
                arg_139_0 = 1;
                goto IL_39;
            }
        IL_21:
            int arg_34_0 = (this.elementForContextMenu is Button) ? 1 : 0;
            int arg_34_1 = 0;
        IL_34:
            arg_139_0 = ((arg_34_0 == arg_34_1) ? 1 : 0);
        IL_36:
        IL_39:
            int arg_B8_0;
            if (arg_139_0 != 0)
            {
                arg_139_0 = ((this.elementForContextMenu == null) ? (arg_B8_0 = 1) : (arg_B8_0 = ((!(this.elementForContextMenu is TextBox)) ? 1 : 0)));
                goto IL_B1;
            }
            if (6 == 0)
            {
                goto IL_21;
            }
            int zIndex = Panel.GetZIndex(this.elementForContextMenu);
            int expr_5E = arg_34_0 = zIndex;
            int expr_60 = arg_34_1 = 7;
            if (expr_60 == 0)
            {
                goto IL_34;
            }
            bool arg_66_0 = expr_5E == expr_60;
        IL_65:
            bool flag = !arg_66_0;
            bool expr_69 = (arg_B8_0 = (arg_139_0 = (flag ? 1 : 0))) != 0;
            if (!false)
            {
                if (!expr_69)
                {
                    Panel.SetZIndex(this.elementForContextMenu, 5);
                }
                else
                {
                    Panel.SetZIndex(this.elementForContextMenu, 1);
                }
                return;
            }
        IL_B1:
            if (6 == 0)
            {
                goto IL_36;
            }
            flag = (arg_B8_0 != 0);
            while (true)
            {
                bool expr_B9 = arg_66_0 = flag;
                if (false)
                {
                    goto IL_65;
                }
                if (!expr_B9)
                {
                    break;
                }
                flag = !this.IsSelectedMainImage;
                if (flag)
                {
                    return;
                }
                if (2 != 0)
                {
                    goto Block_12;
                }
            }
            zIndex = Panel.GetZIndex(this.elementForContextMenu);
            if (zIndex == 7)
            {
                Panel.SetZIndex(this.elementForContextMenu, 5);
                goto IL_F7;
            }
        IL_E8:
            Panel.SetZIndex(this.elementForContextMenu, 1);
        IL_F7:
            return;
        Block_12:
            Panel.SetZIndex(this.frm, 6);
            if (2 == 0)
            {
                goto IL_E8;
            }
        }

        private void Sepia()
        {
            try
            {
                bool expr_14 = !(this._sepia == "0");
                bool flag;
                if (!false)
                {
                    flag = expr_14;
                }
                if (!flag)
                {
                    this._sepia = "1";
                    this._colorfiltereff.FilterColor = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FFE6B34D");
                    this.GrdSepia.Effect = this._colorfiltereff;
                }
                else
                {
                    this._sepia = "0";
                    this.GrdSepia.Effect = null;
                }
            }
            catch (Exception serviceException)
            {
                while (false)
                {
                }
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                LogEffect objeffectOperation;
                do
                {
                    objeffectOperation = default(LogEffect);
                }
                while (false);
                objeffectOperation.effvalue = Convert.ToDouble(this._sepia);
                objeffectOperation.optname = "sepia";
                this.EffectLogOperation(objeffectOperation);
            }
        }

        private void SetClipColorGrey()
        {
            try
            {
                if (4 != 0)
                {
                    if (this._clp != null)
                    {
                        System.Windows.Media.Color black = System.Windows.Media.Colors.Black;
                        black.A = 110;
                        this._clp.Fill = new SolidColorBrush(black);
                    }
                }
            }
            catch (Exception serviceException)
            {
                if (false)
                {
                    goto IL_77;
                }
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
            IL_69:
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            IL_6F:
                if (!false && false)
                {
                    goto IL_69;
                }
            IL_77:
                if (6 == 0)
                {
                    goto IL_6F;
                }
            }
        }

        public void SetEffect()
        {
            this.GrdBrightness.Effect = this._brighteff;
        }

        private void SetFocus()
        {
            while (true)
            {
                if (!false)
                {
                }
                if (this.lstStrip.SelectedItem == null)
                {
                    goto IL_64;
                }
                if (false)
                {
                    return;
                }
                int arg_42_0;
                int arg_60_0 = arg_42_0 = this.lstStrip.SelectedIndex;
                int arg_60_1;
                int arg_42_1;
                int expr_2F = arg_42_1 = (arg_60_1 = this.lastVisibleIndex);
                if (3 != 0)
                {
                    arg_42_1 = expr_2F - this.NoOfDisplayItem;
                    goto IL_42;
                }
            IL_5D:
                bool arg_66_0;
                if (6 != 0)
                {
                    arg_66_0 = (arg_60_0 > arg_60_1);
                    goto IL_65;
                }
            IL_42:
                if (arg_42_0 >= arg_42_1)
                {
                    arg_60_0 = (arg_42_0 = this.lstStrip.SelectedIndex);
                    arg_60_1 = (arg_42_1 = this.lastVisibleIndex);
                    goto IL_5D;
                }
                goto IL_64;
            IL_65:
                if (arg_66_0)
                {
                    return;
                }
                if (!false)
                {
                    break;
                }
                continue;
            IL_64:
                arg_66_0 = true;
                goto IL_65;
            }
            ListBoxItem listBoxItem = (ListBoxItem)this.lstStrip.ItemContainerGenerator.ContainerFromItem(this.lstStrip.SelectedItem);
            listBoxItem.Focus();
        }

        private void SetGumballPosition(string position, string margin, StackPanel txtbox)
        {
            double arg_727_0 = this.mainImage.Source.Height / this.mainImage.Source.Width;
            Thickness margin2;
            if (!(position == "Top-Left"))
            {
                double length;
                if (!(position == "Top-Center"))
                {
                    if (!(position == "Top-Right"))
                    {
                        if (position == "Bottom-Left")
                        {
                            txtbox.HorizontalAlignment = HorizontalAlignment.Left;
                            goto IL_30B;
                        }
                        if (position == "Bottom-Center")
                        {
                            txtbox.HorizontalAlignment = HorizontalAlignment.Center;
                            txtbox.VerticalAlignment = VerticalAlignment.Bottom;
                            margin2 = new Thickness(Convert.ToDouble(margin.Split(new char[]
                    {
                        ','
                    })[0]), Convert.ToDouble(margin.Split(new char[]
                    {
                        ','
                    })[1]), Convert.ToDouble(margin.Split(new char[]
                    {
                        ','
                    })[2]), Convert.ToDouble(margin.Split(new char[]
                    {
                        ','
                    })[3]));
                            txtbox.Margin = margin2;
                            txtbox.UpdateLayout();
                            length = (this.forWdht.Width - txtbox.ActualWidth) / 2.0;
                            Canvas.SetLeft(txtbox, length);
                            Canvas.SetTop(txtbox, this.forWdht.Height - this.actualHgt - margin2.Bottom - 10.0);
                            txtbox.VerticalAlignment = VerticalAlignment.Bottom;
                            txtbox.HorizontalAlignment = HorizontalAlignment.Center;
                            return;
                        }
                        if (!(position == "Bottom-Right"))
                        {
                            txtbox.HorizontalAlignment = HorizontalAlignment.Right;
                            txtbox.VerticalAlignment = VerticalAlignment.Bottom;
                            margin2 = new Thickness(Convert.ToDouble(margin.Split(new char[]
                    {
                        ','
                    })[0]), Convert.ToDouble(margin.Split(new char[]
                    {
                        ','
                    })[1]), Convert.ToDouble(margin.Split(new char[]
                    {
                        ','
                    })[2]), Convert.ToDouble(margin.Split(new char[]
                    {
                        ','
                    })[3]));
                            txtbox.Margin = margin2;
                            txtbox.UpdateLayout();
                            goto IL_6B8;
                        }
                        txtbox.HorizontalAlignment = HorizontalAlignment.Right;
                        txtbox.VerticalAlignment = VerticalAlignment.Bottom;
                        margin2 = new Thickness(Convert.ToDouble(margin.Split(new char[]
                {
                    ','
                })[0]), Convert.ToDouble(margin.Split(new char[]
                {
                    ','
                })[1]), Convert.ToDouble(margin.Split(new char[]
                {
                    ','
                })[2]), Convert.ToDouble(margin.Split(new char[]
                {
                    ','
                })[3]));
                        txtbox.Margin = margin2;
                        Canvas.SetLeft(txtbox, this.forWdht.Width - this.actualWdth - margin2.Right - 10.0);
                        Canvas.SetTop(txtbox, this.forWdht.Height - this.actualHgt - margin2.Bottom - 10.0);
                        if (2 != 0)
                        {
                            return;
                        }
                        goto IL_50;
                    }
                IL_204:
                    txtbox.HorizontalAlignment = HorizontalAlignment.Right;
                    txtbox.VerticalAlignment = VerticalAlignment.Top;
                    margin2 = new Thickness(Convert.ToDouble(margin.Split(new char[]
            {
                ','
            })[0]), Convert.ToDouble(margin.Split(new char[]
            {
                ','
            })[1]), Convert.ToDouble(margin.Split(new char[]
            {
                ','
            })[2]), Convert.ToDouble(margin.Split(new char[]
            {
                ','
            })[3]));
                    txtbox.Margin = margin2;
                    Canvas.SetTop(txtbox, 10.0);
                    if (!false)
                    {
                        Canvas.SetLeft(txtbox, this.forWdht.Width - this.actualWdth - margin2.Right - 20.0);
                        txtbox.VerticalAlignment = VerticalAlignment.Top;
                        txtbox.HorizontalAlignment = HorizontalAlignment.Right;
                        return;
                    }
                IL_30B:
                    txtbox.VerticalAlignment = VerticalAlignment.Bottom;
                    margin2 = new Thickness(Convert.ToDouble(margin.Split(new char[]
            {
                ','
            })[0]), Convert.ToDouble(margin.Split(new char[]
            {
                ','
            })[1]), Convert.ToDouble(margin.Split(new char[]
            {
                ','
            })[2]), Convert.ToDouble(margin.Split(new char[]
            {
                ','
            })[3]));
                    if (false)
                    {
                        goto IL_51;
                    }
                    txtbox.Margin = margin2;
                    Canvas.SetLeft(txtbox, 10.0);
                    Canvas.SetTop(txtbox, this.forWdht.Height - this.actualHgt - margin2.Bottom - 10.0);
                    txtbox.VerticalAlignment = VerticalAlignment.Bottom;
                    if (8 != 0)
                    {
                        txtbox.HorizontalAlignment = HorizontalAlignment.Left;
                        if (4 != 0)
                        {
                            return;
                        }
                        goto IL_204;
                    }
                IL_6B8:
                    if (!false)
                    {
                        Canvas.SetLeft(txtbox, this.forWdht.Width - this.actualWdth);
                        Canvas.SetTop(txtbox, this.forWdht.Height - this.actualHgt);
                        return;
                    }
                }
                txtbox.HorizontalAlignment = HorizontalAlignment.Center;
                txtbox.VerticalAlignment = VerticalAlignment.Top;
                margin2 = new Thickness(Convert.ToDouble(margin.Split(new char[]
        {
            ','
        })[0]), Convert.ToDouble(margin.Split(new char[]
        {
            ','
        })[1]), Convert.ToDouble(margin.Split(new char[]
        {
            ','
        })[2]), Convert.ToDouble(margin.Split(new char[]
        {
            ','
        })[3]));
                txtbox.Margin = margin2;
                txtbox.UpdateLayout();
                length = (this.forWdht.Width - txtbox.ActualWidth) / 2.0;
                Canvas.SetLeft(txtbox, length);
                Canvas.SetTop(txtbox, 10.0);
                return;
            }
            txtbox.HorizontalAlignment = HorizontalAlignment.Left;
        IL_50:
        IL_51:
            txtbox.VerticalAlignment = VerticalAlignment.Top;
            margin2 = new Thickness(Convert.ToDouble(margin.Split(new char[]
    {
        ','
    })[0]), Convert.ToDouble(margin.Split(new char[]
    {
        ','
    })[1]), Convert.ToDouble(margin.Split(new char[]
    {
        ','
    })[2]), Convert.ToDouble(margin.Split(new char[]
    {
        ','
    })[3]));
            txtbox.Margin = margin2;
            Canvas.SetLeft(txtbox, 10.0);
            Canvas.SetTop(txtbox, 10.0);
        }

        private void SetLastVisibleIndex()
        {
            List<ListBoxItem> list = MainWindow.FindVisualChildren<ListBoxItem>(this.lstStrip).ToList<ListBoxItem>();
            ScrollViewer scrollViewer = MainWindow.FindVisualChildren<ScrollViewer>(this.lstStrip).FirstOrDefault<ScrollViewer>();
            bool flag;
            if (!false)
            {
                this.lastVisibleIndex = 0;
                int num = 0;
                while (true)
                {
                    int arg_125_0;
                    int arg_11C_0;
                    int arg_119_0;
                    int arg_E4_0;
                    int expr_E6 = arg_E4_0 = (arg_119_0 = (arg_11C_0 = (arg_125_0 = num)));
                    if (4 == 0)
                    {
                        goto IL_122;
                    }
                    int arg_11C_1;
                    int arg_E4_1;
                    int expr_EB = arg_E4_1 = (arg_11C_1 = list.Count);
                    if (false)
                    {
                        goto IL_11C;
                    }
                    if (3 != 0)
                    {
                        flag = (expr_E6 < expr_EB);
                        if (!flag)
                        {
                            arg_119_0 = this.lastVisibleIndex;
                            goto IL_107;
                        }
                        GeneralTransform generalTransform = list[num].TransformToAncestor(scrollViewer);
                        Rect rect = generalTransform.TransformBounds(new Rect(new System.Windows.Point(0.0, 0.0), list[num].RenderSize));
                        Rect rect2 = Rect.Intersect(new Rect(new System.Windows.Point(0.0, 0.0), scrollViewer.RenderSize), rect);
                        flag = !(rect2 != Rect.Empty);
                        goto IL_C6;
                    }
                IL_E4:
                    num = arg_E4_0 + arg_E4_1;
                    continue;
                IL_C6:
                    if (!flag)
                    {
                        this.lastVisibleIndex = num;
                        list[num].OpacityMask = null;
                    }
                    arg_E4_0 = num;
                    arg_E4_1 = 1;
                    goto IL_E4;
                IL_122:
                    if (!true)
                    {
                        goto IL_107;
                    }
                    if (arg_125_0 != 0)
                    {
                        goto IL_141;
                    }
                    if (false)
                    {
                        goto IL_16A;
                    }
                    this.btnNextsimg.Visibility = Visibility.Visible;
                    if (!false)
                    {
                        break;
                    }
                    goto IL_C6;
                IL_11C:
                    flag = (arg_11C_0 == arg_11C_1);
                    arg_125_0 = (arg_119_0 = (flag ? 1 : 0));
                    goto IL_122;
                IL_107:
                    arg_11C_0 = ((arg_119_0 == this.lstStrip.Items.Count - 1) ? 1 : 0);
                    arg_11C_1 = 0;
                    goto IL_11C;
                }
                goto IL_14E;
            }
        IL_141:
            this.btnNextsimg.Visibility = Visibility.Collapsed;
        IL_14E:
            flag = (this.lastVisibleIndex > 4);
            if (!flag)
            {
                this.btnPreviousimg.Visibility = Visibility.Visible;
            }
            else
            {
                this.btnPreviousimg.Visibility = Visibility.Collapsed;
            }
        IL_16A:
            this.SetFocus();
        }

        private void SetPoints()
        {
            // This item is obfuscated and can not be translated.
        }

        private void ShowGraphics()
        {
            IEnumerator enumerator;
            IDisposable disposable;
            if (-1 != 0)
            {
                enumerator = this.dragCanvas.Children.GetEnumerator();
                // goto IL_21;
                try
                {
                    while (true)
                    {
                    IL_21:
                        while (enumerator.MoveNext())
                        {
                            UIElement uIElement = (UIElement)enumerator.Current;
                            if (uIElement is Grid)
                            {
                                if (2 != 0)
                                {
                                }
                            }
                            else
                            {
                                bool flag = !(uIElement is Ellipse);
                                bool arg_68_0 = flag;
                                while (arg_68_0)
                                {
                                    if (uIElement is System.Windows.Shapes.Rectangle)
                                    {
                                        break;
                                    }
                                    if (false)
                                    {
                                        break;
                                    }
                                    bool expr_8C = arg_68_0 = (uIElement is System.IO.Path);
                                    if (4 != 0)
                                    {
                                        if (expr_8C)
                                        {
                                            if (7 != 0)
                                            {
                                            }
                                        }
                                        else
                                        {
                                            uIElement.Visibility = Visibility.Visible;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        break;
                    }
                }
                finally
                {
                    disposable = (enumerator as IDisposable);
                    bool arg_EB_0;
                    bool expr_E4 = arg_EB_0 = (disposable == null);
                    if (3 != 0)
                    {
                        bool flag = expr_E4;
                        arg_EB_0 = flag;
                    }
                    if (!arg_EB_0)
                    {
                        disposable.Dispose();
                    }
                }
            }
            enumerator = this.spGumball.Children.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    UIElement uIElement = (UIElement)enumerator.Current;
                    if (uIElement is TextBox)
                    {
                        uIElement.Visibility = Visibility.Visible;
                    }
                }
            }
            finally
            {
                if (6 != 0)
                {
                    disposable = (enumerator as IDisposable);
                }
                if (disposable != null)
                {
                    disposable.Dispose();
                }
            }
        }

        private void ShowhidePlayerScore(Visibility vsb)
        {
            while (true)
            {
            IL_00:
                int arg_48_0;
                int arg_41_0;
                int expr_02 = arg_41_0 = (arg_48_0 = 1);
                int num = 0;
                if (expr_02 != 0)
                {
                    num = expr_02;
                    goto IL_43;
                }
            IL_44:
                int arg_41_1;
                int expr_45 = arg_41_1 = 6;
                if (expr_45 != 0)
                {
                    if (arg_48_0 >= expr_45)
                    {
                        break;
                    }
                    StackPanel stackPanel = MainWindow.FindChild<StackPanel>(this.dragCanvas, "Player" + num.ToString());
                    while (true)
                    {
                    IL_20:
                        bool flag = stackPanel == null;
                        while (8 != 0)
                        {
                            if (flag)
                            {
                                goto IL_3E;
                            }
                            if (false)
                            {
                                goto IL_20;
                            }
                            stackPanel.Visibility = vsb;
                            if (8 != 0)
                            {
                                goto IL_3E;
                            }
                        }
                        goto IL_00;
                    }
                IL_3E:
                    arg_41_0 = num;
                    arg_41_1 = 1;
                }
                num = arg_41_0 + arg_41_1;
            IL_43:
                arg_48_0 = (arg_41_0 = num);
                goto IL_44;
            }
        }

        public void ShowStripImages()
        {
            int arg_15_0;
            int expr_52 = arg_15_0 = string.Compare(RobotImageLoader.SearchCriteria, "Group", true);
            int arg_15_1;
            int expr_0F = arg_15_1 = 0;
            if (expr_0F == 0)
            {
                arg_15_0 = ((expr_52 == expr_0F) ? 1 : 0);
                arg_15_1 = 0;
            }
            bool arg_1E_0;
            bool expr_15 = arg_1E_0 = (arg_15_0 == arg_15_1);
            if (false)
            {
                goto IL_1E;
            }
            bool flag = expr_15;
        IL_1C:
            arg_1E_0 = flag;
        IL_1E:
            if (!arg_1E_0)
            {
                if (false)
                {
                    goto IL_1C;
                }
                RobotImageLoader.robotImages = RobotImageLoader.GroupImages;
            }
            this.BindStrip();
            if (!false)
            {
                this.btnThumbnails_Click(new object(), new RoutedEventArgs());
            }
            if (6 != 0)
            {
                this.IsLoad = true;
                this.IsMoreImages = true;
            }
        }
        

        private void TabItem_GotFocus(object sender, RoutedEventArgs e)
        {

            this.rdbRevert.IsChecked = new bool?(false);
            this.rdbErase.IsChecked = new bool?(false);
            this.rdbBlockErase.IsChecked = new bool?(false);
            this.rdbInverseErase.IsChecked = new bool?(false);
            this.IsBlockEraseActive = false;
            this.IsInverseEraseActive = false;
            this.rdbForgroundGreen.IsChecked = new bool?(true);
            this.removebackGround();
            this.squre.Visibility = Visibility.Hidden;
            this.GrdGreenScreenDefault.IsHitTestVisible = true;
            this.mainImage.Cursor = Cursors.Arrow;
            if (this.GreenScreenEraserByFillingColor1.Visibility == Visibility.Visible)
            {
                this.undoEraser = false;
                this.IsGreenCorrection = false;
            }
            if (this.imageundoGrid.Background != null)
            {
                this.imageundoGrid.Background.Opacity = 1.0;
            }
            this.MyInkCanvas.Visibility = Visibility.Visible;
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;

        }

        private void TabItem_LostFocus(object sender, RoutedEventArgs e)
        {
            while (true)
            {
                this.removebackGround();
                bool arg_51_0;
                bool arg_25_0;
                bool expr_10 = arg_25_0 = (arg_51_0 = (this.GreenScreenEraserByFillingColor1.Visibility == Visibility.Visible));
                if (false)
                {
                    goto IL_1B;
                }
                if (!false)
                {
                    arg_51_0 = (arg_25_0 = !expr_10);
                    goto IL_1B;
                }
            IL_22:
                if (!false)
                {
                    if (arg_25_0)
                    {
                        return;
                    }
                    if (7 != 0)
                    {
                        break;
                    }
                    continue;
                }
            IL_1B:
                if (!false)
                {
                    bool flag = arg_51_0;
                    arg_51_0 = (arg_25_0 = flag);
                    goto IL_22;
                }
                goto IL_22;
            }
            this.undoEraser = false;
            this.IsGreenCorrection = false;
        }

        private void TxtAmount_GotKeyboardFocus(object sender, RoutedEventArgs e)
        {
        }

        private void txtAmountEntered_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            e.Handled = !MainWindow.IsTextAllowed(e.Text);
        }

        private void txtContent_GotFocus(object sender, RoutedEventArgs e)
        {
            if (this.elementForContextMenu is TextBox)
            {
                TextBox textBox = (TextBox)this.elementForContextMenu;
                textBox.BorderBrush = System.Windows.Media.Brushes.OrangeRed;
            }
        }

        private void txtContent_LostFocus(object sender, RoutedEventArgs e)
        {            
            if (this.elementForContextMenu is TextBox)
            {
                TextBox textBox = (TextBox)this.elementForContextMenu;
                textBox.BorderBrush = System.Windows.Media.Brushes.Transparent;
            }
        }

        private void txtContent_TextChanged(object sender, TextChangedEventArgs e)
        {
            do
            {
                this.elementForContextMenu = sender as TextBox;
                bool flag = this.elementForContextMenu == null;
                if (5 != 0)
                {
                    bool arg_2E_0;
                    bool expr_73 = arg_2E_0 = flag;
                    if (-1 != 0)
                    {
                        if (expr_73)
                        {
                            goto IL_60;
                        }
                        arg_2E_0 = (this.elementForContextMenu is TextBox);
                    }
                    flag = !arg_2E_0;
                    while (true)
                    {
                        if (flag)
                        {
                            goto IL_5C;
                        }
                    IL_36:
                        TextBox textBox = (TextBox)this.elementForContextMenu;
                        if (-1 == 0)
                        {
                            continue;
                        }
                        textBox.Text = this.txtContent.Text;
                    IL_5C:
                        if (5 != 0)
                        {
                            break;
                        }
                        goto IL_36;
                    }
                }
            IL_60:;
            }
            while (false);
        }

        private void txtTest_TextChanged(object sender, TextChangedEventArgs e)
        {
            bool arg_3A_0;
            bool expr_09 = arg_3A_0 = (sender is TextBox);
            if (!false)
            {
                arg_3A_0 = !expr_09;
            }
            if (!arg_3A_0)
            {
                if (!false)
                {
                    TextBox textBox = (TextBox)sender;
                    if (3 != 0)
                    {
                        this.txtContent.Text = textBox.Text;
                    }
                }
            }
        }

        private void UncheckAllColorFilter()
        {
            if (true)
            {
                VisualStateManager.GoToState(this.btnRed, "Unchecked", true);
                goto IL_19;
            }
            do
            {
            IL_5C:
                VisualStateManager.GoToState(this.btnMagenta, "Unchecked", true);
                if (false)
                {
                    goto IL_2F;
                }
                if (false)
                {
                    goto IL_19;
                }
                VisualStateManager.GoToState(this.btnBlue, "Unchecked", true);
                VisualStateManager.GoToState(this.btnSkblue, "Unchecked", true);
                VisualStateManager.GoToState(this.btnGreen, "Unchecked", true);
                VisualStateManager.GoToState(this.btnOrange, "Unchecked", true);
                if (4 == 0)
                {
                    goto IL_2F;
                }
            }
            while (8 == 0);
            if (4 != 0)
            {
                return;
            }
        IL_19:
            VisualStateManager.GoToState(this.btnYellow, "Unchecked", true);
        IL_2F:
            VisualStateManager.GoToState(this.btnLightRed, "Unchecked", true);
            VisualStateManager.GoToState(this.btnLime, "Unchecked", true);
            //goto IL_5C;
        }

        private void UncheckEffectsButton()
        {
            while (true)
            {
                if (4 == 0)
                {
                    goto IL_AE;
                }
                VisualStateManager.GoToState(this.btnColorEffectsfilters, "Unchecked", true);
                VisualStateManager.GoToState(this.btnEmboss, "Unchecked", true);
                VisualStateManager.GoToState(this.btnEdgeDetect, "Unchecked", true);
                VisualStateManager.GoToState(this.btnGreyScale, "Unchecked", true);
            IL_5F:
                VisualStateManager.GoToState(this.btnHue, "Unchecked", true);
                if (6 == 0)
                {
                    continue;
                }
                VisualStateManager.GoToState(this.btnInvert, "Unchecked", true);
                VisualStateManager.GoToState(this.Cartoonize, "Unchecked", true);
                VisualStateManager.GoToState(this.btnSharpen, "Unchecked", true);
            IL_AE:
                VisualStateManager.GoToState(this.btnSepia, "Unchecked", true);
                VisualStateManager.GoToState(this.btnDefogger, "Unchecked", true);
                VisualStateManager.GoToState(this.btnUnderWater, "Unchecked", true);
                if (!false)
                {
                    VisualStateManager.GoToState(this.btnDigiMagic, "Unchecked", true);
                    if (8 != 0)
                    {
                        break;
                    }
                    goto IL_5F;
                }
            }
            this.checkDigimagic = false;
        }

        private void UncheckGraphicsButton()
        {
            try
            {
                VisualStateManager.GoToState(this.btnAddgraphics, "Unchecked", true);
                VisualStateManager.GoToState(this.btnBorder, "Unchecked", true);
                VisualStateManager.GoToState(this.btnGraphicsText, "Unchecked", true);
                VisualStateManager.GoToState(this.btngraphics, "Unchecked", true);
                VisualStateManager.GoToState(this.btnBackground, "Unchecked", true);
                VisualStateManager.GoToState(this.btnflip, "Unchecked", true);
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void UnderWater()
        {
            try
            {
                if (!(this._underwater == "0"))
                {
                    goto IL_FD;
                }
                this._underwater = "1";
                MultiChannelContrastEffect expr_3D = this._under;
                System.Windows.Media.Color expr_4C = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#FF4F9CEF");
                if (3 != 0)
                {
                    expr_3D.FogColor = expr_4C;
                }
                this._under.Defog = 0.28;
                if (!false)
                {
                    this._under.Contrastr = 0.56;
                    if (!false)
                    {
                    }
                    if (false)
                    {
                        goto IL_FD;
                    }
                    this._under.Contrastg = 0.87;
                    this._under.Contrastb = 0.89;
                    this._under.Exposure = 0.7;
                }
                this._under.Gamma = 1.62;
                do
                {
                IL_E4:
                    this.GrdUnderWater.Effect = this._under;
                }
                while (false);
                goto IL_11A;
            IL_FD:
                this._underwater = "0";
                this.GrdUnderWater.Effect = null;
                if (false)
                {
                    // goto IL_E4;
                }
            IL_11A:;
            }
            catch (Exception)
            {
                if (!false)
                {
                }
            }
            finally
            {
                this.EffectLogOperation(new LogEffect
                {
                    effvalue = Convert.ToDouble(this._underwater),
                    optname = "underwater"
                });
            }
        }

        private void Undo()
        {
            try
            {
                int arg_12_0 = this.SerialLog.Count;
                while (true)
                {
                    if (arg_12_0 <= 0)
                    {
                        goto IL_CA;
                    }
                    LogObject logObject;
                    string text;
                    if (true)
                    {
                        if (7 == 0)
                        {
                            goto IL_B8;
                        }
                        logObject = (LogObject)this.SerialLog.Pop();
                        string expr_4B = logObject.opName;
                        if (!false)
                        {
                            text = expr_4B;
                        }
                        if (text != null)
                        {
                            goto IL_61;
                        }
                        goto IL_C9;
                    }
                IL_80:
                    bool expr_87 = (arg_12_0 = ((text == "antirotate") ? 1 : 0)) != 0;
                    if (7 == 0)
                    {
                        continue;
                    }
                    if (!expr_87)
                    {
                        goto IL_C9;
                    }
                    goto IL_B8;
                IL_61:
                    if (!(text == "flip"))
                    {
                        if (!false)
                        {
                            if (!(text == "rotate"))
                            {
                                goto IL_80;
                            }
                            this.Rotate((int)logObject.value);
                        }
                    }
                    else
                    {
                        this.Flip((int)logObject.value);
                    }
                IL_CB:
                    if (true)
                    {
                        break;
                    }
                    goto IL_61;
                IL_CA:
                    goto IL_CB;
                IL_C9:
                    goto IL_CA;
                IL_B8:
                    this.Rotate((int)logObject.value);
                    goto IL_C9;
                }
            }
            catch (Exception serviceException)
            {
                do
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                while (6 == 0);
            }
        }

        private void UndoEffect()
        {
            try
            {
                bool flag;
                if (-1 != 0)
                {
                    flag = (this.EffectLog.Count <= 0);
                    if (flag)
                    {
                        goto IL_3E4;
                    }
                    LogEffect logEffect = (LogEffect)this.EffectLog.Pop();
                    string optname = logEffect.optname;
                    if (optname == null)
                    {
                        goto IL_3E3;
                    }

                    Dictionary<string, int> obj = null;
                    if (obj == null)
                    {
                        obj = new Dictionary<string, int>(11)
                {
                    {
                        "sharpen",
                        0
                    },
                    {
                        "hue",
                        1
                    },
                    {
                        "greyscale",
                        2
                    },
                    {
                        "sepia",
                        3
                    },
                    {
                        "defog",
                        4
                    },
                    {
                        "underwater",
                        5
                    },
                    {
                        "granite",
                        6
                    },
                    {
                        "emboss",
                        7
                    },
                    {
                        "cartoon",
                        8
                    },
                    {
                        "invert",
                        9
                    },
                    {
                        "digimagic",
                        10
                    }
                };
                    }
                    int num;
                    if (obj.TryGetValue(optname, out num))
                    {
                        bool arg_347_0;
                        double arg_263_0;
                        bool arg_37E_0;
                        switch (num)
                        {
                            case 0:
                                this._sharpeff.PixelWidth = 0.0015;
                                this._sharpeff.PixelHeight = 0.0015;
                                this._sharpeff.Strength = logEffect.effvalue;
                                this.GrdSharpen.Effect = this._sharpeff;
                                this.sharpen = logEffect.effvalue;
                                goto IL_3E3;
                            case 1:
                                this._shifthueeff.HueShift = logEffect.effvalue;
                                this.GrdHueShift.Effect = this._shifthueeff;
                                this.hueshift = logEffect.effvalue;
                                goto IL_3E3;
                            case 2:
                                flag = (logEffect.effvalue != 1.0);
                                if (!flag)
                                {
                                    this.GrdGreyScale.Effect = null;
                                }
                                this._GreyScale = "0";
                                goto IL_3E3;
                            case 3:
                                {
                                    bool expr_227 = arg_347_0 = (logEffect.effvalue == 1.0);
                                    if (6 != 0)
                                    {
                                        flag = !expr_227;
                                        if (!flag)
                                        {
                                            this.GrdSepia.Effect = null;
                                        }
                                        this._sepia = "0";
                                        goto IL_3E3;
                                    }
                                    goto IL_346;
                                }
                            case 4:
                                arg_263_0 = logEffect.effvalue;
                                break;
                            case 5:
                                {
                                    double expr_291 = arg_263_0 = logEffect.effvalue;
                                    if (!false)
                                    {
                                        flag = (expr_291 != 1.0);
                                        if (!flag)
                                        {
                                            this.GrdUnderWater.Effect = null;
                                        }
                                        this._underwater = "0";
                                        goto IL_3E3;
                                    }
                                    break;
                                }
                            case 6:
                                flag = (logEffect.effvalue != 1.0);
                                if (!flag)
                                {
                                    this.GrdSketchGranite.Effect = null;
                                }
                                this._granite = "0";
                                goto IL_3E3;
                            case 7:
                                flag = (logEffect.effvalue != 1.0);
                                if (!flag)
                                {
                                    goto IL_317;
                                }
                                goto IL_324;
                            case 8:
                                arg_347_0 = (logEffect.effvalue == 1.0);
                                goto IL_346;
                            case 9:
                                flag = (logEffect.effvalue != 1.0);
                                arg_37E_0 = flag;
                                goto IL_37E;
                            case 10:
                                {
                                    bool expr_3AD = arg_37E_0 = (logEffect.effvalue != 1.0);
                                    if (false)
                                    {
                                        goto IL_37E;
                                    }
                                    flag = expr_3AD;
                                    if (!flag)
                                    {
                                        this.GrdBrightness.Effect = null;
                                    }
                                    this.GrdSharpen.Effect = null;
                                    if (!false)
                                    {
                                        this._digimagic = "0";
                                        goto IL_3E3;
                                    }
                                    goto IL_317;
                                }
                            default:
                                goto IL_3E3;
                        }
                        flag = (arg_263_0 != 1.0);
                        bool expr_269 = arg_347_0 = flag;
                        if (true)
                        {
                            if (!expr_269)
                            {
                                this._defoger = "0";
                            }
                            this.GrdBrightness.Effect = null;
                            goto IL_3E3;
                        }
                        goto IL_346;
                    IL_317:
                        this.GrdEmboss.Effect = null;
                    IL_324:
                        this._emboss = "0";
                        goto IL_3E3;
                    IL_346:
                        flag = !arg_347_0;
                        goto IL_34A;
                    IL_37E:
                        if (!arg_37E_0)
                        {
                            this.GrdInvert.Effect = null;
                        }
                        this._invert = "0";
                        goto IL_398;
                    }
                    goto IL_3E3;
                }
            IL_34A:
                if (!flag)
                {
                    //	this.Grdcartoonize.Effect = null;
                }
                this._cartoon = "0";
            IL_398:
            IL_3E3:
            IL_3E4:
                if (!true)
                {
                    goto IL_398;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                if (!false)
                {
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }
        }

        private void up()
        {
            if (4 != 0)
            {
                this.y -= 2.0;
                if (!false)
                {
                    Canvas.SetTop(this.dragCanvas, this.y);
                }
            }
        }

        public void UpdateControlValues()
        {
            try
            {
                this.ellipticalRadio.IsChecked = new bool?(this.attribute.StylusTip == StylusTip.Ellipse);
                this.rectangularRadio.IsChecked = new bool?(this.attribute.StylusTip == StylusTip.Rectangle);
                this.ignorepsiCheckbox.IsChecked = new bool?(!this.attribute.IgnorePressure);
                this.fitcurveCheckbox.IsChecked = new bool?(this.attribute.FitToCurve);
            }
            finally
            {
            }
        }

        public void UpdateControlVisuals()
        {
            do
            {
                if (true)
                {
                    this.attribute.Width = Math.Round(this.attribute.Width, 2);
                }
                if (5 != 0)
                {
                    if (false)
                    {
                        goto IL_9B;
                    }
                    this.thicknessTextbox.Text = this.attribute.Width.ToString();
                }
            }
            while (false);
            this.fitcurveCheckbox.IsChecked = new bool?(this.attribute.FitToCurve);
            do
            {
                this.ignorepsiCheckbox.IsChecked = new bool?(!this.attribute.IgnorePressure);
            }
            while (false);
        IL_9B:
            this.ellipticalRadio.IsChecked = new bool?(this.attribute.StylusTip == StylusTip.Ellipse);
            this.rectangularRadio.IsChecked = new bool?(this.attribute.StylusTip == StylusTip.Rectangle);
            if (!false)
            {
            }
        }

        private void UpdateDragSelectionRect(System.Windows.Point pt1, System.Windows.Point pt2)
        {
            double length;
            double width;
            double arg_BC_0;
            double arg_BC_1;
            double length2;
            do
            {
                bool arg_12_0 = pt2.X < pt1.X;
                int arg_12_1 = 0;
                while (true)
                {
                    bool flag = (arg_12_0 ? 1 : 0) == arg_12_1;
                    if (flag || 8 == 0)
                    {
                        goto IL_47;
                    }
                    length = pt2.X;
                    width = pt1.X - pt2.X;
                IL_61:
                    double expr_63 = arg_BC_0 = pt2.Y;
                    double expr_6A = arg_BC_1 = pt1.Y;
                    if (2 == 0)
                    {
                        goto IL_BC;
                    }
                    int expr_72 = (arg_12_0 = (expr_63 < expr_6A)) ? 1 : 0;
                    int expr_75 = arg_12_1 = 0;
                    if (expr_75 != 0)
                    {
                        continue;
                    }
                    if (expr_72 != expr_75)
                    {
                        break;
                    }
                    if (!false)
                    {
                        goto Block_6;
                    }
                IL_47:
                    length = pt1.X;
                    width = pt2.X - pt1.X;
                    goto IL_61;
                }
                length2 = pt2.Y;
            }
            while (false);
            double height = pt1.Y - pt2.Y;
            goto IL_BF;
        Block_6:
            length2 = pt1.Y;
            arg_BC_0 = pt2.Y;
            arg_BC_1 = pt1.Y;
        IL_BC:
            height = arg_BC_0 - arg_BC_1;
        IL_BE:
        IL_BF:
            Canvas.SetLeft(this.dragSelectionBorder, length);
            Canvas.SetTop(this.dragSelectionBorder, length2);
            if (!false)
            {
                this.dragSelectionBorder.Width = width;
                this.dragSelectionBorder.Height = height;
                return;
            }
            goto IL_BE;
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            this.ClearResources();
            MemoryManagement.FlushMemory();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
        }

        private void Window_MouseDown(object sender, MouseButtonEventArgs e)
        {
            if (this.IsBlockEraseActive || this.IsInverseEraseActive)
            {
                bool arg_17F_0 = e.ChangedButton != MouseButton.Left;
            IL_3E:
                while (!arg_17F_0)
                {
                    System.Windows.Point position = e.GetPosition(this.MyInkCanvas);
                    this.StartPointCheck = new System.Windows.Point(position.X, position.Y);
                    double num = 0.0;
                    double arg_8C_0 = 0.0;
                    double num2;
                    while (true)
                    {
                        num2 = arg_8C_0;
                        double arg_A0_0;
                        double arg_E4_0 = arg_A0_0 = position.X;
                        while (true)
                        {
                            double arg_E4_1;
                            double expr_94 = arg_E4_1 = 0.0;
                            if (!true)
                            {
                                goto IL_E4;
                            }
                            bool flag = arg_A0_0 >= expr_94;
                            bool expr_A6 = arg_17F_0 = flag;
                            if (5 == 0)
                            {
                                goto IL_3E;
                            }
                            if (!expr_A6)
                            {
                                num = 0.0;
                            }
                            else
                            {
                                double expr_C8 = arg_8C_0 = e.GetPosition(this.MyInkCanvas).X;
                                if (false)
                                {
                                    break;
                                }
                                num = expr_C8;
                            }
                        IL_D1:
                            arg_E4_0 = (arg_A0_0 = position.Y);
                            if (false)
                            {
                                continue;
                            }
                            arg_E4_1 = 0.0;
                        IL_E4:
                            flag = (arg_E4_0 >= arg_E4_1);
                            if (false)
                            {
                                goto IL_FA;
                            }
                            if (!flag)
                            {
                                goto Block_10;
                            }
                            if (4 != 0)
                            {
                                goto Block_12;
                            }
                            goto IL_D1;
                        }
                    }
                Block_10:
                    num2 = 0.0;
                IL_FA:
                    if (7 != 0)
                    {
                        goto IL_118;
                    }
                    goto IL_12C;
                Block_12:
                    num2 = e.GetPosition(this.MyInkCanvas).Y;
                IL_118:
                    this.StartingPoint = new System.Windows.Point(num, num2);
                    this.isLeftMouseButtonDownOnWindow = true;
                IL_12C:
                    this.origMouseDownPoint = e.GetPosition(this.dragSelectionCanvas);
                    base.CaptureMouse();
                    e.Handled = true;
                    this.IsMouseDownClicked = true;
                    break;
                }
            }
        }

        private void Window_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            while (-1 != 0 && 8 != 0)
            {
                if (7 != 0)
                {
                    bool flag = !(sender is DragCanvas);
                    if (false)
                    {
                        continue;
                    }
                    if (!flag)
                    {
                        break;
                    }
                }
                return;
            }
            this.IsSelectedMainImage = true;
        }


        private void Window_MouseMove(object sender, MouseEventArgs e)
        {
            if (this.IsBlockEraseActive)
            {
                goto IL_1C;
            }
            bool arg_1A_0;
            bool arg_37_0 = arg_1A_0 = this.IsInverseEraseActive;
        IL_17:
            if (4 == 0)
            {
                goto IL_37;
            }
            int arg_12D_0;
            if (!arg_1A_0)
            {
                arg_12D_0 = 1;
                goto IL_2C;
            }
        IL_1C:
            arg_12D_0 = ((!this.IsMouseDownClicked) ? 1 : 0);
        IL_2C:
        IL_2D:
            bool flag = arg_12D_0 != 0;
        IL_32:
            arg_37_0 = flag;
        IL_37:
            if (!arg_37_0)
            {
                bool arg_13F_0 = !this.isDraggingSelectionRect;
                bool expr_90;
                while (true)
                {
                    if (!false)
                    {
                        flag = arg_13F_0;
                    }
                    if (!flag)
                    {
                        break;
                    }
                    flag = !this.isLeftMouseButtonDownOnWindow;
                    expr_90 = (arg_13F_0 = flag);
                    if (!false)
                    {
                        goto Block_4;
                    }
                }
            IL_58:
                System.Windows.Point position = e.GetPosition(this.dragSelectionCanvas);
                this.UpdateDragSelectionRect(this.origMouseDownPoint, position);
                e.Handled = true;
                if (!false)
                {
                }
                goto IL_105;
            Block_4:
                if (!expr_90)
                {
                    position = e.GetPosition(this.dragSelectionCanvas);
                    double num = Math.Abs((position - this.origMouseDownPoint).Length);
                    bool expr_C4 = arg_1A_0 = (arg_37_0 = (num > MainWindow.DragThreshold));
                    if (false)
                    {
                        goto IL_17;
                    }
                    bool expr_CD = (arg_12D_0 = ((!expr_C4) ? 1 : 0)) != 0;
                    if (false)
                    {
                        goto IL_2D;
                    }
                    flag = expr_CD;
                    if (!flag)
                    {
                        this.isDraggingSelectionRect = true;
                        if (false)
                        {
                            goto IL_58;
                        }
                        this.InitDragSelectionRect(this.origMouseDownPoint, position);
                        if (false)
                        {
                            goto IL_32;
                        }
                    }
                    e.Handled = true;
                }
            IL_105:
                flag = !this.IsMouseDownClicked;
                if (!flag)
                {
                    this.IsMouseMoveAfterDown = true;
                }
            }
        }


        private void Window_MouseUp(object sender, MouseButtonEventArgs e)
        {
            //// This item is obfuscated and can not be translated.
        }

        private void Window_Unloaded(object sender, RoutedEventArgs e)
        {
            MemoryManagement.FlushMemory();
        }

        private void Window1_PreviewMouseRightButtonDown(object sender, MouseButtonEventArgs e)
        {
            while (this.dragCanvas.ElementBeingDragged != null)
            {
                if (!false)
                {
                    this.elementForContextMenu = this.dragCanvas.ElementBeingDragged;
                    bool arg_D2_0 = !(this.elementForContextMenu is TextBox);
                    bool expr_59;
                    do
                    {
                        bool flag = arg_D2_0;
                        if (false)
                        {
                            goto IL_92;
                        }
                        expr_59 = (arg_D2_0 = flag);
                    }
                    while (false);
                    if (!expr_59)
                    {
                        if (!false)
                        {
                            TextBox textBox = (TextBox)this.elementForContextMenu;
                        }
                    }
                IL_71:
                IL_92:
                    this.IsSelectedMainImage = false;
                    return;
                }
            }
            if (5 != 0)
            {
                this.elementForContextMenu = this.dragCanvas.FindCanvasChild(e.Source as DependencyObject);
                //goto IL_92;
            }
            //goto IL_71;
        }

        private void worker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                while (true)
                {
                    bool flag = this.IsModerate || !this.IsEffectChange;
                    bool arg_1D_0 = flag;
                    bool expr_36;
                    do
                    {
                        if (!arg_1D_0)
                        {
                            this.SaveEffectsintoDB();
                        }
                        List<object> arg_6A_0 = e.Argument as List<object>;
                        expr_36 = (arg_1D_0 = !this.isChromaApplied);
                    }
                    while (false);
                    if (!expr_36)
                    {
                    }
                IL_41:
                    if (false)
                    {
                        continue;
                    }
                    if (!false)
                    {
                        break;
                    }
                    goto IL_41;
                }
            }
            catch (Exception serviceException)
            {
                while (false)
                {
                }
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                while (false)
                {
                }
                MemoryManagement.FlushMemory();
            }
            if (8 != 0)
            {
            }
        }

        private void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
        }

        public void ZomoutNew(bool orignal)
        {
            try
            {
                try
                {
                    bool arg_145_0;
                    bool expr_12 = arg_145_0 = (this.widthimg.Source == null);
                    if (false)
                    {
                        goto IL_145;
                    }
                    bool arg_13F_0;
                    bool expr_1B = arg_13F_0 = !expr_12;
                    double num;
                    double num2;
                    ScaleTransform scaleTransform;
                    TransformGroup transformGroup;
                    if (true)
                    {
                        if (!expr_1B)
                        {
                            return;
                        }
                        double width = this.widthimg.Source.Width;
                        double height = this.widthimg.Source.Height;
                        double arg_6C_0 = width;
                        double arg_6C_1 = 600.0;
                        double expr_109;
                        double expr_112;
                        do
                        {
                            num = arg_6C_0 / arg_6C_1;
                            num2 = height / 600.0;
                            num = 100.0 / num / 100.0;
                            num2 = 100.0 / num2 / 100.0;
                            if (this.frm.Children.Count != 1)
                            {
                                goto IL_12C;
                            }
                            width = this.forWdht.Width;
                            height = this.forWdht.Height;
                            num = width / 600.0;
                            num2 = height / 600.0;
                            num = 100.0 / num / 100.0;
                            expr_109 = (arg_6C_0 = 100.0);
                            expr_112 = (arg_6C_1 = num2);
                        }
                        while (3 == 0);
                        num2 = expr_109 / expr_112 / 100.0;
                        if (6 == 0)
                        {
                            goto IL_23D;
                        }
                    IL_12C:
                        scaleTransform = new ScaleTransform();
                        transformGroup = new TransformGroup();
                        arg_13F_0 = (height > width);
                    }
                    bool arg_141_0 = !arg_13F_0;
                IL_141:
                    bool flag = arg_141_0;
                    arg_145_0 = flag;
                IL_145:
                    if (!arg_145_0)
                    {
                        scaleTransform.ScaleX = num2 - 0.01;
                        scaleTransform.ScaleY = num2 - 0.01;
                    }
                    else
                    {                       
                        scaleTransform.ScaleX = num + 0.11;
                        scaleTransform.ScaleY = num + 0.11;
                    }
                    scaleTransform.CenterX = 0;////this.forWdht.ActualWidth / 2.0;
                    scaleTransform.CenterY = 0; ////this.forWdht.ActualHeight / 2.0;
                    transformGroup.Children.Add(scaleTransform);
                    bool expr_1EE = arg_141_0 = (this.GrdsubGreenScreen.Visibility == Visibility.Visible);
                    if (false)
                    {
                        goto IL_141;
                    }
                    if (!expr_1EE)
                    {
                        this.GrdZomout.LayoutTransform = transformGroup;
                        this.grdZoomCanvas.LayoutTransform = transformGroup;
                        goto IL_334;
                    }
                    scaleTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    scaleTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                IL_23D:
                    this.GrdGreenScreenDefault3.RenderTransform = null;
                    this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = transformGroup);
                    this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                }
                catch (Exception serviceException)
                {
                    while (4 == 0)
                    {
                    }
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    if (5 != 0)
                    {
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                }
            IL_334:;
            }
            finally
            {
                while (false)
                {
                }
            }
        }

        public void Zomout(bool orignal)
        {
            try
            {
                try
                {
                    bool arg_145_0;
                    bool expr_12 = arg_145_0 = (this.widthimg.Source == null);
                    if (false)
                    {
                        goto IL_145;
                    }
                    bool arg_13F_0;
                    bool expr_1B = arg_13F_0 = !expr_12;
                    double num;
                    double num2;
                    ScaleTransform scaleTransform;
                    TransformGroup transformGroup;
                    if (true)
                    {
                        if (!expr_1B)
                        {
                            return;
                        }
                        double width = this.widthimg.Source.Width;
                        double height = this.widthimg.Source.Height;
                        double arg_6C_0 = width;
                        double arg_6C_1 = 600.0;
                        double expr_109;
                        double expr_112;
                        do
                        {
                            num = arg_6C_0 / arg_6C_1;
                            num2 = height / 600.0;
                            num = 100.0 / num / 100.0;
                            num2 = 100.0 / num2 / 100.0;
                            if (this.frm.Children.Count != 1)
                            {
                                goto IL_12C;
                            }
                            width = this.forWdht.Width;
                            height = this.forWdht.Height;
                            num = width / 600.0;
                            num2 = height / 600.0;
                            num = 100.0 / num / 100.0;
                            expr_109 = (arg_6C_0 = 100.0);
                            expr_112 = (arg_6C_1 = num2);
                        }
                        while (3 == 0);
                        num2 = expr_109 / expr_112 / 100.0;
                        if (6 == 0)
                        {
                            goto IL_23D;
                        }
                    IL_12C:
                        scaleTransform = new ScaleTransform();
                        transformGroup = new TransformGroup();
                        arg_13F_0 = (height > width);
                    }
                    bool arg_141_0 = !arg_13F_0;
                IL_141:
                    bool flag = arg_141_0;
                    arg_145_0 = flag;
                IL_145:
                    if (!arg_145_0)
                    {
                        scaleTransform.ScaleX = num2 - 0.01;
                        scaleTransform.ScaleY = num2 - 0.01;
                    }
                    else
                    {
                        scaleTransform.ScaleX = num - 0.01;
                        scaleTransform.ScaleY = num - 0.01;                        
                    }
                    scaleTransform.CenterX = this.forWdht.ActualWidth / 2.0;
                    scaleTransform.CenterY = this.forWdht.ActualHeight / 2.0;
                    transformGroup.Children.Add(scaleTransform);
                    bool expr_1EE = arg_141_0 = (this.GrdsubGreenScreen.Visibility == Visibility.Visible);
                    if (false)
                    {
                        goto IL_141;
                    }
                    if (!expr_1EE)
                    {
                        this.GrdZomout.LayoutTransform = transformGroup;
                        this.grdZoomCanvas.LayoutTransform = transformGroup;
                        goto IL_334;
                    }
                    scaleTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    scaleTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                IL_23D:
                    this.GrdGreenScreenDefault3.RenderTransform = null;
                    this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = transformGroup);
                    this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                }
                catch (Exception serviceException)
                {
                    while (4 == 0)
                    {
                    }
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    if (5 != 0)
                    {
                        ErrorHandler.ErrorHandler.LogFileWrite(message);
                    }
                }
            IL_334:;
            }
            finally
            {
                while (false)
                {
                }
            }
        }

        private void ZoomInButtonCollage_Click(object sender, RoutedEventArgs e)
        {

            bool tet = this.mainImage1.Focus();
            bool test = this.mainImage2.Focus();

            this.chromaKeyPopup();
            this.templatePopup();

        ex_09:;
            double height = 10;
            double width = 10;
            this.btnCollageZoomInAct.Visibility = Visibility.Visible;
            bool exp_3C = (this.CollageThree.Visibility == Visibility.Visible);
            bool exp_4C = (this.CollageFour.Visibility == Visibility.Visible);
            bool exp_5C = (this.CollageFive.Visibility == Visibility.Visible);
            bool exp_6C = (this.CollageSix.Visibility == Visibility.Visible);
            bool exp_7A_C = (this.CollageSevenA.Visibility == Visibility.Visible);
            bool exe_7B_C = (this.CollageSevenB.Visibility == Visibility.Visible);
            bool exp_7C = (this.CollageSeven.Visibility == Visibility.Visible);

            try
            {


                if (exp_3C)
                {
                    if (this.zoomCollageCount == 16)
                    {
                        this.mainImage3_1.Height = collageFixHeight + height;
                        this.mainImage3_1.Width = collageFixWidth + width;
                        collageFixHeight = this.mainImage3_1.Height;
                        collageFixWidth = this.mainImage3_1.Width;

                    }
                    else if (this.zoomCollageCount == 17)
                    {
                        this.mainImage3_2.Height = collageFixHeight + height;
                        this.mainImage3_2.Width = collageFixWidth + width;
                        collageFixHeight = this.mainImage3_2.Height;
                        collageFixWidth = this.mainImage3_2.Width;
                    }
                    else if (this.zoomCollageCount == 18)
                    {
                        this.mainImage3_3.Height = collageFixHeight + height;
                        this.mainImage3_3.Width = collageFixWidth + width;
                        collageFixHeight = this.mainImage3_3.Height;
                        collageFixWidth = this.mainImage3_3.Width;
                    }
                }

                else if (exp_4C)
                {
                    if (this.zoomCollageCount == 1)
                    {
                        this.mainImage1.Height = collageFixHeight + height;
                        this.mainImage1.Width = collageFixWidth + width;
                        collageFixHeight = this.mainImage1.Height;
                        collageFixWidth = this.mainImage1.Width;
                    }
                    else if (this.zoomCollageCount == 2)
                    {
                        this.mainImage2.Height = collageFixHeight + height;
                        this.mainImage2.Width = collageFixWidth + width;
                        collageFixHeight = this.mainImage2.Height;
                        collageFixWidth = this.mainImage2.Width;
                    }
                    else if (this.zoomCollageCount == 3)
                    {
                        this.mainImage3.Height = collageFixHeight + height;
                        this.mainImage3.Width = collageFixWidth + width;
                        collageFixHeight = this.mainImage3.Height;
                        collageFixWidth = this.mainImage3.Width;
                    }
                    else if (this.zoomCollageCount == 4)
                    {
                        this.mainImage4.Height = collageFixHeight + height;
                        this.mainImage4.Width = collageFixWidth + width;
                        collageFixHeight = this.mainImage4.Height;
                        collageFixWidth = this.mainImage4.Width;
                    }
                }
                else if (exp_5C)
                {
                    if (this.zoomCollageCount == 5)
                    {
                        this.mainImage5_1.Height = collageFixHeight + height;
                        this.mainImage5_1.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage5_1.Height;
                        this.collageFixWidth = this.mainImage5_1.Width;

                    }
                    else if (this.zoomCollageCount == 6)
                    {
                        this.mainImage5_2.Height = collageFixHeight + height;
                        this.mainImage5_2.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage5_2.Height;
                        this.collageFixWidth = this.mainImage5_2.Width;
                    }
                    else if (this.zoomCollageCount == 7)
                    {
                        this.mainImage5_3.Height = collageFixHeight + height;
                        this.mainImage5_3.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage5_3.Height;
                        this.collageFixWidth = this.mainImage5_3.Width;
                    }
                    else if (this.zoomCollageCount == 8)
                    {
                        this.mainImage5_4.Height = collageFixHeight + height;
                        this.mainImage5_4.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage5_4.Height;
                        this.collageFixWidth = this.mainImage5_4.Width;

                    }
                    else if (this.zoomCollageCount == 9)
                    {
                        this.mainImage5_5.Height = collageFixHeight + height;
                        this.mainImage5_5.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage5_5.Height;
                        this.collageFixWidth = this.mainImage5_5.Width;
                    }
                }
                else if (exp_6C)
                {
                    if (this.zoomCollageCount == 10)
                    {
                        this.mainImage6_1.Height = collageFixHeight + height;
                        this.mainImage6_1.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage6_1.Height;
                        this.collageFixWidth = this.mainImage6_1.Width;
                    }
                    else if (this.zoomCollageCount == 11)
                    {
                        this.mainImage6_2.Height = collageFixHeight + height;
                        this.mainImage6_2.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage6_2.Height;
                        this.collageFixWidth = this.mainImage6_2.Width;
                    }
                    else if (this.zoomCollageCount == 12)
                    {
                        this.mainImage6_3.Height = collageFixHeight + height;
                        this.mainImage6_3.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage6_3.Height;
                        this.collageFixWidth = this.mainImage6_3.Width;
                    }
                    else if (this.zoomCollageCount == 13)
                    {
                        this.mainImage6_4.Height = collageFixHeight + height;
                        this.mainImage6_4.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage6_4.Height;
                        this.collageFixWidth = this.mainImage6_4.Width;
                    }
                    else if (this.zoomCollageCount == 14)
                    {
                        this.mainImage6_5.Height = collageFixHeight + height;
                        this.mainImage6_5.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage6_5.Height;
                        this.collageFixWidth = this.mainImage6_5.Width;
                    }
                    else if (this.zoomCollageCount == 15)
                    {
                        this.mainImage6_6.Height = collageFixHeight + height;
                        this.mainImage6_6.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage6_6.Height;
                        this.collageFixWidth = this.mainImage6_6.Width;
                    }
                }
                else if (exp_7A_C)
                {
                    if (this.zoomCollageCount == 19)
                    {
                        this.mainImage7A_R1C1.Height = collageFixHeight + height;
                        this.mainImage7A_R1C1.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7A_R1C1.Height;
                        this.collageFixWidth = this.mainImage7A_R1C1.Width;
                    }
                    else if (this.zoomCollageCount == 20)
                    {
                        this.mainImage7A_R1C2.Height = collageFixHeight + height;
                        this.mainImage7A_R1C2.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7A_R1C2.Height;
                        this.collageFixWidth = this.mainImage7A_R1C2.Width;
                    }
                    else if (this.zoomCollageCount == 21)
                    {
                        this.mainImage7A_R1C3.Height = collageFixHeight + height;
                        this.mainImage7A_R1C3.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7A_R1C3.Height;
                        this.collageFixWidth = this.mainImage7A_R1C3.Width;
                    }
                    else if (this.zoomCollageCount == 22)
                    {
                        this.mainImage7A_R2.Height = collageFixHeight + height;
                        this.mainImage7A_R2.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7A_R2.Height;
                        this.collageFixWidth = this.mainImage7A_R2.Width;
                    }
                    else if (this.zoomCollageCount == 23)
                    {
                        this.mainImage7A_R3C1.Height = collageFixHeight + height;
                        this.mainImage7A_R3C1.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7A_R3C1.Height;
                        this.collageFixWidth = this.mainImage7A_R3C1.Width;
                    }
                    else if (this.zoomCollageCount == 24)
                    {
                        this.mainImage7A_R3C2.Height = collageFixHeight + height;
                        this.mainImage7A_R3C2.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7A_R3C2.Height;
                        this.collageFixWidth = this.mainImage7A_R3C2.Width;
                    }
                    else if (this.zoomCollageCount == 25)
                    {
                        this.mainImage7A_R3C3.Height = collageFixHeight + height;
                        this.mainImage7A_R3C3.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7A_R3C3.Height;
                        this.collageFixWidth = this.mainImage7A_R3C3.Width;
                    }
                }
                if (exe_7B_C)
                {
                    if (this.zoomCollageCount == 26)
                    {
                        this.mainImage7B_R1C1.Height = collageFixHeight + height;
                        this.mainImage7B_R1C1.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7B_R1C1.Height;
                        this.collageFixWidth = this.mainImage7B_R1C1.Width;
                    }
                    else if (this.zoomCollageCount == 27)
                    {
                        this.mainImage7B_R1C2.Height = collageFixHeight + height;
                        this.mainImage7B_R1C2.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7B_R1C2.Height;
                        this.collageFixWidth = this.mainImage7B_R1C2.Width;
                    }
                    else if (this.zoomCollageCount == 28)
                    {
                        this.mainImage7B_R2C3.Height = collageFixHeight + height;
                        this.mainImage7B_R2C3.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7B_R2C3.Height;
                        this.collageFixWidth = this.mainImage7B_R2C3.Width;
                    }
                    else if (this.zoomCollageCount == 29)
                    {
                        this.mainImage7B_R3C1.Height = collageFixHeight + height;
                        this.mainImage7B_R3C1.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7B_R3C1.Height;
                        this.collageFixWidth = this.mainImage7B_R3C1.Width;
                    }
                    else if (this.zoomCollageCount == 30)
                    {
                        this.mainImage7B_R3C2.Height = collageFixHeight + height;
                        this.mainImage7B_R3C2.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7B_R3C2.Height;
                        this.collageFixWidth = this.mainImage7B_R3C2.Width;
                    }
                    else if (this.zoomCollageCount == 31)
                    {
                        this.mainImage7B_C2R1.Height = collageFixHeight + height;
                        this.mainImage7B_C2R1.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7B_C2R1.Height;
                        this.collageFixWidth = this.mainImage7B_C2R1.Width;
                    }
                    else if (this.zoomCollageCount == 32)
                    {
                        this.mainImage7B_C2R2.Height = collageFixHeight + height;
                        this.mainImage7B_C2R2.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7B_C2R2.Height;
                        this.collageFixWidth = this.mainImage7B_C2R2.Width;
                    }
                }
                else if (exp_7C)
                {
                    if (this.zoomCollageCount == 33)
                    {
                        this.Polugonleft1.Height = collageFixHeight + height;
                        this.Polugonleft1.Width = collageFixWidth + width;
                        this.collageFixHeight = this.Polugonleft1.Height;
                        this.collageFixWidth = this.Polugonleft1.Width;
                    }

                }
            }
            catch
            {

            }

        }

        private void ZoomOutButtonCollage_Click(object sender, RoutedEventArgs e)
        {
            this.chromaKeyPopup();
            this.templatePopup();

            double height = 10;
            double width = 10;

            this.btnCollageZoomOutAct.Visibility = Visibility.Visible;
            bool exp_4C = (this.CollageFour.Visibility == Visibility.Visible);
            bool exp_5C = (this.CollageFive.Visibility == Visibility.Visible);
            bool exp_6C = (this.CollageSix.Visibility == Visibility.Visible);
            bool exp_3C = (this.CollageThree.Visibility == Visibility.Visible);
            bool exp_7A_C = (this.CollageSevenA.Visibility == Visibility.Visible);
            bool exe_7B_C = (this.CollageSevenB.Visibility == Visibility.Visible);
            bool exp_7C = (this.CollageSeven.Visibility == Visibility.Visible);
            try
            {

                if (exp_3C)
                {
                    if (this.zoomCollageCount == 16)
                    {
                        this.mainImage3_1.Height = collageFixHeight - height;
                        this.mainImage3_1.Width = collageFixWidth - width;
                        collageFixHeight = this.mainImage3_1.Height;
                        collageFixWidth = this.mainImage3_1.Width;

                    }
                    else if (this.zoomCollageCount == 17)
                    {
                        this.mainImage3_2.Height = collageFixHeight - height;
                        this.mainImage3_2.Width = collageFixWidth - width;
                        collageFixHeight = this.mainImage3_2.Height;
                        collageFixWidth = this.mainImage3_2.Width;
                    }
                    else if (this.zoomCollageCount == 18)
                    {
                        this.mainImage3_3.Height = collageFixHeight - height;
                        this.mainImage3_3.Width = collageFixWidth - width;
                        collageFixHeight = this.mainImage3_3.Height;
                        collageFixWidth = this.mainImage3_3.Width;
                    }
                }

                else if (exp_4C)
                {
                    if (this.zoomCollageCount == 1)
                    {
                        this.mainImage1.Height = collageFixHeight - height;
                        this.mainImage1.Width = collageFixWidth - width;
                        collageFixHeight = this.mainImage1.Height;
                        collageFixWidth = this.mainImage1.Width;
                    }
                    else if (this.zoomCollageCount == 2)
                    {
                        this.mainImage2.Height = collageFixHeight - height;
                        this.mainImage2.Width = collageFixWidth - width;
                        collageFixHeight = this.mainImage2.Height;
                        collageFixWidth = this.mainImage2.Width;
                    }
                    else if (this.zoomCollageCount == 3)
                    {
                        this.mainImage3.Height = collageFixHeight - height;
                        this.mainImage3.Width = collageFixWidth - width;
                        collageFixHeight = this.mainImage3.Height;
                        collageFixWidth = this.mainImage3.Width;
                    }
                    else if (this.zoomCollageCount == 4)
                    {
                        this.mainImage4.Height = collageFixHeight - height;
                        this.mainImage4.Width = collageFixWidth - width;
                        collageFixHeight = this.mainImage4.Height;
                        collageFixWidth = this.mainImage4.Width;
                    }
                }
                else if (exp_5C)
                {
                    if (this.zoomCollageCount == 5)
                    {
                        this.mainImage5_1.Height = collageFixHeight - height;
                        this.mainImage5_1.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage5_1.Height;
                        this.collageFixWidth = this.mainImage5_1.Width;
                    }
                    else if (this.zoomCollageCount == 6)
                    {
                        this.mainImage5_2.Height = collageFixHeight - height;
                        this.mainImage5_2.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage5_2.Height;
                        this.collageFixWidth = this.mainImage5_2.Width;
                    }
                    else if (this.zoomCollageCount == 7)
                    {
                        this.mainImage5_3.Height = collageFixHeight - height;
                        this.mainImage5_3.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage5_3.Height;
                        this.collageFixWidth = this.mainImage5_3.Width;
                    }
                    else if (this.zoomCollageCount == 8)
                    {
                        this.mainImage5_4.Height = collageFixHeight - height;
                        this.mainImage5_4.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage5_4.Height;
                        this.collageFixWidth = this.mainImage5_4.Width;
                    }
                    else if (this.zoomCollageCount == 9)
                    {
                        this.mainImage5_5.Height = collageFixHeight - height;
                        this.mainImage5_5.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage5_5.Height;
                        this.collageFixWidth = this.mainImage5_5.Width;
                    }
                }
                else if (exp_6C)
                {
                    if (this.zoomCollageCount == 10)
                    {
                        this.mainImage6_1.Height = collageFixHeight - height;
                        this.mainImage6_1.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage6_1.Height;
                        this.collageFixWidth = this.mainImage6_1.Width;
                    }
                    else if (this.zoomCollageCount == 11)
                    {
                        this.mainImage6_2.Height = collageFixHeight - height;
                        this.mainImage6_2.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage6_2.Height;
                        this.collageFixWidth = this.mainImage6_2.Width;
                    }
                    else if (this.zoomCollageCount == 12)
                    {
                        this.mainImage6_3.Height = collageFixHeight - height;
                        this.mainImage6_3.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage6_3.Height;
                        this.collageFixWidth = this.mainImage6_3.Width;
                    }
                    else if (this.zoomCollageCount == 13)
                    {
                        this.mainImage6_4.Height = collageFixHeight - height;
                        this.mainImage6_4.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage6_4.Height;
                        this.collageFixWidth = this.mainImage6_4.Width;
                    }
                    else if (this.zoomCollageCount == 14)
                    {
                        this.mainImage6_5.Height = collageFixHeight - height;
                        this.mainImage6_5.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage6_5.Height;
                        this.collageFixWidth = this.mainImage6_5.Width;
                    }
                    else if (this.zoomCollageCount == 15)
                    {
                        this.mainImage6_6.Height = collageFixHeight - height;
                        this.mainImage6_6.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage6_6.Height;
                        this.collageFixWidth = this.mainImage6_6.Width;
                    }

                }
                if (exp_7A_C)
                {
                    if (this.zoomCollageCount == 19)
                    {
                        this.mainImage7A_R1C1.Height = collageFixHeight - height;
                        this.mainImage7A_R1C1.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7A_R1C1.Height;
                        this.collageFixWidth = this.mainImage7A_R1C1.Width;
                    }
                    else if (this.zoomCollageCount == 20)
                    {
                        this.mainImage7A_R1C2.Height = collageFixHeight - height;
                        this.mainImage7A_R1C2.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7A_R1C2.Height;
                        this.collageFixWidth = this.mainImage7A_R1C2.Width;
                    }
                    else if (this.zoomCollageCount == 21)
                    {
                        this.mainImage7A_R1C3.Height = collageFixHeight - height;
                        this.mainImage7A_R1C3.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7A_R1C3.Height;
                        this.collageFixWidth = this.mainImage7A_R1C3.Width;
                    }
                    else if (this.zoomCollageCount == 22)
                    {
                        this.mainImage7A_R2.Height = collageFixHeight - height;
                        this.mainImage7A_R2.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7A_R2.Height;
                        this.collageFixWidth = this.mainImage7A_R2.Width;
                    }
                    else if (this.zoomCollageCount == 23)
                    {
                        this.mainImage7A_R3C1.Height = collageFixHeight + height;
                        this.mainImage7A_R3C1.Width = collageFixWidth + width;
                        this.collageFixHeight = this.mainImage7A_R3C1.Height;
                        this.collageFixWidth = this.mainImage7A_R3C1.Width;
                    }
                    else if (this.zoomCollageCount == 24)
                    {
                        this.mainImage7A_R3C2.Height = collageFixHeight - height;
                        this.mainImage7A_R3C2.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7A_R3C2.Height;
                        this.collageFixWidth = this.mainImage7A_R3C2.Width;
                    }
                    else if (this.zoomCollageCount == 25)
                    {
                        this.mainImage7A_R3C3.Height = collageFixHeight - height;
                        this.mainImage7A_R3C3.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7A_R3C3.Height;
                        this.collageFixWidth = this.mainImage7A_R3C3.Width;
                    }

                }
                if (exe_7B_C)
                {
                    if (this.zoomCollageCount == 26)
                    {
                        this.mainImage7B_R1C1.Height = collageFixHeight - height;
                        this.mainImage7B_R1C1.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7B_R1C1.Height;
                        this.collageFixWidth = this.mainImage7B_R1C1.Width;
                    }
                    else if (this.zoomCollageCount == 27)
                    {
                        this.mainImage7B_R1C2.Height = collageFixHeight - height;
                        this.mainImage7B_R1C2.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7B_R1C2.Height;
                        this.collageFixWidth = this.mainImage7B_R1C2.Width;
                    }
                    else if (this.zoomCollageCount == 28)
                    {
                        this.mainImage7B_R2C3.Height = collageFixHeight - height;
                        this.mainImage7B_R2C3.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7B_R2C3.Height;
                        this.collageFixWidth = this.mainImage7B_R2C3.Width;
                    }
                    else if (this.zoomCollageCount == 29)
                    {
                        this.mainImage7B_R3C1.Height = collageFixHeight - height;
                        this.mainImage7B_R3C1.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7B_R3C1.Height;
                        this.collageFixWidth = this.mainImage7B_R3C1.Width;
                    }
                    else if (this.zoomCollageCount == 30)
                    {
                        this.mainImage7B_R3C2.Height = collageFixHeight - height;
                        this.mainImage7B_R3C2.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7B_R3C2.Height;
                        this.collageFixWidth = this.mainImage7B_R3C2.Width;
                    }
                    else if (this.zoomCollageCount == 31)
                    {
                        this.mainImage7B_C2R1.Height = collageFixHeight - height;
                        this.mainImage7B_C2R1.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7B_C2R1.Height;
                        this.collageFixWidth = this.mainImage7B_C2R1.Width;
                    }
                    else if (this.zoomCollageCount == 32)
                    {
                        this.mainImage7B_C2R2.Height = collageFixHeight - height;
                        this.mainImage7B_C2R2.Width = collageFixWidth - width;
                        this.collageFixHeight = this.mainImage7B_C2R2.Height;
                        this.collageFixWidth = this.mainImage7B_C2R2.Width;
                    }
                }

            }
            catch
            {

            }
        }

        private void ZoomInButtonChroma_Click(object sender, RoutedEventArgs e)
        {
            this.IsImageDirtyState = true;
            this.chromaKeyPopup();
            this.templatePopup();
            this.btnZoomInAct.Visibility = Visibility.Visible;
            this.btnChromaZoomInAct.Visibility = Visibility.Visible;

            DependencyObject expr_12 = this.mainImage;
            EdgeMode expr_17 = EdgeMode.Aliased;
            if (!false)
            {
                RenderOptions.SetEdgeMode(expr_12, expr_17);
            }
            try
            {
                try
                {
                    this.CmbProductType.Visibility = Visibility.Collapsed;
                    bool flag = this.elementForContextMenu != null;
                    bool arg_50_0;
                    bool arg_AF_0 = arg_50_0 = flag;
                    while (6 != 0)
                    {
                        Button button;
                        TransformGroup transformGroup;
                        TransformGroup transformGroup2;
                        RotateTransform rotateTransform;
                        ScaleTransform scaleTransform;
                        if (!arg_50_0)
                        {
                            if (7 != 0)
                            {
                                if (this._ZoomFactor >= this._maxZoomFactor)
                                {
                                    this._ZoomFactor = 4.0;
                                    this.IsGraphicsChange = true;
                                    return;
                                }
                                this._ZoomFactor += 0.025;
                                flag = (this.zoomTransform == null);
                                arg_AF_0 = flag;
                                break;
                            }
                        }
                        else
                        {
                            flag = !(this.elementForContextMenu is Button);
                            if (flag)
                            {
                                goto IL_700;
                            }
                            button = (Button)this.elementForContextMenu;
                            bool expr_497 = arg_50_0 = (arg_AF_0 = (button.Tag == null));
                            if (8 == 0)
                            {
                                continue;
                            }
                            if (!expr_497)
                            {
                                this._GraphicsZoomFactor = Convert.ToDouble(button.Tag.ToString());
                                this._GraphicsZoomFactor += 0.025;
                            }
                            else
                            {
                                this._GraphicsZoomFactor = 1.0;
                            }
                        IL_4E6:
                            transformGroup = new TransformGroup();
                            transformGroup2 = (this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup);
                            rotateTransform = new RotateTransform();
                            scaleTransform = new ScaleTransform();
                            if (transformGroup2 == null)
                            {
                                goto IL_61A;
                            }
                            if (transformGroup2.Children.Count > 0)
                            {
                                if (transformGroup2.Children[0] is ScaleTransform)
                                {
                                    scaleTransform = (ScaleTransform)transformGroup2.Children[0];
                                }
                                else if (transformGroup2.Children[0] is RotateTransform)
                                {
                                    rotateTransform = (RotateTransform)transformGroup2.Children[0];
                                }
                            }
                            if (transformGroup2.Children.Count <= 1)
                            {
                                goto IL_619;
                            }
                            if (!(transformGroup2.Children[1] is ScaleTransform))
                            {
                                if (transformGroup2.Children[1] is RotateTransform)
                                {
                                    rotateTransform = (RotateTransform)transformGroup2.Children[1];
                                    goto IL_618;
                                }
                                goto IL_618;
                            }
                        }
                        scaleTransform = (ScaleTransform)transformGroup2.Children[1];
                    IL_618:
                    IL_619:
                    IL_61A:
                        flag = (scaleTransform != null);
                    IL_624:
                        if (!flag)
                        {
                            scaleTransform = new ScaleTransform();
                            scaleTransform.ScaleX = this._GraphicsZoomFactor;
                            scaleTransform.ScaleY = this._GraphicsZoomFactor;
                        IL_64C:
                            scaleTransform.CenterX = 0.0;
                            scaleTransform.CenterY = 0.0;
                            if (7 == 0)
                            {
                            IL_461:
                            IL_463:
                                goto IL_700;
                            }
                        }
                        else
                        {
                            scaleTransform.ScaleX = this._GraphicsZoomFactor;
                            scaleTransform.ScaleY = this._GraphicsZoomFactor;
                            scaleTransform.CenterX = 0.0;
                            scaleTransform.CenterY = 0.0;
                        }
                        transformGroup.Children.Add(scaleTransform);
                        if (rotateTransform != null)
                        {
                            transformGroup.Children.Add(rotateTransform);
                        }
                        button.Tag = this._GraphicsZoomFactor.ToString();
                        button.RenderTransform = transformGroup;
                        this.elementForContextMenu = button;
                    IL_700:
                        this.IsGraphicsChange = true;
                        if (this._ZoomFactor >= 1.0)
                        {
                            this.attribute.Width = this.attributeWidth / this._ZoomFactor;
                            this.attribute.Height = this.attributeHeight / this._ZoomFactor;
                        }
                        else
                        {
                            this.attribute.Width = this.attributeWidth * this._ZoomFactor;
                            this.attribute.Height = this.attributeHeight * this._ZoomFactor;
                        }
                        goto IL_7D3;
                    }
                    if (arg_AF_0)
                    {
                        //goto IL_463;
                    }
                    if (-1 != 0)
                    {
                        if (this.FlipMode != 0 || this.FlipModeY != 0)
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = this._ZoomFactor;
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            if (false)
                            {
                                //goto IL_4E6;
                            }
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                            }
                            else
                            {
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                                this.MyInkCanvas.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            }
                            this.IsGraphicsChange = true;
                        }
                        else
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = this._ZoomFactor;
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                                if (3 == 0)
                                {
                                    //goto IL_64C;
                                }
                            }
                            else
                            {
                                this.MyInkCanvas.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            }
                            this.IsGraphicsChange = true;
                        }
                        this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
                        //goto IL_461;
                    }
                    //goto IL_624;
                }
                catch (Exception ex)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(ex);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    MessageBox.Show(ex.Message);
                }
            IL_7D3:
                while (!true)
                {
                }
            }
            finally
            {
                MemoryManagement.FlushMemory();
                if (!false)
                {
                }
            }
            this.IsGreenCorrection = false;
        }

        private void mainImage1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 1;
        }


        private void mainImage2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 2;
        }

        private void mainImage3_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 3;
        }

        private void mainImage4_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 4;

        }

        private void mainImage5_1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 5;
        }

        private void mainImage5_2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 6;
        }

        private void mainImage5_3_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 7;
        }

        private void mainImage5_4_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 8;
        }

        private void mainImage5_5_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 9;
        }

        private void mainImage6_1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 10;
        }

        private void mainImage6_2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 11;
        }

        private void mainImage6_3_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 12;
        }

        private void mainImage6_4_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 13;
        }

        private void mainImage6_5_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 14;
        }

        private void mainImage6_6_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 15;
        }

        private void mainImage3_1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 16;
        }

        private void mainImage3_2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 17;
        }
        private void mainImage3_3_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 18;
        }

        private void mainImage7A_R1C1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 19;

        }

        private void mainImage7A_R1C2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 20;
        }

        private void mainImage7A_R1C3_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 21;
        }
        private void mainImage7A_R2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 22;
        }
        private void mainImage7A_R3C1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 23;
        }
        private void mainImage7A_R3C2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 24;
        }
        private void mainImage7A_R3C3_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 25;
        }

        private void mainImage7B_R1C1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 26;
        }
        private void mainImage7B_R1C2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 27;
        }
        private void mainImage7B_R2C3_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 28;
        }
        private void mainImage7B_R3C1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 29;
        }
        private void mainImage7B_R3C2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 30;
        }
        private void mainImage7B_C2R1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 31;
        }
        private void mainImage7B_C2R2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 32;
        }
        private void Polugonleft1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 33;
        }
        private void Polugonleft2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 34;
        }
        private void PolygonTop_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 35;
        }
        private void PolygonCenter_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 36;
        }
        private void PolygonBottom_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 37;
        }
        private void PolygonRight1_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 38;
        }
        private void PolygonRight2_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            this.zoomCollageCount = 39;
        }
        private void ZoomInButton_Click(object sender, RoutedEventArgs e)
        {
            this.IsImageDirtyState = true;
            //CollapsePopUp();
            this.chromaKeyPopup();
            this.templatePopup();
            this.btnChromaZoomInAct.Visibility = Visibility.Visible;
            this.btnZoomInAct.Visibility = Visibility.Visible;
            this.btnZoomInActivate.Visibility = Visibility.Visible;
            DependencyObject expr_12 = this.mainImage;
            EdgeMode expr_17 = EdgeMode.Aliased;
            if (!false)
            {
                RenderOptions.SetEdgeMode(expr_12, expr_17);
            }
            try
            {
                try
                {
                    this.CmbProductType.Visibility = Visibility.Collapsed;
                    bool flag = this.elementForContextMenu != null;
                    bool arg_50_0;
                    bool arg_AF_0 = arg_50_0 = flag;
                    while (6 != 0)
                    {
                        Button button;
                        TransformGroup transformGroup;
                        TransformGroup transformGroup2;
                        RotateTransform rotateTransform;
                        ScaleTransform scaleTransform;
                        if (!arg_50_0)
                        {
                            if (7 != 0)
                            {
                                if (this._ZoomFactor >= this._maxZoomFactor)
                                {
                                    this._ZoomFactor = 4.0;
                                    this.IsGraphicsChange = true;
                                    return;
                                }
                                this._ZoomFactor += 0.025;
                                // this._ZoomFactor += 1.5;
                                flag = (this.zoomTransform == null);
                                arg_AF_0 = flag;
                                break;
                            }
                        }
                        else
                        {
                            flag = !(this.elementForContextMenu is Button);
                            if (flag)
                            {
                                goto IL_700;
                            }
                            button = (Button)this.elementForContextMenu;
                            bool expr_497 = arg_50_0 = (arg_AF_0 = (button.Tag == null));
                            if (8 == 0)
                            {
                                continue;
                            }
                            if (!expr_497)
                            {
                                this._GraphicsZoomFactor = Convert.ToDouble(button.Tag.ToString());
                                this._GraphicsZoomFactor += 0.025;
                            }
                            else
                            {
                                this._GraphicsZoomFactor = 1.0;
                            }
                        IL_4E6:
                            transformGroup = new TransformGroup();
                            transformGroup2 = (this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup);
                            rotateTransform = new RotateTransform();
                            scaleTransform = new ScaleTransform();
                            if (transformGroup2 == null)
                            {
                                goto IL_61A;
                            }
                            if (transformGroup2.Children.Count > 0)
                            {
                                if (transformGroup2.Children[0] is ScaleTransform)
                                {
                                    scaleTransform = (ScaleTransform)transformGroup2.Children[0];
                                }
                                else if (transformGroup2.Children[0] is RotateTransform)
                                {
                                    rotateTransform = (RotateTransform)transformGroup2.Children[0];
                                }
                            }
                            if (transformGroup2.Children.Count <= 1)
                            {
                                goto IL_619;
                            }
                            if (!(transformGroup2.Children[1] is ScaleTransform))
                            {
                                if (transformGroup2.Children[1] is RotateTransform)
                                {
                                    rotateTransform = (RotateTransform)transformGroup2.Children[1];
                                    goto IL_618;
                                }
                                goto IL_618;
                            }
                        }
                        scaleTransform = (ScaleTransform)transformGroup2.Children[1];
                    IL_618:
                    IL_619:
                    IL_61A:
                        flag = (scaleTransform != null);
                    IL_624:
                        if (!flag)
                        {
                            scaleTransform = new ScaleTransform();
                            scaleTransform.ScaleX = this._GraphicsZoomFactor;
                            scaleTransform.ScaleY = this._GraphicsZoomFactor;
                        IL_64C:
                            scaleTransform.CenterX = 0.0;
                            scaleTransform.CenterY = 0.0;
                            if (7 == 0)
                            {
                            IL_461:
                            IL_463:
                                goto IL_700;
                            }
                        }
                        else
                        {
                            scaleTransform.ScaleX = this._GraphicsZoomFactor;
                            scaleTransform.ScaleY = this._GraphicsZoomFactor;
                            scaleTransform.CenterX = 0.0;
                            scaleTransform.CenterY = 0.0;
                        }
                        transformGroup.Children.Add(scaleTransform);
                        if (rotateTransform != null)
                        {
                            transformGroup.Children.Add(rotateTransform);
                        }
                        button.Tag = this._GraphicsZoomFactor.ToString();
                        button.RenderTransform = transformGroup;
                        this.elementForContextMenu = button;
                    IL_700:
                        this.IsGraphicsChange = true;
                        if (this._ZoomFactor >= 1.0)
                        {
                            this.attribute.Width = this.attributeWidth / this._ZoomFactor;
                            this.attribute.Height = this.attributeHeight / this._ZoomFactor;
                        }
                        else
                        {
                            this.attribute.Width = this.attributeWidth * this._ZoomFactor;
                            this.attribute.Height = this.attributeHeight * this._ZoomFactor;
                        }
                        goto IL_7D3;
                    }
                    if (arg_AF_0)
                    {
                        //goto IL_463;
                    }
                    if (-1 != 0)
                    {
                        if (this.FlipMode != 0 || this.FlipModeY != 0)
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = this._ZoomFactor;
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            if (false)
                            {
                                //goto IL_4E6;
                            }
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                            }
                            else
                            {
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                                this.MyInkCanvas.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            }
                            this.IsGraphicsChange = true;
                        }
                        else
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = this._ZoomFactor;
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                                if (3 == 0)
                                {
                                    //goto IL_64C;
                                }
                            }
                            else
                            {
                                this.MyInkCanvas.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            }
                            this.IsGraphicsChange = true;
                        }
                        this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
                        //goto IL_461;
                    }
                    //goto IL_624;
                }
                catch (Exception ex)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(ex);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                    MessageBox.Show(ex.Message);
                }
            IL_7D3:
                while (!true)
                {
                }
            }
            finally
            {
                MemoryManagement.FlushMemory();
                if (!false)
                {
                }
            }
            this.IsGreenCorrection = false;
        }

        private void ZoomInButton_Click1(object sender, RoutedEventArgs e)
        {
            this.IsImageDirtyState = (bool)e.Handled;
            this.ZoomInButtonClick1();
        }

        private void ZoomInButtonClick1()
        {
            this.IsZoomed = true;
            RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
            try
            {
                if (this.elementForContextMenu == null)
                {
                    if (this._ZoomFactor >= 2.5)
                    {
                        this._ZoomFactor = 2.5;
                        this.IsGraphicsChange = true;
                        return;
                    }
                    this._ZoomFactor += 0.025;
                    if (this.zoomTransform != null)
                    {
                        if (this.FlipMode != 0 || this.FlipModeY != 0)
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = this._ZoomFactor;
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = (this.MyInkCanvas.RenderTransform = null);
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                            }
                            this.IsGraphicsChange = true;
                        }
                        else
                        {
                            this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                            this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                            this.zoomTransform.ScaleX = this._ZoomFactor;
                            this.zoomTransform.ScaleY = this._ZoomFactor;
                            this.transformGroup = new TransformGroup();
                            this.transformGroup.Children.Add(this.zoomTransform);
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = (this.MyInkCanvas.RenderTransform = null);
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                            }
                            else
                            {
                                this.MyInkCanvas.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            }
                            this.IsGraphicsChange = true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(ex);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                MessageBox.Show(ex.Message);
            }
            finally
            {
            }
            this.IsGreenCorrection = false;
        }

        private void ZoomInButtonGreenScreen_Click(object sender, RoutedEventArgs e)
        {

            DependencyObject expr_06 = this.mainImage;
            EdgeMode expr_0B = EdgeMode.Aliased;
            if (!false)
            {
                RenderOptions.SetEdgeMode(expr_06, expr_0B);
            }
            try
            {
                if (4 == 0)
                {
                    goto IL_68;
                }
                bool flag = this.elementForContextMenu != null;
                if (flag)
                {
                    goto IL_218;
                }
            IL_38:
                bool expr_4C = this._ZoomFactorGreen < 1.0;
                if (4 != 0)
                {
                    flag = expr_4C;
                }
                if (!flag)
                {
                    this.IsGraphicsChange = true;
                }
            IL_68:
                this._ZoomFactorGreen += 0.025;
                flag = (this.zoomTransform == null);
                if (flag)
                {
                    goto IL_217;
                }
                this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                this.zoomTransform.ScaleX = this._ZoomFactorGreen;
                this.zoomTransform.ScaleY = this._ZoomFactorGreen;
                if (-1 == 0)
                {
                    goto IL_216;
                }
                this.transformGroup = new TransformGroup();
                this.transformGroup.Children.Add(this.zoomTransform);
                this.transformGroup.Children.Add(this.translateTransform);
                this.transformGroup.Children.Add(this.rotateTransform);
                flag = (this.GrdsubGreenScreen.Visibility != Visibility.Visible);
                if (flag)
                {
                    this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = null);
                    this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup;
                    goto IL_20F;
                }
                this.GrdGreenScreenDefault3.RenderTransform = null;
            IL_16E:
                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactorGreen, 0.0, 0.0, this._ZoomFactorGreen, 0.0, 0.0);
                if (3 == 0)
                {
                    goto IL_38;
                }
            IL_20F:
                this.IsGraphicsChange = true;
            IL_216:
            IL_217:
            IL_218:
                if (false)
                {
                    goto IL_16E;
                }
            }
            catch (Exception ex)
            {
                if (6 != 0)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(ex);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
                MessageBox.Show(ex.Message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
        }

        private void ZoomOutButtonChroma_Click(object sender, RoutedEventArgs e)
        {
            this.templatePopup();
            this.chromaKeyPopup();
            this.btnZoomOutAct.Visibility = Visibility.Visible;
            this.btnChromaZoomOutAct.Visibility = Visibility.Visible;
            this.IsImageDirtyState = true;

            UIElement expr_12 = this.CmbProductType;
            Visibility expr_17 = Visibility.Collapsed;
            if (6 != 0)
            {
                expr_12.Visibility = expr_17;
            }
            RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
            try
            {
                Button button;
                TransformGroup transformGroup;
                RotateTransform rotateTransform;
                ScaleTransform scaleTransform;
                if (this.elementForContextMenu == null)
                {
                    if (this._ZoomFactor < 0.525)
                    {
                        this._ZoomFactor = 0.5;
                        return;
                    }
                    this._ZoomFactor -= 0.025;
                    if (this.zoomTransform == null || this._ZoomFactor < 0.5)
                    {
                        goto IL_420;
                    }
                    if (this.FlipMode == 0 && this.FlipModeY == 0)
                    {
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                        this.zoomTransform.ScaleX = this._ZoomFactor;
                        this.zoomTransform.ScaleY = this._ZoomFactor;
                        this.transformGroup = new TransformGroup();
                        this.transformGroup.Children.Add(this.zoomTransform);
                        this.transformGroup.Children.Add(this.translateTransform);
                        this.transformGroup.Children.Add(this.rotateTransform);
                        if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                        {
                            this.GrdGreenScreenDefault3.RenderTransform = null;
                            this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                            this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                        }
                        else
                        {
                            this.MyInkCanvas.RenderTransform = null;
                            this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                        }
                        this.IsGraphicsChange = true;
                        goto IL_3F4;
                    }
                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    this.zoomTransform.ScaleX = this._ZoomFactor;
                    if (false)
                    {
                        goto IL_5F7;
                    }
                    this.zoomTransform.ScaleY = this._ZoomFactor;
                    this.transformGroup = new TransformGroup();
                    this.transformGroup.Children.Add(this.zoomTransform);
                    this.transformGroup.Children.Add(this.translateTransform);
                    this.transformGroup.Children.Add(this.rotateTransform);
                    if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                    {
                        this.GrdGreenScreenDefault3.RenderTransform = null;
                        if (-1 != 0)
                        {
                            this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                            this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                            goto IL_265;
                        }
                        goto IL_5A7;
                    }
                }
                else
                {
                    if (!(this.elementForContextMenu is Button))
                    {
                        goto IL_69D;
                    }
                    button = (Button)this.elementForContextMenu;
                    if (button.Tag != null)
                    {
                        this._GraphicsZoomFactor = Convert.ToDouble(button.Tag.ToString());
                    }
                    if (this._GraphicsZoomFactor < 0.625)
                    {
                        return;
                    }
                    this._GraphicsZoomFactor -= 0.025;
                    transformGroup = new TransformGroup();
                    TransformGroup transformGroup2 = this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup;
                    rotateTransform = new RotateTransform();
                    scaleTransform = new ScaleTransform();
                    if (transformGroup2 == null)
                    {
                        goto IL_5E3;
                    }
                    if (transformGroup2.Children.Count > 0)
                    {
                        if (transformGroup2.Children[0] is ScaleTransform)
                        {
                            scaleTransform = (ScaleTransform)transformGroup2.Children[0];
                        }
                        else if (transformGroup2.Children[0] is RotateTransform)
                        {
                            rotateTransform = (RotateTransform)transformGroup2.Children[0];
                        }
                    }
                    if (transformGroup2.Children.Count <= 1)
                    {
                        goto IL_5DC;
                    }
                    if (transformGroup2.Children[1] is ScaleTransform)
                    {
                        scaleTransform = (ScaleTransform)transformGroup2.Children[1];
                        goto IL_5A7;
                    }
                    if (transformGroup2.Children[1] is RotateTransform)
                    {
                        rotateTransform = (RotateTransform)transformGroup2.Children[1];
                        goto IL_5DB;
                    }
                    goto IL_5DB;
                }
            IL_233:
                this.MyInkCanvas.RenderTransform = null;
                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
            IL_265:
                this.IsGraphicsChange = true;
            IL_3F4:
                this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
            IL_420:
                goto IL_69D;
            IL_5A7:
            IL_5DB:
            IL_5DC:
                if (false)
                {
                    goto IL_233;
                }
            IL_5E3:
                if (scaleTransform == null)
                {
                    return;
                }
            IL_5F7:
                scaleTransform.ScaleX -= 0.025;
                scaleTransform.ScaleY -= 0.025;
                scaleTransform.CenterX = 0.0;
                scaleTransform.CenterY = 0.0;
                transformGroup.Children.Add(scaleTransform);
                if (rotateTransform != null)
                {
                    transformGroup.Children.Add(rotateTransform);
                }
                button.Tag = this._GraphicsZoomFactor;
                button.RenderTransform = transformGroup;
                this.elementForContextMenu = button;
                this.IsGraphicsChange = true;
            IL_69D:
                if (this._ZoomFactor >= 1.0)
                {
                    this.attribute.Width = this.attributeWidth / this._ZoomFactor;
                    this.attribute.Height = this.attributeHeight / this._ZoomFactor;
                }
                else
                {
                    this.attribute.Width = this.attributeWidth * this._ZoomFactor;
                    this.attribute.Height = this.attributeHeight * this._ZoomFactor;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
            this.IsGreenCorrection = false;
        }
        private void ZoomOutButton_Click(object sender, RoutedEventArgs e)
        {
            this.chromaKeyPopup();
            // this.CollapsePopUp();
            this.templatePopup();
            this.btnChromaZoomOut.Visibility = Visibility.Visible;
            this.btnZoomOutAct.Visibility = Visibility.Visible;
            this.IsImageDirtyState = true;
            this.btnZoomOutActivate.Visibility = Visibility.Visible;
            UIElement expr_12 = this.CmbProductType;
            Visibility expr_17 = Visibility.Collapsed;
            if (6 != 0)
            {
                expr_12.Visibility = expr_17;
            }
            RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
            try
            {
                Button button;
                TransformGroup transformGroup;
                RotateTransform rotateTransform;
                ScaleTransform scaleTransform;
                if (this.elementForContextMenu == null)
                {
                    if (this._ZoomFactor < 0.525)
                    {
                        this._ZoomFactor = 0.5;
                        return;
                    }
                    this._ZoomFactor -= 0.025;
                    if (this.zoomTransform == null || this._ZoomFactor < 0.5)
                    {
                        goto IL_420;
                    }
                    if (this.FlipMode == 0 && this.FlipModeY == 0)
                    {
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                        this.zoomTransform.ScaleX = this._ZoomFactor;
                        this.zoomTransform.ScaleY = this._ZoomFactor;
                        this.transformGroup = new TransformGroup();
                        this.transformGroup.Children.Add(this.zoomTransform);
                        this.transformGroup.Children.Add(this.translateTransform);
                        this.transformGroup.Children.Add(this.rotateTransform);
                        if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                        {
                            this.GrdGreenScreenDefault3.RenderTransform = null;
                            this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                            this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                        }
                        else
                        {
                            this.MyInkCanvas.RenderTransform = null;
                            this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                        }
                        this.IsGraphicsChange = true;
                        goto IL_3F4;
                    }
                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    this.zoomTransform.ScaleX = this._ZoomFactor;
                    if (false)
                    {
                        goto IL_5F7;
                    }
                    this.zoomTransform.ScaleY = this._ZoomFactor;
                    this.transformGroup = new TransformGroup();
                    this.transformGroup.Children.Add(this.zoomTransform);
                    this.transformGroup.Children.Add(this.translateTransform);
                    this.transformGroup.Children.Add(this.rotateTransform);
                    if (this.GrdsubGreenScreen.Visibility == Visibility.Visible)
                    {
                        this.GrdGreenScreenDefault3.RenderTransform = null;
                        if (-1 != 0)
                        {
                            this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                            this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                            goto IL_265;
                        }
                        goto IL_5A7;
                    }
                }
                else
                {
                    if (!(this.elementForContextMenu is Button))
                    {
                        goto IL_69D;
                    }
                    button = (Button)this.elementForContextMenu;
                    if (button.Tag != null)
                    {
                        this._GraphicsZoomFactor = Convert.ToDouble(button.Tag.ToString());
                    }
                    if (this._GraphicsZoomFactor < 0.625)
                    {
                        return;
                    }
                    this._GraphicsZoomFactor -= 0.025;
                    transformGroup = new TransformGroup();
                    TransformGroup transformGroup2 = this.elementForContextMenu.GetValue(UIElement.RenderTransformProperty) as TransformGroup;
                    rotateTransform = new RotateTransform();
                    scaleTransform = new ScaleTransform();
                    if (transformGroup2 == null)
                    {
                        goto IL_5E3;
                    }
                    if (transformGroup2.Children.Count > 0)
                    {
                        if (transformGroup2.Children[0] is ScaleTransform)
                        {
                            scaleTransform = (ScaleTransform)transformGroup2.Children[0];
                        }
                        else if (transformGroup2.Children[0] is RotateTransform)
                        {
                            rotateTransform = (RotateTransform)transformGroup2.Children[0];
                        }
                    }
                    if (transformGroup2.Children.Count <= 1)
                    {
                        goto IL_5DC;
                    }
                    if (transformGroup2.Children[1] is ScaleTransform)
                    {
                        scaleTransform = (ScaleTransform)transformGroup2.Children[1];
                        goto IL_5A7;
                    }
                    if (transformGroup2.Children[1] is RotateTransform)
                    {
                        rotateTransform = (RotateTransform)transformGroup2.Children[1];
                        goto IL_5DB;
                    }
                    goto IL_5DB;
                }
            IL_233:
                this.MyInkCanvas.RenderTransform = null;
                this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
            IL_265:
                this.IsGraphicsChange = true;
            IL_3F4:
                this.lblzoomplus.Content = this._ZoomFactor * 100.0 + " % ";
            IL_420:
                goto IL_69D;
            IL_5A7:
            IL_5DB:
            IL_5DC:
                if (false)
                {
                    goto IL_233;
                }
            IL_5E3:
                if (scaleTransform == null)
                {
                    return;
                }
            IL_5F7:
                scaleTransform.ScaleX -= 0.025;
                scaleTransform.ScaleY -= 0.025;
                scaleTransform.CenterX = 0.0;
                scaleTransform.CenterY = 0.0;
                transformGroup.Children.Add(scaleTransform);
                if (rotateTransform != null)
                {
                    transformGroup.Children.Add(rotateTransform);
                }
                button.Tag = this._GraphicsZoomFactor;
                button.RenderTransform = transformGroup;
                this.elementForContextMenu = button;
                this.IsGraphicsChange = true;
            IL_69D:
                if (this._ZoomFactor >= 1.0)
                {
                    this.attribute.Width = this.attributeWidth / this._ZoomFactor;
                    this.attribute.Height = this.attributeHeight / this._ZoomFactor;
                }
                else
                {
                    this.attribute.Width = this.attributeWidth * this._ZoomFactor;
                    this.attribute.Height = this.attributeHeight * this._ZoomFactor;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
                MemoryManagement.FlushMemory();
            }
            this.IsGreenCorrection = false;
        }

        private void ZoomOutButton_Click1(object sender, RoutedEventArgs e)
        {
            this.IsZoomed = true;
            RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
            try
            {
                this.CmbProductType.Visibility = Visibility.Collapsed;
                if (this.elementForContextMenu == null)
                {
                    if (this._ZoomFactor < 0.325)
                    {
                        this._ZoomFactor = 0.3;
                        return;
                    }
                    this._ZoomFactor -= 0.025;
                    bool flag = this.zoomTransform == null || this._ZoomFactor < 0.3;
                    if (false)
                    {
                        goto IL_2E7;
                    }
                    bool arg_BA_0 = flag;
                IL_BA:
                    if (arg_BA_0)
                    {
                        goto IL_40A;
                    }
                    if (this.FlipMode != 0 || this.FlipModeY != 0)
                    {
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                        this.zoomTransform.ScaleX = this._ZoomFactor;
                        this.zoomTransform.ScaleY = this._ZoomFactor;
                        this.transformGroup = new TransformGroup();
                        this.transformGroup.Children.Add(this.zoomTransform);
                        this.transformGroup.Children.Add(this.translateTransform);
                        this.transformGroup.Children.Add(this.rotateTransform);
                        while (this.GrdsubGreenScreen.Visibility != Visibility.Visible)
                        {
                            this.MyInkCanvas.RenderTransform = null;
                            this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                            if (7 != 0)
                            {
                            IL_268:
                                this.IsGraphicsChange = true;
                                goto IL_409;
                            }
                        }
                        this.GrdGreenScreenDefault3.RenderTransform = (this.MyInkCanvas.RenderTransform = null);
                        this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                        this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                        //goto IL_268;
                    }
                    this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                    this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                    this.zoomTransform.ScaleX = this._ZoomFactor;
                    this.zoomTransform.ScaleY = this._ZoomFactor;
                    this.transformGroup = new TransformGroup();
                IL_2E7:
                    this.transformGroup.Children.Add(this.zoomTransform);
                    this.transformGroup.Children.Add(this.translateTransform);
                    this.transformGroup.Children.Add(this.rotateTransform);
                    flag = (this.GrdsubGreenScreen.Visibility != Visibility.Visible);
                    bool expr_33E = arg_BA_0 = flag;
                    if (false)
                    {
                        goto IL_BA;
                    }
                    if (!expr_33E)
                    {
                        this.GrdGreenScreenDefault3.RenderTransform = (this.MyInkCanvas.RenderTransform = null);
                        this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                        this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactor, 0.0, 0.0, this._ZoomFactor, 0.0, 0.0);
                    }
                    else
                    {
                        this.MyInkCanvas.RenderTransform = null;
                        this.canbackground.RenderTransform = (this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup);
                    }
                    this.IsGraphicsChange = true;
                IL_409:
                IL_40A:;
                }
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
            finally
            {
            }
            this.IsGreenCorrection = false;
        }

        private void ZoomOutButtonGreenScreen_Click(object sender, RoutedEventArgs e)
        {
            RenderOptions.SetEdgeMode(this.mainImage, EdgeMode.Aliased);
            try
            {
                bool arg_21_0 = this.elementForContextMenu == null;
                while (arg_21_0)
                {
                    double arg_AE_0;
                    double expr_38 = arg_AE_0 = this._ZoomFactorGreen;
                    if (6 == 0)
                    {
                        goto IL_A5;
                    }
                    if (expr_38 < 0.15)
                    {
                        this._ZoomFactorGreen = 0.15;
                        return;
                    }
                    this._ZoomFactorGreen -= 0.025;
                    this._ZoomFactorGreen = 1.0;
                    if (this.zoomTransform != null)
                    {
                        arg_AE_0 = this._ZoomFactorGreen;
                        goto IL_A5;
                    }
                    if (false)
                    {
                        break;
                    }
                    int arg_BA_0 = 1;
                IL_B9:
                    if (arg_BA_0 == 0)
                    {
                        this.zoomTransform.CenterX = this.mainImage.ActualWidth / 2.0;
                        this.zoomTransform.CenterY = this.mainImage.ActualHeight / 2.0;
                        this.zoomTransform.ScaleX = this._ZoomFactorGreen;
                        this.zoomTransform.ScaleY = this._ZoomFactorGreen;
                        this.transformGroup = new TransformGroup();
                        this.transformGroup.Children.Add(this.zoomTransform);
                        if (8 != 0)
                        {
                            this.transformGroup.Children.Add(this.translateTransform);
                            this.transformGroup.Children.Add(this.rotateTransform);
                            bool expr_18D = (arg_BA_0 = ((this.GrdsubGreenScreen.Visibility != Visibility.Visible) ? 1 : 0)) != 0;
                            if (false)
                            {
                                goto IL_B0;
                            }
                            bool flag = expr_18D;
                            bool expr_196 = arg_21_0 = flag;
                            if (false)
                            {
                                continue;
                            }
                            if (!expr_196)
                            {
                                this.GrdGreenScreenDefault3.RenderTransform = null;
                                this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = this.transformGroup);
                                this.MyInkCanvas.DefaultDrawingAttributes.StylusTipTransform = new Matrix(this._ZoomFactorGreen, 0.0, 0.0, this._ZoomFactorGreen, 0.0, 0.0);
                                goto IL_247;
                            }
                        }
                        this.canbackground.RenderTransform = (this.MyInkCanvas.RenderTransform = null);
                        this.GrdGreenScreenDefault3.RenderTransform = this.transformGroup;
                    IL_247:
                        this.IsGraphicsChange = true;
                    }
                    break;
                IL_B0:
                    goto IL_B9;
                IL_A5:
                    arg_BA_0 = ((arg_AE_0 < 0.15) ? 1 : 0);
                    goto IL_B0;
                }
            }
            catch (Exception serviceException)
            {
                string message;
                do
                {
                    message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                }
                while (8 == 0);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
                if (6 != 0)
                {
                }
            }
            this.IsGreenCorrection = false;
        }

        private void btnIncrease_Click(object sender, RoutedEventArgs e)
        {
            try
            {                
                int currentSize = 0;
                if (this.txtContent != null && this.txtContent.FontSize > 0)
                    currentSize = Convert.ToInt32(this.txtContent.FontSize);

                txtContent.FontSize = currentSize + 2;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }
        }

        private void btnDecrease_Click(object sender, RoutedEventArgs e)
        {
            try
            {               
                int currentSize = 0;
                if (this.txtContent != null && this.txtContent.FontSize > 0)
                    currentSize = Convert.ToInt32(this.txtContent.FontSize);
                if (currentSize > 4)
                    txtContent.FontSize = currentSize - 2;
            }
            catch (Exception serviceException)
            {
                string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                ErrorHandler.ErrorHandler.LogFileWrite(message);
            }

        }


        //Jayendra

        private void btnCollageImage_Click(object sender, RoutedEventArgs e)
        {           
            this.GrdCollage.Visibility = Visibility.Visible; 
            this.btnCollageBottom.Visibility = Visibility.Visible;
        }
        private void OnPreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {           
            try
            {

                System.Windows.Shapes.Rectangle rect = (System.Windows.Shapes.Rectangle)sender;

                int c = Grid.GetColumn(rect);
                int r = Grid.GetRow(rect);

                TextBox textBox = (TextBox)this.elementForContextMenu;
                this.txtContent.Foreground = rect.Fill;

            }
            catch (Exception ex)
            {

            }
            
        }
        private void ChangeBackgroungColor_Rectangle(object sender, MouseButtonEventArgs e)
        {
            try
            {
                System.Windows.Shapes.Rectangle rect = (System.Windows.Shapes.Rectangle)sender;

                int c = Grid.GetColumn(rect);
                int r = Grid.GetRow(rect);

                this.grdpreview.Background = rect.Fill;
            }
            catch (Exception ex)
            {

            }

        }

        private void OnMouseEnter(object sender, MouseEventArgs e)
        {
            try
            {
                var element = (UIElement)e.Source;

                int c = Grid.GetColumn(element);
                int r = Grid.GetRow(element);
            }
            catch (Exception ex)
            {

            }
        }
        private void btnChromaBgColor_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //this.btnColor.Visibility = Visibility.Collapsed;
                this.ColorGrid1.Visibility = Visibility.Visible;
                this.btnColorAct.Visibility = Visibility.Visible;
            }
            catch (Exception ex)
            {

            }
        }

        private void btnChromaBgColorAct_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                this.btnColorAct.Visibility = Visibility.Collapsed;
                this.ColorGrid1.Visibility = Visibility.Collapsed;
                this.btnColor.Visibility = Visibility.Visible;
            }
            catch (Exception ex)
            {

            }
        }

        
        private void btnChromaUndo_Click(object sender, RoutedEventArgs e)
        {            
            this.chromaKeyPopup();
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.Ink;
           
            int currentInk = this.MyInkCanvas.Strokes.Count;
                 
            undoCanvas = null;
            undoCanvas = this.MyInkCanvas.Strokes;
            redoCanvas = undoCanvas.Clone();
            
            listStroke = new List<StrokeCollection>();
            if (StrokeCollection.Count == 0)
                StrokeCollection.Add(undoCanvas.Clone());
            listStroke.Add(undoCanvas.Clone());

            this.btnChromaUndoAct.Visibility = Visibility.Visible;
            this.ChromaUndo();
            

        }

        private void ChromaUndo()
        {

            int arg_12_0 = this.MyInkCanvas.Strokes.Count;
            while (true)
            {
                if (arg_12_0 <= 0)
                {
                    goto IL_CA;
                }
                if (true)
                {

                    this.MyInkCanvas.Strokes.RemoveAt(this.MyInkCanvas.Strokes.Count - 1);                    
                    goto IL_CC;
                }
            IL_CB:
                if (true)
                {
                    break;
                }
            IL_CA:
                goto IL_CB;
            IL_CC:
                if (!false)
                {
                    return;
                }
            }
        }
        private void btnChromaRedo_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                this.chromaKeyPopup();
                this.btnChromaRedoAct.Visibility = Visibility.Visible;
                this.ChromaRedo();
            }
            catch (Exception ex)
            {

            }
            
        }

        private void ChromaRedo()
        {
            if (!false)
            {
                int arg_12_0 = this.MyInkCanvas.Strokes.Count;
                if (arg_12_0 <= 0)
                {
                    goto IL_CA;
                }                
                if (true)
                {
                    goto arg_CC;
                }
           
            arg_CC:
                this.MyInkCanvas.Strokes = listStroke[0];
            
            IL_CA:;

            }
        }

        private void bottomImageClear()
        {
            this.imgFOREGROUND.Source = new BitmapImage(new Uri("/images/whiteSquare.png", UriKind.Relative));
            this.imgBACKGROUND.Source = new BitmapImage(new Uri("/images/whiteSquare.png", UriKind.Relative));
        }

        private void btnBottomForeGround_Click(object sender, RoutedEventArgs e)
        {
            this.bottomImageClear();
            try
            {
                //bool arg_4B_0 = (this.mainImage.Visibility == Visibility.Visible);
                bool arg_4B_0 = (this.opacitymaskmycan.Visibility == Visibility.Visible);
                if (arg_4B_0)
                {
                    this.imgFOREGROUND.Source = new BitmapImage(new Uri("/images/RedSquare.png", UriKind.Relative));                    
                    this.opacitymaskmycan.Visibility = Visibility.Collapsed;
                    this.mainImageundo.Opacity = 0.0;
                }
                else
                {
                    this.imgFOREGROUND.Source = new BitmapImage(new Uri("/images/whiteSquare.png", UriKind.Relative));
                    this.opacitymaskmycan.Visibility = Visibility.Visible;
                    this.mainImageundo.Opacity = 1;
                }
            }
            catch (Exception ex)
            {

            }
        }
        private void btnBottomBackGround_Click(object sender, RoutedEventArgs e)
        {
            this.bottomImageClear();
            bool test = (this.imageundoGrid.Visibility == Visibility.Visible);                          
            try
            {
                if (this.imageundoGrid.Background.Opacity != 0.0)
                {
                    this.imgBACKGROUND.Source = new BitmapImage(new Uri("/images/RedSquare.png", UriKind.Relative));
                    this.imageundoGrid.Background.Opacity = 0.0;
                }
                else
                {
                    this.imgBACKGROUND.Source = new BitmapImage(new Uri("/images/whiteSquare.png", UriKind.Relative));
                    this.imageundoGrid.Background.Opacity = 1.0;
                }
            }
            catch (Exception ex)
            {

            }
        }

        private void btnFeatherSizeMin_Click(object sender, RoutedEventArgs e)
        {
            IsFeather = true;

            bool exe_LI = (this.FeatherSize == 0);
            if (this.fillSize >= 5)
            {
                /*if (exe_LI)
                {
                    this.FeatherSize = 0;
                    return;
                }*/ //Blocked to fix feather size 10/10/2018 Sunil
                //if (this.FeatherSize == 1)
                //{
                //    this.FeatherSize = 2;
                //    return;
                //}

                //this.fillSize -= 5; //Blocked to fix feather size 10/12/2018 Sunil
                countFeather -= 10;
                this.FeatherSize -= 1;
                string percentage = Convert.ToString(countFeather) + "%";
                this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                this.txtFeather.Text = percentage;
            }
            else
            {
                IsFeather = false;
            }
            
        }

        private void btnFeatherSizePlus_Click(object sender, RoutedEventArgs e)
        {
            IsFeather = true;

            bool exe_LI = (this.FeatherSize == 10);
            if (this.fillSize >= 5)
            {
                /*if (exe_LI)
                {
                    this.FeatherSize = 10;
                    return;
                }
                if (this.FeatherSize > 10)
                {
                    this.FeatherSize = 10;
                    return;
                }
                this.fillSize += 5;*/ //Blocked to fix feather size 10/10/2018 Sunil
                countFeather += 10;
                string percentage = Convert.ToString(countFeather) + "%";
                this.FeatherSize += 10;
                this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                this.txtFeather.Text = percentage;
            }
            else
            {
                IsFeather = false;
            }
        }

        private void Button_Click_EraseSquare(object sender, RoutedEventArgs e)
        {
            this.IsPenTool = false;
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
            IsEraserDrawRectangleActive = true;
            this.mainImage.Focus();
            this.MyInkCanvas.Focus();
            this.GrdGreenScreenDefault.IsHitTestVisible = true;
            this.mainImage.Cursor = Cursors.Cross;
            this.MyInkCanvas.Cursor = Cursors.Cross;
            
            this.IsRectangle = true;
            
        }

        private void btnTopBrushButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                this.keepClear();
                //this.fillSize = 80; 10-12-2018 Blocked Sunil 
                ///10-12-2018 Added for min size of brush Sunil
                if (this.fillSize < 10)
                {
                    this.fillSize = 10;
                }
                this.FeatherSize = 0;
                ///
                this.ImgBrush.Source = new BitmapImage(new Uri("/images/keepBrushAct.png", UriKind.Relative));
                this.EraserBrush((double)this.fillSize, (double)this.fillSize);
            }
            catch
            {

            }

        }

        private void btnBrushCloneButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                this.keepCloneClear();
                this.fillSize = 30;
                this.ImgBrushClone.Source = new BitmapImage(new Uri("/images/keepBrushAct.png", UriKind.Relative));
                this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                // this.dragCanvas.AllowDragging = true;
            }
            catch
            {

            }

        }
        private void btnBottomGreenBackGround_Click(object sender, RoutedEventArgs e)
        {
            string text = this.primaryColorName;
            if (text != null)
            {
                if ((text == "Green"))
                {
                    this.ckae.ColorKey = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                    this.ckae.Tolerance = (double)this.toleranceDefault;
                    this.MyInkCanvasParent.Effect = this.ckae;
                }
                else
                {
                    this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                    this._greenscreendefault3.HueMin = 0.2;
                    this._greenscreendefault3.HueMax = 0.5;
                    this._greenscreendefault3.LightnessShift = MainWindow.lightness;
                    this._greenscreendefault3.SaturationShift = MainWindow.saturation;
                    this.MyInkCanvasParent.Effect = this._greenscreendefault3;
                }
            }
            this.MyInkCanvas.SnapsToDevicePixels = true;
            this.MyInkCanvas.UseLayoutRounding = true;
            this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.mainImage.SnapsToDevicePixels = true;
            this.mainImage.UseLayoutRounding = true;
            this.mainImage.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.GrdGreenScreenDefault3.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);

        }

        private void btnBottomBlueBackGround_Click(object sender, RoutedEventArgs e)
        {
            string text = this.primaryColorName;
            if (text != null)
            {
                if ((text == "Green"))
                {

                    this.attribute.Color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString(this.ColorCode);
                    this._greenscreendefault3.HueMin = 0.2;
                    this._greenscreendefault3.HueMax = 0.5;
                    this._greenscreendefault3.LightnessShift = MainWindow.lightness;
                    this._greenscreendefault3.SaturationShift = MainWindow.saturation;
                    this.MyInkCanvasParent.Effect = this._greenscreendefault3;
                }
            }
            this.MyInkCanvas.SnapsToDevicePixels = true;
            this.MyInkCanvas.UseLayoutRounding = true;
            this.MyInkCanvas.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.mainImage.SnapsToDevicePixels = true;
            this.mainImage.UseLayoutRounding = true;
            this.mainImage.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
            this.GrdGreenScreenDefault3.SetValue(RenderOptions.EdgeModeProperty, EdgeMode.Aliased);
        }

        private void BrushSizeIncrease_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                this.fillSize = fillSize + 5;
                this.txtBrush.Text = Convert.ToString(this.fillSize);
                // this.rdbCIR5.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = false;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            this.IsFeather = false;
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.IsFeather = false;
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }

        }

        private void BrushSizeDecrease_Click(object sender, RoutedEventArgs e)
        {
            while (!false)
            {
                if (this.fillSize > 5)
                    this.fillSize = fillSize - 5;
                this.txtBrush.Text = Convert.ToString(this.fillSize);
                this.rdbCIR5.IsChecked = new bool?(true);
                bool flag;
                if (8 != 0)
                {
                    bool arg_3A_0;
                    bool arg_83_0 = arg_3A_0 = this.IsGreenCorrection;
                    int arg_37_0 = 0;
                    int expr_80;
                    while (true)
                    {
                        int arg_80_0;
                        int expr_37 = arg_80_0 = arg_37_0;
                        if (expr_37 == 0)
                        {
                            bool expr_3A = (arg_3A_0 ? 1 : 0) == expr_37;
                            if (8 != 0)
                            {
                                flag = expr_3A;
                            }
                            if (!flag)
                            {
                                break;
                            }
                            this.rectangleEraser = false;
                            arg_83_0 = (arg_3A_0 = this.undoEraser);
                            arg_80_0 = 0;
                        }
                        expr_80 = (arg_37_0 = arg_80_0);
                        if (expr_80 == 0)
                        {
                            this.IsFeather = false;
                            goto Block_4;
                        }
                    }
                    this.removebackGround();
                    this.IsFeather = false;
                    this.dragCanvas.AllowDragging = false;
                    this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
                    break;
                Block_4:
                    flag = ((arg_83_0 ? 1 : 0) == expr_80);
                }
                if (!false)
                {
                    if (!flag)
                    {
                        if (false)
                        {
                            continue;
                        }
                        this.EraserBrushUndo((double)this.fillSize, (double)this.fillSize);
                    }
                    else
                    {
                        this.EraserBrush((double)this.fillSize, (double)this.fillSize);
                    }
                }
                return;
            }

        }

        private void mainImageundo_MouseLeftButtonDown(object sender, RoutedEventArgs e)
        {

        }
        

        private System.Windows.Point EndPointCheck
        {
            get;
            set;
        }

        public string GraphicEffect
        {
            get;
            set;
        }

        public string HotFolderPath
        {
            get;
            set;
        }


        public Collection<string> ImageArray
        {
            get;
            set;
        }

        public string ImageEffect
        {
            get;
            set;
        }

        public static MainWindow Instance
        {
            get;
            set;
        }

        //public bool IsCollageChanged
        //{
        //    get;
        //    set;
        //}
        public bool IsImageDirtyState
        {
            get;
            set;
        }

        public int PhotoId
        {
            get;
            set;
        }

        public string PhotoName
        {
            get;
            set;
        }

        public int PreviousPhotoId
        {
            get;
            set;
        }

        public bool PrintJob
        {
            get;
            set;
        }

        public DrawingAttributes SelectedDrawingAttributes
        {
            get;
            set;
        }

        public int semiOrderProfileId
        {
            get;
            set;
        }

        private System.Windows.Point StartPointCheck
        {
            get;
            set;
        }

        public string tempfilename
        {
            get;
            set;
        }

        public string ThumnailFolderPath
        {
            get;
            set;
        }

        public string BigThumnailFolderPath { get; set; }

        public string DateFolder { get; set; }

        public string CropFolderPath { get; set; }
        private void Button_Click_ErasePolygon(object sender, RoutedEventArgs e)
        {
            IsPenTool = true;
            IsKeepDrop = false;
            IsRectangle = false;
            IsInvert = false;
            lstPoint = null;
            AllPenPoint = null;
            uIElementCollectionLine = null;
            uIElementCollectionRect = null;
            StartPointPoly = new System.Windows.Point();
            EndPointPoly = new System.Windows.Point();
            isDrawingLineToJoinStarEndPoint = false;
            //this.StartingPoint = new System.Windows.Point();
            //this.EndingPoint = new System.Windows.Point();
            this.MyInkCanvas.EditingMode = InkCanvasEditingMode.None;
            this.MyInkCanvas.Cursor = Cursors.Arrow;
            this.mainImage.Cursor = Cursors.Arrow;
            //this.MyInkCanvas.ForceCursor = true;
            this.mainImage.Focus();

        }

        private void Click_INVERT(object sender, RoutedEventArgs e)
        {
            //this.ApplyGreenEffectGrid();           
            if (IsInvert)
            {
                IsInvert = false;
                //this.canbackgroundParent.Visibility = Visibility.Collapsed;
                IsPenTool = false;
            }
            else {
                IsInvert = true;
                //this.canbackgroundParent.Visibility = Visibility.Collapsed;
                IsPenTool = false;
            };
            try
            {
                while (true)
                {

                    if (!isDrawingLineToJoinStarEndPoint)
                    {
                        DrawingLineToJoinStarEndPoint();
                    }
                    if (this.AllPenPoint == null)
                    {
                        break;
                    }

                    CreatePolyBezierSegment(this.AllPenPoint);
                    ApplyGreenEffectGrid(); //Added Sunil 10-12-2018
                    break;
                }

            }
            catch (Exception ex)
            {

            }


        }

        private void CreatePolyBezierSegment(List<System.Windows.Point> lstPoint)
        {
            try
            {
                if (lstPoint.Count > 2)
                {                   
                    Polygon yellowPolygon = new Polygon();
                    if (IsInvert)
                    {
                        color = (System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#282828");
                        yellowPolygon.Fill = new SolidColorBrush(color);
                        this.canbackgroundParent.Visibility = Visibility.Visible;
                    }
                    else
                    {
                        yellowPolygon.Fill = new SolidColorBrush((System.Windows.Media.Color)System.Windows.Media.ColorConverter.ConvertFromString("#00FF00"));
                        this.canbackgroundParent.Visibility = Visibility.Visible;
                    }
                    IsPenTool = false;
                    yellowPolygon.StrokeThickness = 1;

                    PointCollection polygonPoints = new PointCollection();
                    foreach (var item in lstPoint)
                    {
                        polygonPoints.Add(item);
                    }
                    yellowPolygon.Points = polygonPoints;                   

                    MyInkCanvas.Children.Add(yellowPolygon);
                    yellowPolygon.MouseLeftButtonDown += new MouseButtonEventHandler(this.mainImage_MouseLeftButtonDown);
                }

            }
            catch (Exception serviceException)
            {
                if (!false)
                {
                    string message = ErrorHandler.ErrorHandler.CreateErrorMessage(serviceException);
                    ErrorHandler.ErrorHandler.LogFileWrite(message);
                }
            }

        }

        private bool DrawingLineToJoinStarEndPoint()
        {
            isDrawingLineToJoinStarEndPoint = false;
            try
            {
                Line myEndLine = new Line();
                myEndLine.StrokeThickness = 1;
                myEndLine.StrokeDashArray = new DoubleCollection() { 2, 2 };
                myEndLine.X1 = this.StartPointPoly.X;
                myEndLine.Y1 = this.StartPointPoly.Y;
                myEndLine.X2 = this.EndPointPoly.X;
                myEndLine.Y2 = this.EndPointPoly.Y;
                //myEndLine.Stroke = new SolidColorBrush(Colors.Orange);
                MyInkCanvas.Children.Add(myEndLine);
                //CreatePolyBezierSegment(lstPoint);
                this.AllPenPoint = new List<System.Windows.Point>();
                this.AllPenPoint = this.lstPoint;
                // this.lstPoint = null;
                isDrawingLineToJoinStarEndPoint = true;
            }
            catch (Exception ex)
            {

            }

            return isDrawingLineToJoinStarEndPoint;
        }

    }
}


